
Airbag_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b300  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800b488  0800b488  0000c488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4a8  0800b4a8  0000d08c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4a8  0800b4a8  0000c4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4b0  0800b4b0  0000d08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4b0  0800b4b0  0000c4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4b4  0800b4b4  0000c4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800b4b8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d08c  2**0
                  CONTENTS
 10 .bss          00000af4  2000008c  2000008c  0000d08c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b80  20000b80  0000d08c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d08c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b8b4  00000000  00000000  0000d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000433f  00000000  00000000  00028970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001898  00000000  00000000  0002ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012fd  00000000  00000000  0002e548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024dac  00000000  00000000  0002f845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fe5b  00000000  00000000  000545f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6d6e  00000000  00000000  0007444c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014b1ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d5c  00000000  00000000  0014b200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00151f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b470 	.word	0x0800b470

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	0800b470 	.word	0x0800b470

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <hx711_init>:
 */

#include <HX711.h>

//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	4613      	mov	r3, r2
 8000d52:	80fb      	strh	r3, [r7, #6]
  // Setup the pin connections with the STM Board
  hx711->clk_gpio = clk_gpio;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	88fa      	ldrh	r2, [r7, #6]
 8000d5e:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000d6a:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d84:	2302      	movs	r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	68b8      	ldr	r0, [r7, #8]
 8000d94:	f001 fdd0 	bl	8002938 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8000da4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000da6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	6838      	ldr	r0, [r7, #0]
 8000db0:	f001 fdc2 	bl	8002938 <HAL_GPIO_Init>

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	@ 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <set_scale>:

//#############################################################################################
void set_scale(hx711_t *hx711, float Ascale, float Bscale){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000dc8:	edc7 0a01 	vstr	s1, [r7, #4]
  // Set the scale. To calibrate the cell, run the program with a scale of 1, call the tare function and then the get_units function.
  // Divide the obtained weight by the real weight. The result is the parameter to pass to scale
	hx711->Ascale = Ascale;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	611a      	str	r2, [r3, #16]
	hx711->Bscale = Bscale;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	61da      	str	r2, [r3, #28]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <set_gain>:

//#############################################################################################
void set_gain(hx711_t *hx711, uint8_t Again, uint8_t Bgain){
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	70fb      	strb	r3, [r7, #3]
 8000df0:	4613      	mov	r3, r2
 8000df2:	70bb      	strb	r3, [r7, #2]
  // Define A channel's gain
	switch (Again) {
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	2b40      	cmp	r3, #64	@ 0x40
 8000df8:	d005      	beq.n	8000e06 <set_gain+0x22>
 8000dfa:	2b80      	cmp	r3, #128	@ 0x80
 8000dfc:	d107      	bne.n	8000e0e <set_gain+0x2a>
			case 128:		// channel A, gain factor 128
				hx711->Again = 1;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	751a      	strb	r2, [r3, #20]
				break;
 8000e04:	e003      	b.n	8000e0e <set_gain+0x2a>
			case 64:		// channel A, gain factor 64
				hx711->Again = 3;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	751a      	strb	r2, [r3, #20]
				break;
 8000e0c:	bf00      	nop
		}
	hx711->Bgain = 2;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2202      	movs	r2, #2
 8000e12:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <set_offset>:

//#############################################################################################
void set_offset(hx711_t *hx711, long offset, uint8_t channel){
 8000e22:	b480      	push	{r7}
 8000e24:	b085      	sub	sp, #20
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71fb      	strb	r3, [r7, #7]
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d103      	bne.n	8000e3e <set_offset+0x1c>
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	68ba      	ldr	r2, [r7, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
	else hx711->Boffset = offset;
}
 8000e3c:	e002      	b.n	8000e44 <set_offset+0x22>
	else hx711->Boffset = offset;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	619a      	str	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <shiftIn>:

//############################################################################################
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    for(i = 0; i < 8; ++i) {
 8000e60:	2300      	movs	r3, #0
 8000e62:	73bb      	strb	r3, [r7, #14]
 8000e64:	e03e      	b.n	8000ee4 <shiftIn+0x94>
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6818      	ldr	r0, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	891b      	ldrh	r3, [r3, #8]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4619      	mov	r1, r3
 8000e72:	f001 ff15 	bl	8002ca0 <HAL_GPIO_WritePin>
        if(bitOrder == 0)
 8000e76:	78fb      	ldrb	r3, [r7, #3]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d113      	bne.n	8000ea4 <shiftIn+0x54>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	895b      	ldrh	r3, [r3, #10]
 8000e84:	4619      	mov	r1, r3
 8000e86:	4610      	mov	r0, r2
 8000e88:	f001 fef2 	bl	8002c70 <HAL_GPIO_ReadPin>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	b25a      	sxtb	r2, r3
 8000e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	73fb      	strb	r3, [r7, #15]
 8000ea2:	e014      	b.n	8000ece <shiftIn+0x7e>
        else
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	895b      	ldrh	r3, [r3, #10]
 8000eac:	4619      	mov	r1, r3
 8000eae:	4610      	mov	r0, r2
 8000eb0:	f001 fede 	bl	8002c70 <HAL_GPIO_ReadPin>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	7bbb      	ldrb	r3, [r7, #14]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	b25a      	sxtb	r2, r3
 8000ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	891b      	ldrh	r3, [r3, #8]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f001 fee1 	bl	8002ca0 <HAL_GPIO_WritePin>
    for(i = 0; i < 8; ++i) {
 8000ede:	7bbb      	ldrb	r3, [r7, #14]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	73bb      	strb	r3, [r7, #14]
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	2b07      	cmp	r3, #7
 8000ee8:	d9bd      	bls.n	8000e66 <shiftIn+0x16>
    }
    return value;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <is_ready>:

//############################################################################################
bool is_ready(hx711_t *hx711) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET){
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	895b      	ldrh	r3, [r3, #10]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4610      	mov	r0, r2
 8000f08:	f001 feb2 	bl	8002c70 <HAL_GPIO_ReadPin>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <is_ready+0x22>
		return 1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <is_ready+0x24>
	}
	return 0;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <wait_ready>:

//############################################################################################
void wait_ready(hx711_t *hx711) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	// Wait for the chip to become ready.
	while (!is_ready(hx711)) {
 8000f28:	e002      	b.n	8000f30 <wait_ready+0x10>
		HAL_Delay(0);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f001 f8b8 	bl	80020a0 <HAL_Delay>
	while (!is_ready(hx711)) {
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ffdf 	bl	8000ef4 <is_ready>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f083 0301 	eor.w	r3, r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f3      	bne.n	8000f2a <wait_ready+0xa>
	}
}
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <read>:

//############################################################################################
long read(hx711_t *hx711, uint8_t channel){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
	wait_ready(hx711);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ffe1 	bl	8000f20 <wait_ready>
	unsigned long value = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = { 0 };
 8000f62:	4b2e      	ldr	r3, [pc, #184]	@ (800101c <read+0xd0>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	813b      	strh	r3, [r7, #8]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	72bb      	strb	r3, [r7, #10]
	uint8_t filler = 0x00;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	75fb      	strb	r3, [r7, #23]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop

	noInterrupts();

	data[2] = shiftIn(hx711, 1);
 8000f74:	2101      	movs	r1, #1
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff6a 	bl	8000e50 <shiftIn>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	72bb      	strb	r3, [r7, #10]
	data[1] = shiftIn(hx711, 1);
 8000f80:	2101      	movs	r1, #1
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ff64 	bl	8000e50 <shiftIn>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	727b      	strb	r3, [r7, #9]
	data[0] = shiftIn(hx711, 1);
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff5e 	bl	8000e50 <shiftIn>
 8000f94:	4603      	mov	r3, r0
 8000f96:	723b      	strb	r3, [r7, #8]

	uint8_t gain = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	75bb      	strb	r3, [r7, #22]
	if(channel == 0) gain = hx711->Again;
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d103      	bne.n	8000faa <read+0x5e>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7d1b      	ldrb	r3, [r3, #20]
 8000fa6:	75bb      	strb	r3, [r7, #22]
 8000fa8:	e003      	b.n	8000fb2 <read+0x66>
	else gain = hx711->Bgain;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb0:	75bb      	strb	r3, [r7, #22]

	for (unsigned int i = 0; i < gain; i++) {
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	e012      	b.n	8000fde <read+0x92>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	891b      	ldrh	r3, [r3, #8]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f001 fe6c 	bl	8002ca0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	891b      	ldrh	r3, [r3, #8]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f001 fe64 	bl	8002ca0 <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	7dbb      	ldrb	r3, [r7, #22]
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d3e8      	bcc.n	8000fb8 <read+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fe6:	b662      	cpsie	i
}
 8000fe8:	bf00      	nop
	}

	interrupts();

	// Replicate the most significant bit to pad out a 32-bit signed integer
	if (data[2] & 0x80) {
 8000fea:	7abb      	ldrb	r3, [r7, #10]
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	da02      	bge.n	8000ff8 <read+0xac>
		filler = 0xFF;
 8000ff2:	23ff      	movs	r3, #255	@ 0xff
 8000ff4:	75fb      	strb	r3, [r7, #23]
 8000ff6:	e001      	b.n	8000ffc <read+0xb0>
	} else {
		filler = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	75fb      	strb	r3, [r7, #23]
	}

	// Construct a 32-bit signed integer
	value = ( (unsigned long)(filler) << 24
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	061a      	lsls	r2, r3, #24
			| (unsigned long)(data[2]) << 16
 8001000:	7abb      	ldrb	r3, [r7, #10]
 8001002:	041b      	lsls	r3, r3, #16
 8001004:	431a      	orrs	r2, r3
			| (unsigned long)(data[1]) << 8
 8001006:	7a7b      	ldrb	r3, [r7, #9]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	4313      	orrs	r3, r2
			| (unsigned long)(data[0]) );
 800100c:	7a3a      	ldrb	r2, [r7, #8]
	value = ( (unsigned long)(filler) << 24
 800100e:	4313      	orrs	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]

	return (long)(value);
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	0800b488 	.word	0x0800b488

08001020 <read_average>:

//############################################################################################
long read_average(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
 800102c:	4613      	mov	r3, r2
 800102e:	70bb      	strb	r3, [r7, #2]
	long sum = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
	for (int8_t i = 0; i < times; i++) {
 8001034:	2300      	movs	r3, #0
 8001036:	72fb      	strb	r3, [r7, #11]
 8001038:	e011      	b.n	800105e <read_average+0x3e>
		sum += read(hx711, channel);
 800103a:	78bb      	ldrb	r3, [r7, #2]
 800103c:	4619      	mov	r1, r3
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff84 	bl	8000f4c <read>
 8001044:	4602      	mov	r2, r0
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4413      	add	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
		HAL_Delay(0);
 800104c:	2000      	movs	r0, #0
 800104e:	f001 f827 	bl	80020a0 <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 8001052:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	3301      	adds	r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	72fb      	strb	r3, [r7, #11]
 800105e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8001062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001066:	429a      	cmp	r2, r3
 8001068:	dbe7      	blt.n	800103a <read_average+0x1a>
	}
	return sum / times;
 800106a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <get_value>:

//############################################################################################
double get_value(hx711_t *hx711, int8_t times, uint8_t channel) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
 8001088:	4613      	mov	r3, r2
 800108a:	70bb      	strb	r3, [r7, #2]
	long offset = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) offset = hx711->Aoffset;
 8001090:	78bb      	ldrb	r3, [r7, #2]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d103      	bne.n	800109e <get_value+0x22>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e002      	b.n	80010a4 <get_value+0x28>
	else offset = hx711->Boffset;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	60fb      	str	r3, [r7, #12]
	return read_average(hx711, times, channel) - offset;
 80010a4:	78ba      	ldrb	r2, [r7, #2]
 80010a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010aa:	4619      	mov	r1, r3
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ffb7 	bl	8001020 <read_average>
 80010b2:	4602      	mov	r2, r0
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff f9d7 	bl	800046c <__aeabi_i2d>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80010c6:	eeb0 0a47 	vmov.f32	s0, s14
 80010ca:	eef0 0a67 	vmov.f32	s1, s15
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <tare>:

//############################################################################################
void tare(hx711_t *hx711, uint8_t times, uint8_t channel) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
 80010e0:	4613      	mov	r3, r2
 80010e2:	70bb      	strb	r3, [r7, #2]
	read(hx711, channel); // Change channel
 80010e4:	78bb      	ldrb	r3, [r7, #2]
 80010e6:	4619      	mov	r1, r3
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff2f 	bl	8000f4c <read>
	double sum = read_average(hx711, times, channel);
 80010ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010f2:	78ba      	ldrb	r2, [r7, #2]
 80010f4:	4619      	mov	r1, r3
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff92 	bl	8001020 <read_average>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f9b4 	bl	800046c <__aeabi_i2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	e9c7 2302 	strd	r2, r3, [r7, #8]
	set_offset(hx711, sum, channel);
 800110c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001110:	f7ff fc28 	bl	8000964 <__aeabi_d2iz>
 8001114:	4601      	mov	r1, r0
 8001116:	78bb      	ldrb	r3, [r7, #2]
 8001118:	461a      	mov	r2, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fe81 	bl	8000e22 <set_offset>
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <tare_all>:

//############################################################################################
void tare_all(hx711_t *hx711, uint8_t times) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
	tare(hx711, times, CHANNEL_A);
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	2200      	movs	r2, #0
 8001138:	4619      	mov	r1, r3
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffca 	bl	80010d4 <tare>
	tare(hx711, times, CHANNEL_B);
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	2201      	movs	r2, #1
 8001144:	4619      	mov	r1, r3
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffc4 	bl	80010d4 <tare>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <get_weight>:

//############################################################################################
float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001154:	b5b0      	push	{r4, r5, r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
 8001160:	4613      	mov	r3, r2
 8001162:	70bb      	strb	r3, [r7, #2]
  // Read load cell
	read(hx711, channel);
 8001164:	78bb      	ldrb	r3, [r7, #2]
 8001166:	4619      	mov	r1, r3
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff feef 	bl	8000f4c <read>
	float scale = 0;
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 8001174:	78bb      	ldrb	r3, [r7, #2]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d103      	bne.n	8001182 <get_weight+0x2e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e002      	b.n	8001188 <get_weight+0x34>
	else scale = hx711->Bscale;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	60fb      	str	r3, [r7, #12]
	return get_value(hx711, times, channel) / scale;
 8001188:	78ba      	ldrb	r2, [r7, #2]
 800118a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800118e:	4619      	mov	r1, r3
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff73 	bl	800107c <get_value>
 8001196:	ec55 4b10 	vmov	r4, r5, d0
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f7ff f978 	bl	8000490 <__aeabi_f2d>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4620      	mov	r0, r4
 80011a6:	4629      	mov	r1, r5
 80011a8:	f7ff faf4 	bl	8000794 <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fbfe 	bl	80009b4 <__aeabi_d2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	ee07 3a90 	vmov	s15, r3
}
 80011be:	eeb0 0a67 	vmov.f32	s0, s15
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bdb0      	pop	{r4, r5, r7, pc}

080011c8 <HAL_GPIO_EXTI_Callback>:
uint16_t rpm = 0;
uint16_t lastRpm = 0;
float diameter = 58; //mm
float vel = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Encoder_Pin) {
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d104      	bne.n	80011e2 <HAL_GPIO_EXTI_Callback+0x1a>
		encoderCount++;
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0x28>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0x28>)
 80011e0:	6013      	str	r3, [r2, #0]
	}
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000268 	.word	0x20000268

080011f4 <LIS302DL_Read>:

//void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
//
//}

void LIS302DL_Read(uint8_t *rx_buffer, uint8_t addr) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); //reset CS...
 8001200:	2200      	movs	r2, #0
 8001202:	2108      	movs	r1, #8
 8001204:	480e      	ldr	r0, [pc, #56]	@ (8001240 <LIS302DL_Read+0x4c>)
 8001206:	f001 fd4b 	bl	8002ca0 <HAL_GPIO_WritePin>

	addr |= 0x80;
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001210:	b2db      	uxtb	r3, r3
 8001212:	70fb      	strb	r3, [r7, #3]

	HAL_SPI_Transmit(&hspi1, &addr, 1, 50);
 8001214:	1cf9      	adds	r1, r7, #3
 8001216:	2332      	movs	r3, #50	@ 0x32
 8001218:	2201      	movs	r2, #1
 800121a:	480a      	ldr	r0, [pc, #40]	@ (8001244 <LIS302DL_Read+0x50>)
 800121c:	f005 fabf 	bl	800679e <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, rx_buffer, 1, 50);
 8001220:	2332      	movs	r3, #50	@ 0x32
 8001222:	2201      	movs	r2, #1
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4807      	ldr	r0, [pc, #28]	@ (8001244 <LIS302DL_Read+0x50>)
 8001228:	f005 fbfc 	bl	8006a24 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); //reset CS...
 800122c:	2201      	movs	r2, #1
 800122e:	2108      	movs	r1, #8
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <LIS302DL_Read+0x4c>)
 8001232:	f001 fd35 	bl	8002ca0 <HAL_GPIO_WritePin>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	2000016c 	.word	0x2000016c

08001248 <LIS302DL_Write>:

void LIS302DL_Write(uint8_t tx_buffer, uint8_t addr) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	460a      	mov	r2, r1
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	4613      	mov	r3, r2
 8001256:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); //reset CS...
 8001258:	2200      	movs	r2, #0
 800125a:	2108      	movs	r1, #8
 800125c:	480b      	ldr	r0, [pc, #44]	@ (800128c <LIS302DL_Write+0x44>)
 800125e:	f001 fd1f 	bl	8002ca0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &addr, 1, 50);
 8001262:	1db9      	adds	r1, r7, #6
 8001264:	2332      	movs	r3, #50	@ 0x32
 8001266:	2201      	movs	r2, #1
 8001268:	4809      	ldr	r0, [pc, #36]	@ (8001290 <LIS302DL_Write+0x48>)
 800126a:	f005 fa98 	bl	800679e <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &tx_buffer, 1, 50);
 800126e:	1df9      	adds	r1, r7, #7
 8001270:	2332      	movs	r3, #50	@ 0x32
 8001272:	2201      	movs	r2, #1
 8001274:	4806      	ldr	r0, [pc, #24]	@ (8001290 <LIS302DL_Write+0x48>)
 8001276:	f005 fa92 	bl	800679e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); //reset CS...
 800127a:	2201      	movs	r2, #1
 800127c:	2108      	movs	r1, #8
 800127e:	4803      	ldr	r0, [pc, #12]	@ (800128c <LIS302DL_Write+0x44>)
 8001280:	f001 fd0e 	bl	8002ca0 <HAL_GPIO_WritePin>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	2000016c 	.word	0x2000016c

08001294 <getAccData>:

void getAccData() {
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	LIS302DL_Read(&x, LIS302DL_OUT_X_ADDR);
 8001298:	2129      	movs	r1, #41	@ 0x29
 800129a:	480c      	ldr	r0, [pc, #48]	@ (80012cc <getAccData+0x38>)
 800129c:	f7ff ffaa 	bl	80011f4 <LIS302DL_Read>

	LIS302DL_Read(&y, LIS302DL_OUT_Y_ADDR);
 80012a0:	212b      	movs	r1, #43	@ 0x2b
 80012a2:	480b      	ldr	r0, [pc, #44]	@ (80012d0 <getAccData+0x3c>)
 80012a4:	f7ff ffa6 	bl	80011f4 <LIS302DL_Read>

	LIS302DL_Read(&z, LIS302DL_OUT_Z_ADDR);
 80012a8:	212d      	movs	r1, #45	@ 0x2d
 80012aa:	480a      	ldr	r0, [pc, #40]	@ (80012d4 <getAccData+0x40>)
 80012ac:	f7ff ffa2 	bl	80011f4 <LIS302DL_Read>

	if (y >= threshold) {
 80012b0:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <getAccData+0x3c>)
 80012b2:	f993 2000 	ldrsb.w	r2, [r3]
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <getAccData+0x44>)
 80012b8:	f993 3000 	ldrsb.w	r3, [r3]
 80012bc:	429a      	cmp	r2, r3
 80012be:	db02      	blt.n	80012c6 <getAccData+0x32>
		crash = 1;
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <getAccData+0x48>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
	}
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000235 	.word	0x20000235
 80012d0:	20000236 	.word	0x20000236
 80012d4:	20000237 	.word	0x20000237
 80012d8:	20000004 	.word	0x20000004
 80012dc:	20000234 	.word	0x20000234

080012e0 <getVelocity>:

void getVelocity() {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	rpm = (encoderCount / 20) * 120;
 80012e4:	4b30      	ldr	r3, [pc, #192]	@ (80013a8 <getVelocity+0xc8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a30      	ldr	r2, [pc, #192]	@ (80013ac <getVelocity+0xcc>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	4b2c      	ldr	r3, [pc, #176]	@ (80013b0 <getVelocity+0xd0>)
 80012fe:	801a      	strh	r2, [r3, #0]
	weightA = get_weight(&mass, 1, CHANNEL_A);
 8001300:	2200      	movs	r2, #0
 8001302:	2101      	movs	r1, #1
 8001304:	482b      	ldr	r0, [pc, #172]	@ (80013b4 <getVelocity+0xd4>)
 8001306:	f7ff ff25 	bl	8001154 <get_weight>
 800130a:	eef0 7a40 	vmov.f32	s15, s0
 800130e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001312:	ee17 2a90 	vmov	r2, s15
 8001316:	4b28      	ldr	r3, [pc, #160]	@ (80013b8 <getVelocity+0xd8>)
 8001318:	601a      	str	r2, [r3, #0]
	if(weightA > 1000){
 800131a:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <getVelocity+0xd8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001322:	dd03      	ble.n	800132c <getVelocity+0x4c>
		seatOccupancy = 1;
 8001324:	4b25      	ldr	r3, [pc, #148]	@ (80013bc <getVelocity+0xdc>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	e002      	b.n	8001332 <getVelocity+0x52>
	}
	else {
		seatOccupancy = 0;
 800132c:	4b23      	ldr	r3, [pc, #140]	@ (80013bc <getVelocity+0xdc>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
	}
	vel = rpm / 60 * diameter * 2 * 3.1416 / 1000; //m/s
 8001332:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <getVelocity+0xd0>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	4a22      	ldr	r2, [pc, #136]	@ (80013c0 <getVelocity+0xe0>)
 8001338:	fba2 2303 	umull	r2, r3, r2, r3
 800133c:	095b      	lsrs	r3, r3, #5
 800133e:	b29b      	uxth	r3, r3
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001348:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <getVelocity+0xe4>)
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001352:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001356:	ee17 0a90 	vmov	r0, s15
 800135a:	f7ff f899 	bl	8000490 <__aeabi_f2d>
 800135e:	a310      	add	r3, pc, #64	@ (adr r3, 80013a0 <getVelocity+0xc0>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff f8ec 	bl	8000540 <__aeabi_dmul>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <getVelocity+0xe8>)
 8001376:	f7ff fa0d 	bl	8000794 <__aeabi_ddiv>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fb17 	bl	80009b4 <__aeabi_d2f>
 8001386:	4603      	mov	r3, r0
 8001388:	4a10      	ldr	r2, [pc, #64]	@ (80013cc <getVelocity+0xec>)
 800138a:	6013      	str	r3, [r2, #0]
	encoderCount = 0;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <getVelocity+0xc8>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
	lastRpm = rpm;
 8001392:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <getVelocity+0xd0>)
 8001394:	881a      	ldrh	r2, [r3, #0]
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <getVelocity+0xf0>)
 8001398:	801a      	strh	r2, [r3, #0]
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2e48e8a7 	.word	0x2e48e8a7
 80013a4:	400921ff 	.word	0x400921ff
 80013a8:	20000268 	.word	0x20000268
 80013ac:	cccccccd 	.word	0xcccccccd
 80013b0:	2000026c 	.word	0x2000026c
 80013b4:	20000238 	.word	0x20000238
 80013b8:	2000025c 	.word	0x2000025c
 80013bc:	20000260 	.word	0x20000260
 80013c0:	88888889 	.word	0x88888889
 80013c4:	2000000c 	.word	0x2000000c
 80013c8:	408f4000 	.word	0x408f4000
 80013cc:	20000270 	.word	0x20000270
 80013d0:	2000026e 	.word	0x2000026e

080013d4 <sendData>:

void sendData() {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	txData[0] = crash;
 80013d8:	4b18      	ldr	r3, [pc, #96]	@ (800143c <sendData+0x68>)
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <sendData+0x6c>)
 80013de:	701a      	strb	r2, [r3, #0]
	txData[1] = seatOccupancy;
 80013e0:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <sendData+0x70>)
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <sendData+0x6c>)
 80013e6:	705a      	strb	r2, [r3, #1]
	txData[2] = x;
 80013e8:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <sendData+0x74>)
 80013ea:	f993 3000 	ldrsb.w	r3, [r3]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <sendData+0x6c>)
 80013f2:	709a      	strb	r2, [r3, #2]
	txData[3] = y;
 80013f4:	4b15      	ldr	r3, [pc, #84]	@ (800144c <sendData+0x78>)
 80013f6:	f993 3000 	ldrsb.w	r3, [r3]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <sendData+0x6c>)
 80013fe:	70da      	strb	r2, [r3, #3]
	txData[4] = z;
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <sendData+0x7c>)
 8001402:	f993 3000 	ldrsb.w	r3, [r3]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <sendData+0x6c>)
 800140a:	711a      	strb	r2, [r3, #4]
	txData[5] = rpm >> 8;
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <sendData+0x80>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	b29b      	uxth	r3, r3
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <sendData+0x6c>)
 8001418:	715a      	strb	r2, [r3, #5]
	txData[6] = rpm;
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <sendData+0x80>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <sendData+0x6c>)
 8001422:	719a      	strb	r2, [r3, #6]
	txData[7] = 0;
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <sendData+0x6c>)
 8001426:	2200      	movs	r2, #0
 8001428:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &txMailBox);
 800142a:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <sendData+0x84>)
 800142c:	4a04      	ldr	r2, [pc, #16]	@ (8001440 <sendData+0x6c>)
 800142e:	490b      	ldr	r1, [pc, #44]	@ (800145c <sendData+0x88>)
 8001430:	480b      	ldr	r0, [pc, #44]	@ (8001460 <sendData+0x8c>)
 8001432:	f001 f879 	bl	8002528 <HAL_CAN_AddTxMessage>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000234 	.word	0x20000234
 8001440:	20000224 	.word	0x20000224
 8001444:	20000260 	.word	0x20000260
 8001448:	20000235 	.word	0x20000235
 800144c:	20000236 	.word	0x20000236
 8001450:	20000237 	.word	0x20000237
 8001454:	2000026c 	.word	0x2000026c
 8001458:	2000022c 	.word	0x2000022c
 800145c:	2000020c 	.word	0x2000020c
 8001460:	200000a8 	.word	0x200000a8

08001464 <init_weight>:

void init_weight(hx711_t *hx711) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af02      	add	r7, sp, #8
 800146a:	6078      	str	r0, [r7, #4]

	/* Initialize the hx711 sensors */
	hx711_init(hx711, GPIOC, GPIO_PIN_9, GPIOC, GPIO_PIN_8);
 800146c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <init_weight+0x44>)
 8001474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001478:	490b      	ldr	r1, [pc, #44]	@ (80014a8 <init_weight+0x44>)
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fc62 	bl	8000d44 <hx711_init>

	/* Configure gain for each channel (see datasheet for details) */
	set_gain(hx711, 128, 32);
 8001480:	2220      	movs	r2, #32
 8001482:	2180      	movs	r1, #128	@ 0x80
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fcad 	bl	8000de4 <set_gain>

	/* Set HX711 scaling factor (see README for procedure) */
	set_scale(hx711, -44.25, -10.98);
 800148a:	eddf 0a08 	vldr	s1, [pc, #32]	@ 80014ac <init_weight+0x48>
 800148e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80014b0 <init_weight+0x4c>
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fc92 	bl	8000dbc <set_scale>

	/* Tare weight */
	tare_all(hx711, 10);
 8001498:	210a      	movs	r1, #10
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fe44 	bl	8001128 <tare_all>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40020800 	.word	0x40020800
 80014ac:	c12fae14 	.word	0xc12fae14
 80014b0:	c2310000 	.word	0xc2310000

080014b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014b8:	f000 fd80 	bl	8001fbc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014bc:	f000 f862 	bl	8001584 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014c0:	f000 f9fc 	bl	80018bc <MX_GPIO_Init>
	MX_I2C1_Init();
 80014c4:	f000 f91a 	bl	80016fc <MX_I2C1_Init>
	MX_I2S3_Init();
 80014c8:	f000 f946 	bl	8001758 <MX_I2S3_Init>
	MX_SPI1_Init();
 80014cc:	f000 f974 	bl	80017b8 <MX_SPI1_Init>
	MX_USB_HOST_Init();
 80014d0:	f009 fb78 	bl	800abc4 <MX_USB_HOST_Init>
	MX_CAN1_Init();
 80014d4:	f000 f8c0 	bl	8001658 <MX_CAN1_Init>
	MX_TIM2_Init();
 80014d8:	f000 f9a4 	bl	8001824 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan1);
 80014dc:	4822      	ldr	r0, [pc, #136]	@ (8001568 <main+0xb4>)
 80014de:	f000 ffdf 	bl	80024a0 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80014e2:	2102      	movs	r1, #2
 80014e4:	4820      	ldr	r0, [pc, #128]	@ (8001568 <main+0xb4>)
 80014e6:	f001 f8ef 	bl	80026c8 <HAL_CAN_ActivateNotification>

	TxHeader.DLC = 8; //data length
 80014ea:	4b20      	ldr	r3, [pc, #128]	@ (800156c <main+0xb8>)
 80014ec:	2208      	movs	r2, #8
 80014ee:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <main+0xb8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <main+0xb8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x407; // IDl
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <main+0xb8>)
 80014fe:	f240 4207 	movw	r2, #1031	@ 0x407
 8001502:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001504:	4b19      	ldr	r3, [pc, #100]	@ (800156c <main+0xb8>)
 8001506:	2200      	movs	r2, #0
 8001508:	751a      	strb	r2, [r3, #20]

	LIS302DL_Write((uint8_t) 0x67, LIS302DL_CTRL_REG1_ADDR);
 800150a:	2120      	movs	r1, #32
 800150c:	2067      	movs	r0, #103	@ 0x67
 800150e:	f7ff fe9b 	bl	8001248 <LIS302DL_Write>
	init_weight(&mass);
 8001512:	4817      	ldr	r0, [pc, #92]	@ (8001570 <main+0xbc>)
 8001514:	f7ff ffa6 	bl	8001464 <init_weight>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8001518:	f009 fb7a 	bl	800ac10 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		if (HAL_GetTick() - lastAcc >= periodAcc) {
 800151c:	f000 fdb4 	bl	8002088 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <main+0xc0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	1ad2      	subs	r2, r2, r3
 8001528:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <main+0xc4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d308      	bcc.n	8001542 <main+0x8e>
			lastAcc = HAL_GetTick();
 8001530:	f000 fdaa 	bl	8002088 <HAL_GetTick>
 8001534:	4603      	mov	r3, r0
 8001536:	4a0f      	ldr	r2, [pc, #60]	@ (8001574 <main+0xc0>)
 8001538:	6013      	str	r3, [r2, #0]
			getAccData();
 800153a:	f7ff feab 	bl	8001294 <getAccData>
			sendData();
 800153e:	f7ff ff49 	bl	80013d4 <sendData>
		}

		if (HAL_GetTick() - lastVel >= periodVel) {
 8001542:	f000 fda1 	bl	8002088 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <main+0xc8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	1ad2      	subs	r2, r2, r3
 800154e:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <main+0xcc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d3e0      	bcc.n	8001518 <main+0x64>
			lastVel = HAL_GetTick();
 8001556:	f000 fd97 	bl	8002088 <HAL_GetTick>
 800155a:	4603      	mov	r3, r0
 800155c:	4a07      	ldr	r2, [pc, #28]	@ (800157c <main+0xc8>)
 800155e:	6013      	str	r3, [r2, #0]
			getVelocity();
 8001560:	f7ff febe 	bl	80012e0 <getVelocity>
		MX_USB_HOST_Process();
 8001564:	e7d8      	b.n	8001518 <main+0x64>
 8001566:	bf00      	nop
 8001568:	200000a8 	.word	0x200000a8
 800156c:	2000020c 	.word	0x2000020c
 8001570:	20000238 	.word	0x20000238
 8001574:	20000230 	.word	0x20000230
 8001578:	20000000 	.word	0x20000000
 800157c:	20000264 	.word	0x20000264
 8001580:	20000008 	.word	0x20000008

08001584 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b094      	sub	sp, #80	@ 0x50
 8001588:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800158a:	f107 0320 	add.w	r3, r7, #32
 800158e:	2230      	movs	r2, #48	@ 0x30
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f009 fede 	bl	800b354 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <SystemClock_Config+0xcc>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b0:	4a27      	ldr	r2, [pc, #156]	@ (8001650 <SystemClock_Config+0xcc>)
 80015b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b8:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <SystemClock_Config+0xcc>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <SystemClock_Config+0xd0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a21      	ldr	r2, [pc, #132]	@ (8001654 <SystemClock_Config+0xd0>)
 80015ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <SystemClock_Config+0xd0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e0:	2301      	movs	r3, #1
 80015e2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ea:	2302      	movs	r3, #2
 80015ec:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80015f4:	2308      	movs	r3, #8
 80015f6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80015f8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80015fc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015fe:	2302      	movs	r3, #2
 8001600:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001602:	2307      	movs	r3, #7
 8001604:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001606:	f107 0320 	add.w	r3, r7, #32
 800160a:	4618      	mov	r0, r3
 800160c:	f004 fa78 	bl	8005b00 <HAL_RCC_OscConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0x96>
		Error_Handler();
 8001616:	f000 fa69 	bl	8001aec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800161a:	230f      	movs	r3, #15
 800161c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161e:	2302      	movs	r3, #2
 8001620:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001626:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800162a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800162c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001630:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	2105      	movs	r1, #5
 8001638:	4618      	mov	r0, r3
 800163a:	f004 fcd9 	bl	8005ff0 <HAL_RCC_ClockConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0xc4>
		Error_Handler();
 8001644:	f000 fa52 	bl	8001aec <Error_Handler>
	}
}
 8001648:	bf00      	nop
 800164a:	3750      	adds	r7, #80	@ 0x50
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	40007000 	.word	0x40007000

08001658 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	@ 0x28
 800165c:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800165e:	4b25      	ldr	r3, [pc, #148]	@ (80016f4 <MX_CAN1_Init+0x9c>)
 8001660:	4a25      	ldr	r2, [pc, #148]	@ (80016f8 <MX_CAN1_Init+0xa0>)
 8001662:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 8001664:	4b23      	ldr	r3, [pc, #140]	@ (80016f4 <MX_CAN1_Init+0x9c>)
 8001666:	2206      	movs	r2, #6
 8001668:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800166a:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <MX_CAN1_Init+0x9c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001670:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <MX_CAN1_Init+0x9c>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001676:	4b1f      	ldr	r3, [pc, #124]	@ (80016f4 <MX_CAN1_Init+0x9c>)
 8001678:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800167c:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800167e:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <MX_CAN1_Init+0x9c>)
 8001680:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001684:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001686:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <MX_CAN1_Init+0x9c>)
 8001688:	2200      	movs	r2, #0
 800168a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800168c:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <MX_CAN1_Init+0x9c>)
 800168e:	2200      	movs	r2, #0
 8001690:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001692:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <MX_CAN1_Init+0x9c>)
 8001694:	2200      	movs	r2, #0
 8001696:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001698:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <MX_CAN1_Init+0x9c>)
 800169a:	2200      	movs	r2, #0
 800169c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <MX_CAN1_Init+0x9c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80016a4:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <MX_CAN1_Init+0x9c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80016aa:	4812      	ldr	r0, [pc, #72]	@ (80016f4 <MX_CAN1_Init+0x9c>)
 80016ac:	f000 fd1c 	bl	80020e8 <HAL_CAN_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_CAN1_Init+0x62>
		Error_Handler();
 80016b6:	f000 fa19 	bl	8001aec <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef filterConfig;

	filterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80016ba:	2301      	movs	r3, #1
 80016bc:	623b      	str	r3, [r7, #32]
	filterConfig.FilterBank = 10;
 80016be:	230a      	movs	r3, #10
 80016c0:	617b      	str	r3, [r7, #20]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = 0x0000;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80016da:	2301      	movs	r3, #1
 80016dc:	61fb      	str	r3, [r7, #28]
	filterConfig.SlaveStartFilterBank = 0; // how many filter to assign to the CAN master
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 80016e2:	463b      	mov	r3, r7
 80016e4:	4619      	mov	r1, r3
 80016e6:	4803      	ldr	r0, [pc, #12]	@ (80016f4 <MX_CAN1_Init+0x9c>)
 80016e8:	f000 fdfa 	bl	80022e0 <HAL_CAN_ConfigFilter>
	/* USER CODE END CAN1_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	@ 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200000a8 	.word	0x200000a8
 80016f8:	40006400 	.word	0x40006400

080016fc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <MX_I2C1_Init+0x50>)
 8001702:	4a13      	ldr	r2, [pc, #76]	@ (8001750 <MX_I2C1_Init+0x54>)
 8001704:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <MX_I2C1_Init+0x50>)
 8001708:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <MX_I2C1_Init+0x58>)
 800170a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <MX_I2C1_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <MX_I2C1_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <MX_I2C1_Init+0x50>)
 800171a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800171e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <MX_I2C1_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <MX_I2C1_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	@ (800174c <MX_I2C1_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_I2C1_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001738:	4804      	ldr	r0, [pc, #16]	@ (800174c <MX_I2C1_Init+0x50>)
 800173a:	f003 fbfd 	bl	8004f38 <HAL_I2C_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001744:	f000 f9d2 	bl	8001aec <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200000d0 	.word	0x200000d0
 8001750:	40005400 	.word	0x40005400
 8001754:	000186a0 	.word	0x000186a0

08001758 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <MX_I2S3_Init+0x54>)
 800175e:	4a14      	ldr	r2, [pc, #80]	@ (80017b0 <MX_I2S3_Init+0x58>)
 8001760:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <MX_I2S3_Init+0x54>)
 8001764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001768:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <MX_I2S3_Init+0x54>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001770:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <MX_I2S3_Init+0x54>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <MX_I2S3_Init+0x54>)
 8001778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800177c:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800177e:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <MX_I2S3_Init+0x54>)
 8001780:	4a0c      	ldr	r2, [pc, #48]	@ (80017b4 <MX_I2S3_Init+0x5c>)
 8001782:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001784:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <MX_I2S3_Init+0x54>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <MX_I2S3_Init+0x54>)
 800178c:	2200      	movs	r2, #0
 800178e:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <MX_I2S3_Init+0x54>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8001796:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_I2S3_Init+0x54>)
 8001798:	f003 fd12 	bl	80051c0 <HAL_I2S_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_I2S3_Init+0x4e>
		Error_Handler();
 80017a2:	f000 f9a3 	bl	8001aec <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000124 	.word	0x20000124
 80017b0:	40003c00 	.word	0x40003c00
 80017b4:	00017700 	.word	0x00017700

080017b8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80017bc:	4b17      	ldr	r3, [pc, #92]	@ (800181c <MX_SPI1_Init+0x64>)
 80017be:	4a18      	ldr	r2, [pc, #96]	@ (8001820 <MX_SPI1_Init+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80017c2:	4b16      	ldr	r3, [pc, #88]	@ (800181c <MX_SPI1_Init+0x64>)
 80017c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017c8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ca:	4b14      	ldr	r3, [pc, #80]	@ (800181c <MX_SPI1_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <MX_SPI1_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d6:	4b11      	ldr	r3, [pc, #68]	@ (800181c <MX_SPI1_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <MX_SPI1_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <MX_SPI1_Init+0x64>)
 80017e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <MX_SPI1_Init+0x64>)
 80017ec:	2230      	movs	r2, #48	@ 0x30
 80017ee:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <MX_SPI1_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <MX_SPI1_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017fc:	4b07      	ldr	r3, [pc, #28]	@ (800181c <MX_SPI1_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <MX_SPI1_Init+0x64>)
 8001804:	220a      	movs	r2, #10
 8001806:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001808:	4804      	ldr	r0, [pc, #16]	@ (800181c <MX_SPI1_Init+0x64>)
 800180a:	f004 ff3f 	bl	800668c <HAL_SPI_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001814:	f000 f96a 	bl	8001aec <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	2000016c 	.word	0x2000016c
 8001820:	40013000 	.word	0x40013000

08001824 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001838:	463b      	mov	r3, r7
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001840:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <MX_TIM2_Init+0x94>)
 8001842:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001846:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 83;
 8001848:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <MX_TIM2_Init+0x94>)
 800184a:	2253      	movs	r2, #83	@ 0x53
 800184c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b1a      	ldr	r3, [pc, #104]	@ (80018b8 <MX_TIM2_Init+0x94>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001854:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <MX_TIM2_Init+0x94>)
 8001856:	f04f 32ff 	mov.w	r2, #4294967295
 800185a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <MX_TIM2_Init+0x94>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <MX_TIM2_Init+0x94>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001868:	4813      	ldr	r0, [pc, #76]	@ (80018b8 <MX_TIM2_Init+0x94>)
 800186a:	f005 fce5 	bl	8007238 <HAL_TIM_Base_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001874:	f000 f93a 	bl	8001aec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800187c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	4619      	mov	r1, r3
 8001884:	480c      	ldr	r0, [pc, #48]	@ (80018b8 <MX_TIM2_Init+0x94>)
 8001886:	f005 fd26 	bl	80072d6 <HAL_TIM_ConfigClockSource>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM2_Init+0x70>
		Error_Handler();
 8001890:	f000 f92c 	bl	8001aec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800189c:	463b      	mov	r3, r7
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_TIM2_Init+0x94>)
 80018a2:	f005 ff25 	bl	80076f0 <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80018ac:	f000 f91e 	bl	8001aec <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200001c4 	.word	0x200001c4

080018bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	@ 0x30
 80018c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a7e      	ldr	r2, [pc, #504]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 80018dc:	f043 0310 	orr.w	r3, r3, #16
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	4b78      	ldr	r3, [pc, #480]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a77      	ldr	r2, [pc, #476]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b75      	ldr	r3, [pc, #468]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b71      	ldr	r3, [pc, #452]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	4a70      	ldr	r2, [pc, #448]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 8001914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001918:	6313      	str	r3, [r2, #48]	@ 0x30
 800191a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a69      	ldr	r2, [pc, #420]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b67      	ldr	r3, [pc, #412]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	4b63      	ldr	r3, [pc, #396]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	4a62      	ldr	r2, [pc, #392]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6313      	str	r3, [r2, #48]	@ 0x30
 8001952:	4b60      	ldr	r3, [pc, #384]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a5b      	ldr	r2, [pc, #364]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b59      	ldr	r3, [pc, #356]	@ (8001ad4 <MX_GPIO_Init+0x218>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	2108      	movs	r1, #8
 800197e:	4856      	ldr	r0, [pc, #344]	@ (8001ad8 <MX_GPIO_Init+0x21c>)
 8001980:	f001 f98e 	bl	8002ca0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8001984:	2201      	movs	r2, #1
 8001986:	2101      	movs	r1, #1
 8001988:	4854      	ldr	r0, [pc, #336]	@ (8001adc <MX_GPIO_Init+0x220>)
 800198a:	f001 f989 	bl	8002ca0 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 800198e:	2200      	movs	r2, #0
 8001990:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001994:	4852      	ldr	r0, [pc, #328]	@ (8001ae0 <MX_GPIO_Init+0x224>)
 8001996:	f001 f983 	bl	8002ca0 <HAL_GPIO_WritePin>
			LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LC_CLK_GPIO_Port, LC_CLK_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019a0:	484e      	ldr	r0, [pc, #312]	@ (8001adc <MX_GPIO_Init+0x220>)
 80019a2:	f001 f97d 	bl	8002ca0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80019a6:	2308      	movs	r3, #8
 80019a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	4846      	ldr	r0, [pc, #280]	@ (8001ad8 <MX_GPIO_Init+0x21c>)
 80019be:	f000 ffbb 	bl	8002938 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LC_CLK_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin | LC_CLK_Pin;
 80019c2:	f240 2301 	movw	r3, #513	@ 0x201
 80019c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	4840      	ldr	r0, [pc, #256]	@ (8001adc <MX_GPIO_Init+0x220>)
 80019dc:	f000 ffac 	bl	8002938 <HAL_GPIO_Init>

	/*Configure GPIO pin : Encoder_Pin */
	GPIO_InitStruct.Pin = Encoder_Pin;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019e8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019ea:	2302      	movs	r3, #2
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(Encoder_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4839      	ldr	r0, [pc, #228]	@ (8001adc <MX_GPIO_Init+0x220>)
 80019f6:	f000 ff9f 	bl	8002938 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80019fa:	2308      	movs	r3, #8
 80019fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4831      	ldr	r0, [pc, #196]	@ (8001adc <MX_GPIO_Init+0x220>)
 8001a16:	f000 ff8f 	bl	8002938 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	482d      	ldr	r0, [pc, #180]	@ (8001ae4 <MX_GPIO_Init+0x228>)
 8001a2e:	f000 ff83 	bl	8002938 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a32:	2304      	movs	r3, #4
 8001a34:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	4828      	ldr	r0, [pc, #160]	@ (8001ae8 <MX_GPIO_Init+0x22c>)
 8001a46:	f000 ff77 	bl	8002938 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a4e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a5c:	2305      	movs	r3, #5
 8001a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4619      	mov	r1, r3
 8001a66:	4820      	ldr	r0, [pc, #128]	@ (8001ae8 <MX_GPIO_Init+0x22c>)
 8001a68:	f000 ff66 	bl	8002938 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8001a6c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001a70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	4816      	ldr	r0, [pc, #88]	@ (8001ae0 <MX_GPIO_Init+0x224>)
 8001a86:	f000 ff57 	bl	8002938 <HAL_GPIO_Init>

	/*Configure GPIO pin : LC_Data_Pin */
	GPIO_InitStruct.Pin = LC_Data_Pin;
 8001a8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a8e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(LC_Data_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480f      	ldr	r0, [pc, #60]	@ (8001adc <MX_GPIO_Init+0x220>)
 8001aa0:	f000 ff4a 	bl	8002938 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480a      	ldr	r0, [pc, #40]	@ (8001ae0 <MX_GPIO_Init+0x224>)
 8001ab8:	f000 ff3e 	bl	8002938 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2007      	movs	r0, #7
 8001ac2:	f000 ff02 	bl	80028ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ac6:	2007      	movs	r0, #7
 8001ac8:	f000 ff1b 	bl	8002902 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001acc:	bf00      	nop
 8001ace:	3730      	adds	r7, #48	@ 0x30
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020c00 	.word	0x40020c00
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020400 	.word	0x40020400

08001aec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <Error_Handler+0x8>

08001af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	4a0f      	ldr	r2, [pc, #60]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	4a08      	ldr	r2, [pc, #32]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_MspInit+0x4c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b36:	2007      	movs	r0, #7
 8001b38:	f000 febc 	bl	80028b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800

08001b48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	@ 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a21      	ldr	r2, [pc, #132]	@ (8001bec <HAL_CAN_MspInit+0xa4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d13b      	bne.n	8001be2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <HAL_CAN_MspInit+0xa8>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf0 <HAL_CAN_MspInit+0xa8>)
 8001b74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf0 <HAL_CAN_MspInit+0xa8>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_CAN_MspInit+0xa8>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a18      	ldr	r2, [pc, #96]	@ (8001bf0 <HAL_CAN_MspInit+0xa8>)
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <HAL_CAN_MspInit+0xa8>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bb2:	2309      	movs	r3, #9
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480d      	ldr	r0, [pc, #52]	@ (8001bf4 <HAL_CAN_MspInit+0xac>)
 8001bbe:	f000 febb 	bl	8002938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bd2:	2309      	movs	r3, #9
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <HAL_CAN_MspInit+0xac>)
 8001bde:	f000 feab 	bl	8002938 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001be2:	bf00      	nop
 8001be4:	3728      	adds	r7, #40	@ 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40006400 	.word	0x40006400
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020c00 	.word	0x40020c00

08001bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	@ 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a19      	ldr	r2, [pc, #100]	@ (8001c7c <HAL_I2C_MspInit+0x84>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d12c      	bne.n	8001c74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a17      	ldr	r2, [pc, #92]	@ (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c36:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3c:	2312      	movs	r3, #18
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	480c      	ldr	r0, [pc, #48]	@ (8001c84 <HAL_I2C_MspInit+0x8c>)
 8001c54:	f000 fe70 	bl	8002938 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	4a07      	ldr	r2, [pc, #28]	@ (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <HAL_I2C_MspInit+0x88>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c74:	bf00      	nop
 8001c76:	3728      	adds	r7, #40	@ 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40005400 	.word	0x40005400
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020400 	.word	0x40020400

08001c88 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08e      	sub	sp, #56	@ 0x38
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a31      	ldr	r2, [pc, #196]	@ (8001d78 <HAL_I2S_MspInit+0xf0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d15a      	bne.n	8001d6e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001cbc:	23c0      	movs	r3, #192	@ 0xc0
 8001cbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 fb9d 	bl	8006408 <HAL_RCCEx_PeriphCLKConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001cd4:	f7ff ff0a 	bl	8001aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cd8:	2300      	movs	r3, #0
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	4b27      	ldr	r3, [pc, #156]	@ (8001d7c <HAL_I2S_MspInit+0xf4>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce0:	4a26      	ldr	r2, [pc, #152]	@ (8001d7c <HAL_I2S_MspInit+0xf4>)
 8001ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce8:	4b24      	ldr	r3, [pc, #144]	@ (8001d7c <HAL_I2S_MspInit+0xf4>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <HAL_I2S_MspInit+0xf4>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8001d7c <HAL_I2S_MspInit+0xf4>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d04:	4b1d      	ldr	r3, [pc, #116]	@ (8001d7c <HAL_I2S_MspInit+0xf4>)
 8001d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <HAL_I2S_MspInit+0xf4>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d18:	4a18      	ldr	r2, [pc, #96]	@ (8001d7c <HAL_I2S_MspInit+0xf4>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d20:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <HAL_I2S_MspInit+0xf4>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d44:	4619      	mov	r1, r3
 8001d46:	480e      	ldr	r0, [pc, #56]	@ (8001d80 <HAL_I2S_MspInit+0xf8>)
 8001d48:	f000 fdf6 	bl	8002938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d4c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d5e:	2306      	movs	r3, #6
 8001d60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d66:	4619      	mov	r1, r3
 8001d68:	4806      	ldr	r0, [pc, #24]	@ (8001d84 <HAL_I2S_MspInit+0xfc>)
 8001d6a:	f000 fde5 	bl	8002938 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001d6e:	bf00      	nop
 8001d70:	3738      	adds	r7, #56	@ 0x38
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40003c00 	.word	0x40003c00
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40020800 	.word	0x40020800

08001d88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	@ 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a19      	ldr	r2, [pc, #100]	@ (8001e0c <HAL_SPI_MspInit+0x84>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d12b      	bne.n	8001e02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <HAL_SPI_MspInit+0x88>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	4a17      	ldr	r2, [pc, #92]	@ (8001e10 <HAL_SPI_MspInit+0x88>)
 8001db4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <HAL_SPI_MspInit+0x88>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <HAL_SPI_MspInit+0x88>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <HAL_SPI_MspInit+0x88>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_SPI_MspInit+0x88>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001de2:	23e0      	movs	r3, #224	@ 0xe0
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df2:	2305      	movs	r3, #5
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <HAL_SPI_MspInit+0x8c>)
 8001dfe:	f000 fd9b 	bl	8002938 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e02:	bf00      	nop
 8001e04:	3728      	adds	r7, #40	@ 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40013000 	.word	0x40013000
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000

08001e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e28:	d10d      	bne.n	8001e46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <HAL_TIM_Base_MspInit+0x3c>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	4a08      	ldr	r2, [pc, #32]	@ (8001e54 <HAL_TIM_Base_MspInit+0x3c>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3a:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_TIM_Base_MspInit+0x3c>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800

08001e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <NMI_Handler+0x4>

08001e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <HardFault_Handler+0x4>

08001e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <MemManage_Handler+0x4>

08001e70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eae:	f000 f8d7 	bl	8002060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Pin);
 8001eba:	2002      	movs	r0, #2
 8001ebc:	f000 ff0a 	bl	8002cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <OTG_FS_IRQHandler+0x10>)
 8001eca:	f001 f9fb 	bl	80032c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000658 	.word	0x20000658

08001ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee0:	4a14      	ldr	r2, [pc, #80]	@ (8001f34 <_sbrk+0x5c>)
 8001ee2:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <_sbrk+0x60>)
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eec:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <_sbrk+0x64>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	@ (8001f40 <_sbrk+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d207      	bcs.n	8001f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f08:	f009 fa3c 	bl	800b384 <__errno>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	220c      	movs	r2, #12
 8001f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	e009      	b.n	8001f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f18:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a05      	ldr	r2, [pc, #20]	@ (8001f3c <_sbrk+0x64>)
 8001f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20020000 	.word	0x20020000
 8001f38:	00000400 	.word	0x00000400
 8001f3c:	20000274 	.word	0x20000274
 8001f40:	20000b80 	.word	0x20000b80

08001f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <SystemInit+0x20>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f4e:	4a05      	ldr	r2, [pc, #20]	@ (8001f64 <SystemInit+0x20>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fa0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f6c:	f7ff ffea 	bl	8001f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f70:	480c      	ldr	r0, [pc, #48]	@ (8001fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f72:	490d      	ldr	r1, [pc, #52]	@ (8001fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f74:	4a0d      	ldr	r2, [pc, #52]	@ (8001fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f78:	e002      	b.n	8001f80 <LoopCopyDataInit>

08001f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7e:	3304      	adds	r3, #4

08001f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f84:	d3f9      	bcc.n	8001f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f88:	4c0a      	ldr	r4, [pc, #40]	@ (8001fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f8c:	e001      	b.n	8001f92 <LoopFillZerobss>

08001f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f90:	3204      	adds	r2, #4

08001f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f94:	d3fb      	bcc.n	8001f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f96:	f009 f9fb 	bl	800b390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9a:	f7ff fa8b 	bl	80014b4 <main>
  bx  lr    
 8001f9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001fac:	0800b4b8 	.word	0x0800b4b8
  ldr r2, =_sbss
 8001fb0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001fb4:	20000b80 	.word	0x20000b80

08001fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC_IRQHandler>
	...

08001fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ffc <HAL_Init+0x40>)
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <HAL_Init+0x40>)
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	@ (8001ffc <HAL_Init+0x40>)
 8001fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f000 fc65 	bl	80028b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fea:	2000      	movs	r0, #0
 8001fec:	f000 f808 	bl	8002000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff0:	f7ff fd82 	bl	8001af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002008:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <HAL_InitTick+0x54>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <HAL_InitTick+0x58>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002016:	fbb3 f3f1 	udiv	r3, r3, r1
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fc7d 	bl	800291e <HAL_SYSTICK_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e00e      	b.n	800204c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b0f      	cmp	r3, #15
 8002032:	d80a      	bhi.n	800204a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002034:	2200      	movs	r2, #0
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f000 fc45 	bl	80028ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002040:	4a06      	ldr	r2, [pc, #24]	@ (800205c <HAL_InitTick+0x5c>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000010 	.word	0x20000010
 8002058:	20000018 	.word	0x20000018
 800205c:	20000014 	.word	0x20000014

08002060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_IncTick+0x20>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <HAL_IncTick+0x24>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4413      	add	r3, r2
 8002070:	4a04      	ldr	r2, [pc, #16]	@ (8002084 <HAL_IncTick+0x24>)
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000018 	.word	0x20000018
 8002084:	20000278 	.word	0x20000278

08002088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return uwTick;
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <HAL_GetTick+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000278 	.word	0x20000278

080020a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff ffee 	bl	8002088 <HAL_GetTick>
 80020ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d005      	beq.n	80020c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <HAL_Delay+0x44>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020c6:	bf00      	nop
 80020c8:	f7ff ffde 	bl	8002088 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d8f7      	bhi.n	80020c8 <HAL_Delay+0x28>
  {
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000018 	.word	0x20000018

080020e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0ed      	b.n	80022d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff fd1e 	bl	8001b48 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800211c:	f7ff ffb4 	bl	8002088 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002122:	e012      	b.n	800214a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002124:	f7ff ffb0 	bl	8002088 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b0a      	cmp	r3, #10
 8002130:	d90b      	bls.n	800214a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2205      	movs	r2, #5
 8002142:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e0c5      	b.n	80022d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0e5      	beq.n	8002124 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0202 	bic.w	r2, r2, #2
 8002166:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002168:	f7ff ff8e 	bl	8002088 <HAL_GetTick>
 800216c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800216e:	e012      	b.n	8002196 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002170:	f7ff ff8a 	bl	8002088 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b0a      	cmp	r3, #10
 800217c:	d90b      	bls.n	8002196 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2205      	movs	r2, #5
 800218e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e09f      	b.n	80022d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1e5      	bne.n	8002170 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7e1b      	ldrb	r3, [r3, #24]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d108      	bne.n	80021be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e007      	b.n	80021ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7e5b      	ldrb	r3, [r3, #25]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d108      	bne.n	80021e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e007      	b.n	80021f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7e9b      	ldrb	r3, [r3, #26]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d108      	bne.n	8002212 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0220 	orr.w	r2, r2, #32
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e007      	b.n	8002222 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0220 	bic.w	r2, r2, #32
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7edb      	ldrb	r3, [r3, #27]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d108      	bne.n	800223c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0210 	bic.w	r2, r2, #16
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e007      	b.n	800224c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0210 	orr.w	r2, r2, #16
 800224a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7f1b      	ldrb	r3, [r3, #28]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d108      	bne.n	8002266 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0208 	orr.w	r2, r2, #8
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e007      	b.n	8002276 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0208 	bic.w	r2, r2, #8
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7f5b      	ldrb	r3, [r3, #29]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0204 	orr.w	r2, r2, #4
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e007      	b.n	80022a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0204 	bic.w	r2, r2, #4
 800229e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	ea42 0103 	orr.w	r1, r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	1e5a      	subs	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d003      	beq.n	8002306 <HAL_CAN_ConfigFilter+0x26>
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	2b02      	cmp	r3, #2
 8002302:	f040 80be 	bne.w	8002482 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002306:	4b65      	ldr	r3, [pc, #404]	@ (800249c <HAL_CAN_ConfigFilter+0x1bc>)
 8002308:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002320:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	021b      	lsls	r3, r3, #8
 8002336:	431a      	orrs	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	2201      	movs	r2, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43db      	mvns	r3, r3
 8002358:	401a      	ands	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d123      	bne.n	80023b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43db      	mvns	r3, r3
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800238a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3248      	adds	r2, #72	@ 0x48
 8002390:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023a6:	6979      	ldr	r1, [r7, #20]
 80023a8:	3348      	adds	r3, #72	@ 0x48
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d122      	bne.n	80023fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3248      	adds	r2, #72	@ 0x48
 80023de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023f4:	6979      	ldr	r1, [r7, #20]
 80023f6:	3348      	adds	r3, #72	@ 0x48
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	440b      	add	r3, r1
 80023fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43db      	mvns	r3, r3
 8002410:	401a      	ands	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002418:	e007      	b.n	800242a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	431a      	orrs	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43db      	mvns	r3, r3
 800243c:	401a      	ands	r2, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002444:	e007      	b.n	8002456 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	431a      	orrs	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	431a      	orrs	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002474:	f023 0201 	bic.w	r2, r3, #1
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e006      	b.n	8002490 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
  }
}
 8002490:	4618      	mov	r0, r3
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40006400 	.word	0x40006400

080024a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d12e      	bne.n	8002512 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024cc:	f7ff fddc 	bl	8002088 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024d2:	e012      	b.n	80024fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024d4:	f7ff fdd8 	bl	8002088 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b0a      	cmp	r3, #10
 80024e0:	d90b      	bls.n	80024fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2205      	movs	r2, #5
 80024f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e012      	b.n	8002520 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e5      	bne.n	80024d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e006      	b.n	8002520 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
  }
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	@ 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002546:	7ffb      	ldrb	r3, [r7, #31]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d003      	beq.n	8002554 <HAL_CAN_AddTxMessage+0x2c>
 800254c:	7ffb      	ldrb	r3, [r7, #31]
 800254e:	2b02      	cmp	r3, #2
 8002550:	f040 80ad 	bne.w	80026ae <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8095 	beq.w	800269e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	0e1b      	lsrs	r3, r3, #24
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800257e:	2201      	movs	r2, #1
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	409a      	lsls	r2, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10d      	bne.n	80025ac <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800259a:	68f9      	ldr	r1, [r7, #12]
 800259c:	6809      	ldr	r1, [r1, #0]
 800259e:	431a      	orrs	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3318      	adds	r3, #24
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	440b      	add	r3, r1
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e00f      	b.n	80025cc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025b6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025bc:	68f9      	ldr	r1, [r7, #12]
 80025be:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025c0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3318      	adds	r3, #24
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	440b      	add	r3, r1
 80025ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6819      	ldr	r1, [r3, #0]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3318      	adds	r3, #24
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	440b      	add	r3, r1
 80025dc:	3304      	adds	r3, #4
 80025de:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	7d1b      	ldrb	r3, [r3, #20]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d111      	bne.n	800260c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3318      	adds	r3, #24
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	4413      	add	r3, r2
 80025f4:	3304      	adds	r3, #4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	6811      	ldr	r1, [r2, #0]
 80025fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3318      	adds	r3, #24
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	440b      	add	r3, r1
 8002608:	3304      	adds	r3, #4
 800260a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3307      	adds	r3, #7
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	061a      	lsls	r2, r3, #24
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3306      	adds	r3, #6
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	041b      	lsls	r3, r3, #16
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3305      	adds	r3, #5
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	4313      	orrs	r3, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	3204      	adds	r2, #4
 800262c:	7812      	ldrb	r2, [r2, #0]
 800262e:	4610      	mov	r0, r2
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	6811      	ldr	r1, [r2, #0]
 8002634:	ea43 0200 	orr.w	r2, r3, r0
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	440b      	add	r3, r1
 800263e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002642:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3303      	adds	r3, #3
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	061a      	lsls	r2, r3, #24
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3302      	adds	r3, #2
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3301      	adds	r3, #1
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	4313      	orrs	r3, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	4610      	mov	r0, r2
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	6811      	ldr	r1, [r2, #0]
 800266a:	ea43 0200 	orr.w	r2, r3, r0
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	440b      	add	r3, r1
 8002674:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002678:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	3318      	adds	r3, #24
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	4413      	add	r3, r2
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	6811      	ldr	r1, [r2, #0]
 800268c:	f043 0201 	orr.w	r2, r3, #1
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	3318      	adds	r3, #24
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	440b      	add	r3, r1
 8002698:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e00e      	b.n	80026bc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e006      	b.n	80026bc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
  }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3724      	adds	r7, #36	@ 0x24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d002      	beq.n	80026e6 <HAL_CAN_ActivateNotification+0x1e>
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d109      	bne.n	80026fa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6959      	ldr	r1, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e006      	b.n	8002708 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002730:	4013      	ands	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800273c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002746:	4a04      	ldr	r2, [pc, #16]	@ (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60d3      	str	r3, [r2, #12]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002760:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <__NVIC_GetPriorityGrouping+0x18>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	f003 0307 	and.w	r3, r3, #7
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	2b00      	cmp	r3, #0
 8002788:	db0b      	blt.n	80027a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	4907      	ldr	r1, [pc, #28]	@ (80027b0 <__NVIC_EnableIRQ+0x38>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2001      	movs	r0, #1
 800279a:	fa00 f202 	lsl.w	r2, r0, r2
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000e100 	.word	0xe000e100

080027b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db0a      	blt.n	80027de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	490c      	ldr	r1, [pc, #48]	@ (8002800 <__NVIC_SetPriority+0x4c>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	0112      	lsls	r2, r2, #4
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	440b      	add	r3, r1
 80027d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027dc:	e00a      	b.n	80027f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4908      	ldr	r1, [pc, #32]	@ (8002804 <__NVIC_SetPriority+0x50>)
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	3b04      	subs	r3, #4
 80027ec:	0112      	lsls	r2, r2, #4
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	440b      	add	r3, r1
 80027f2:	761a      	strb	r2, [r3, #24]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000e100 	.word	0xe000e100
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	@ 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f1c3 0307 	rsb	r3, r3, #7
 8002822:	2b04      	cmp	r3, #4
 8002824:	bf28      	it	cs
 8002826:	2304      	movcs	r3, #4
 8002828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3304      	adds	r3, #4
 800282e:	2b06      	cmp	r3, #6
 8002830:	d902      	bls.n	8002838 <NVIC_EncodePriority+0x30>
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3b03      	subs	r3, #3
 8002836:	e000      	b.n	800283a <NVIC_EncodePriority+0x32>
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	401a      	ands	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002850:	f04f 31ff 	mov.w	r1, #4294967295
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43d9      	mvns	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	4313      	orrs	r3, r2
         );
}
 8002862:	4618      	mov	r0, r3
 8002864:	3724      	adds	r7, #36	@ 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002880:	d301      	bcc.n	8002886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002882:	2301      	movs	r3, #1
 8002884:	e00f      	b.n	80028a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002886:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <SysTick_Config+0x40>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288e:	210f      	movs	r1, #15
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	f7ff ff8e 	bl	80027b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002898:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <SysTick_Config+0x40>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289e:	4b04      	ldr	r3, [pc, #16]	@ (80028b0 <SysTick_Config+0x40>)
 80028a0:	2207      	movs	r2, #7
 80028a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	e000e010 	.word	0xe000e010

080028b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ff29 	bl	8002714 <__NVIC_SetPriorityGrouping>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028dc:	f7ff ff3e 	bl	800275c <__NVIC_GetPriorityGrouping>
 80028e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	6978      	ldr	r0, [r7, #20]
 80028e8:	f7ff ff8e 	bl	8002808 <NVIC_EncodePriority>
 80028ec:	4602      	mov	r2, r0
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff5d 	bl	80027b4 <__NVIC_SetPriority>
}
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff31 	bl	8002778 <__NVIC_EnableIRQ>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ffa2 	bl	8002870 <SysTick_Config>
 800292c:	4603      	mov	r3, r0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	@ 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	e16b      	b.n	8002c2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002954:	2201      	movs	r2, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4013      	ands	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	429a      	cmp	r2, r3
 800296e:	f040 815a 	bne.w	8002c26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d005      	beq.n	800298a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002986:	2b02      	cmp	r3, #2
 8002988:	d130      	bne.n	80029ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	2203      	movs	r2, #3
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 0201 	and.w	r2, r3, #1
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d017      	beq.n	8002a28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d123      	bne.n	8002a7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	08da      	lsrs	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3208      	adds	r2, #8
 8002a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	220f      	movs	r2, #15
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	08da      	lsrs	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3208      	adds	r2, #8
 8002a76:	69b9      	ldr	r1, [r7, #24]
 8002a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0203 	and.w	r2, r3, #3
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80b4 	beq.w	8002c26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4b60      	ldr	r3, [pc, #384]	@ (8002c44 <HAL_GPIO_Init+0x30c>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	4a5f      	ldr	r2, [pc, #380]	@ (8002c44 <HAL_GPIO_Init+0x30c>)
 8002ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ace:	4b5d      	ldr	r3, [pc, #372]	@ (8002c44 <HAL_GPIO_Init+0x30c>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ada:	4a5b      	ldr	r2, [pc, #364]	@ (8002c48 <HAL_GPIO_Init+0x310>)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	089b      	lsrs	r3, r3, #2
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	220f      	movs	r2, #15
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a52      	ldr	r2, [pc, #328]	@ (8002c4c <HAL_GPIO_Init+0x314>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d02b      	beq.n	8002b5e <HAL_GPIO_Init+0x226>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a51      	ldr	r2, [pc, #324]	@ (8002c50 <HAL_GPIO_Init+0x318>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d025      	beq.n	8002b5a <HAL_GPIO_Init+0x222>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a50      	ldr	r2, [pc, #320]	@ (8002c54 <HAL_GPIO_Init+0x31c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01f      	beq.n	8002b56 <HAL_GPIO_Init+0x21e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4f      	ldr	r2, [pc, #316]	@ (8002c58 <HAL_GPIO_Init+0x320>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d019      	beq.n	8002b52 <HAL_GPIO_Init+0x21a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4e      	ldr	r2, [pc, #312]	@ (8002c5c <HAL_GPIO_Init+0x324>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_GPIO_Init+0x216>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4d      	ldr	r2, [pc, #308]	@ (8002c60 <HAL_GPIO_Init+0x328>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00d      	beq.n	8002b4a <HAL_GPIO_Init+0x212>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4c      	ldr	r2, [pc, #304]	@ (8002c64 <HAL_GPIO_Init+0x32c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d007      	beq.n	8002b46 <HAL_GPIO_Init+0x20e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4b      	ldr	r2, [pc, #300]	@ (8002c68 <HAL_GPIO_Init+0x330>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <HAL_GPIO_Init+0x20a>
 8002b3e:	2307      	movs	r3, #7
 8002b40:	e00e      	b.n	8002b60 <HAL_GPIO_Init+0x228>
 8002b42:	2308      	movs	r3, #8
 8002b44:	e00c      	b.n	8002b60 <HAL_GPIO_Init+0x228>
 8002b46:	2306      	movs	r3, #6
 8002b48:	e00a      	b.n	8002b60 <HAL_GPIO_Init+0x228>
 8002b4a:	2305      	movs	r3, #5
 8002b4c:	e008      	b.n	8002b60 <HAL_GPIO_Init+0x228>
 8002b4e:	2304      	movs	r3, #4
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x228>
 8002b52:	2303      	movs	r3, #3
 8002b54:	e004      	b.n	8002b60 <HAL_GPIO_Init+0x228>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e002      	b.n	8002b60 <HAL_GPIO_Init+0x228>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_GPIO_Init+0x228>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	f002 0203 	and.w	r2, r2, #3
 8002b66:	0092      	lsls	r2, r2, #2
 8002b68:	4093      	lsls	r3, r2
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b70:	4935      	ldr	r1, [pc, #212]	@ (8002c48 <HAL_GPIO_Init+0x310>)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c6c <HAL_GPIO_Init+0x334>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ba2:	4a32      	ldr	r2, [pc, #200]	@ (8002c6c <HAL_GPIO_Init+0x334>)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba8:	4b30      	ldr	r3, [pc, #192]	@ (8002c6c <HAL_GPIO_Init+0x334>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bcc:	4a27      	ldr	r2, [pc, #156]	@ (8002c6c <HAL_GPIO_Init+0x334>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bd2:	4b26      	ldr	r3, [pc, #152]	@ (8002c6c <HAL_GPIO_Init+0x334>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c6c <HAL_GPIO_Init+0x334>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c6c <HAL_GPIO_Init+0x334>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c20:	4a12      	ldr	r2, [pc, #72]	@ (8002c6c <HAL_GPIO_Init+0x334>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2b0f      	cmp	r3, #15
 8002c30:	f67f ae90 	bls.w	8002954 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3724      	adds	r7, #36	@ 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40013800 	.word	0x40013800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40020400 	.word	0x40020400
 8002c54:	40020800 	.word	0x40020800
 8002c58:	40020c00 	.word	0x40020c00
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40021400 	.word	0x40021400
 8002c64:	40021800 	.word	0x40021800
 8002c68:	40021c00 	.word	0x40021c00
 8002c6c:	40013c00 	.word	0x40013c00

08002c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	887b      	ldrh	r3, [r7, #2]
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	e001      	b.n	8002c92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
 8002cac:	4613      	mov	r3, r2
 8002cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb0:	787b      	ldrb	r3, [r7, #1]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cbc:	e003      	b.n	8002cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cbe:	887b      	ldrh	r3, [r7, #2]
 8002cc0:	041a      	lsls	r2, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	619a      	str	r2, [r3, #24]
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cde:	4b08      	ldr	r3, [pc, #32]	@ (8002d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cea:	4a05      	ldr	r2, [pc, #20]	@ (8002d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fa68 	bl	80011c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40013c00 	.word	0x40013c00

08002d04 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e059      	b.n	8002dca <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d106      	bne.n	8002d36 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f007 ffa5 	bl	800ac80 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2203      	movs	r2, #3
 8002d3a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d44:	d102      	bne.n	8002d4c <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f004 fdbe 	bl	80078d2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7c1a      	ldrb	r2, [r3, #16]
 8002d5e:	f88d 2000 	strb.w	r2, [sp]
 8002d62:	3304      	adds	r3, #4
 8002d64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d66:	f004 fd3f 	bl	80077e8 <USB_CoreInit>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e026      	b.n	8002dca <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 fdb6 	bl	80078f4 <USB_SetCurrentMode>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e017      	b.n	8002dca <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7c1a      	ldrb	r2, [r3, #16]
 8002da2:	f88d 2000 	strb.w	r2, [sp]
 8002da6:	3304      	adds	r3, #4
 8002da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002daa:	f004 ff59 	bl	8007c60 <USB_HostInit>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e004      	b.n	8002dca <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002dd2:	b590      	push	{r4, r7, lr}
 8002dd4:	b08b      	sub	sp, #44	@ 0x2c
 8002dd6:	af04      	add	r7, sp, #16
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	4608      	mov	r0, r1
 8002ddc:	4611      	mov	r1, r2
 8002dde:	461a      	mov	r2, r3
 8002de0:	4603      	mov	r3, r0
 8002de2:	70fb      	strb	r3, [r7, #3]
 8002de4:	460b      	mov	r3, r1
 8002de6:	70bb      	strb	r3, [r7, #2]
 8002de8:	4613      	mov	r3, r2
 8002dea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002dec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002dee:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_HCD_HC_Init+0x2c>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e09d      	b.n	8002f3a <HAL_HCD_HC_Init+0x168>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3319      	adds	r3, #25
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	3314      	adds	r3, #20
 8002e2a:	787a      	ldrb	r2, [r7, #1]
 8002e2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3315      	adds	r3, #21
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	3326      	adds	r3, #38	@ 0x26
 8002e52:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002e56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	78bb      	ldrb	r3, [r7, #2]
 8002e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e60:	b2d8      	uxtb	r0, r3
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3316      	adds	r3, #22
 8002e70:	4602      	mov	r2, r0
 8002e72:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	4619      	mov	r1, r3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fbc7 	bl	800360c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002e7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	da0a      	bge.n	8002e9c <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3317      	adds	r3, #23
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	e009      	b.n	8002eb0 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3317      	adds	r3, #23
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f005 f837 	bl	8007f28 <USB_GetHostSpeed>
 8002eba:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002ebc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10b      	bne.n	8002edc <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002ec4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d107      	bne.n	8002edc <HAL_HCD_HC_Init+0x10a>
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d104      	bne.n	8002edc <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2bbc      	cmp	r3, #188	@ 0xbc
 8002ed6:	d901      	bls.n	8002edc <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002ed8:	23bc      	movs	r3, #188	@ 0xbc
 8002eda:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	3318      	adds	r3, #24
 8002eec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002ef0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	b298      	uxth	r0, r3
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	3328      	adds	r3, #40	@ 0x28
 8002f06:	4602      	mov	r2, r0
 8002f08:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	787c      	ldrb	r4, [r7, #1]
 8002f14:	78ba      	ldrb	r2, [r7, #2]
 8002f16:	78f9      	ldrb	r1, [r7, #3]
 8002f18:	9302      	str	r3, [sp, #8]
 8002f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	4623      	mov	r3, r4
 8002f28:	f005 f826 	bl	8007f78 <USB_HC_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd90      	pop	{r4, r7, pc}

08002f42 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_HCD_HC_Halt+0x1e>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e00f      	b.n	8002f80 <HAL_HCD_HC_Halt+0x3e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f005 fbb8 	bl	80086e6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	70fb      	strb	r3, [r7, #3]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	70bb      	strb	r3, [r7, #2]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	3317      	adds	r3, #23
 8002fb2:	78ba      	ldrb	r2, [r7, #2]
 8002fb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3326      	adds	r3, #38	@ 0x26
 8002fc6:	787a      	ldrb	r2, [r7, #1]
 8002fc8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002fca:	7c3b      	ldrb	r3, [r7, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d114      	bne.n	8002ffa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	332a      	adds	r3, #42	@ 0x2a
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	3319      	adds	r3, #25
 8002ff4:	7f3a      	ldrb	r2, [r7, #28]
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e009      	b.n	800300e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	332a      	adds	r3, #42	@ 0x2a
 800300a:	2202      	movs	r2, #2
 800300c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800300e:	787b      	ldrb	r3, [r7, #1]
 8003010:	2b03      	cmp	r3, #3
 8003012:	f200 8102 	bhi.w	800321a <HAL_HCD_HC_SubmitRequest+0x292>
 8003016:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	0800302d 	.word	0x0800302d
 8003020:	08003205 	.word	0x08003205
 8003024:	080030f1 	.word	0x080030f1
 8003028:	0800317b 	.word	0x0800317b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800302c:	7c3b      	ldrb	r3, [r7, #16]
 800302e:	2b01      	cmp	r3, #1
 8003030:	f040 80f5 	bne.w	800321e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003034:	78bb      	ldrb	r3, [r7, #2]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d12d      	bne.n	8003096 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800303a:	8b3b      	ldrh	r3, [r7, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	333d      	adds	r3, #61	@ 0x3d
 8003050:	2201      	movs	r2, #1
 8003052:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	333d      	adds	r3, #61	@ 0x3d
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	332a      	adds	r3, #42	@ 0x2a
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800307e:	e0ce      	b.n	800321e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	332a      	adds	r3, #42	@ 0x2a
 8003090:	2202      	movs	r2, #2
 8003092:	701a      	strb	r2, [r3, #0]
      break;
 8003094:	e0c3      	b.n	800321e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	331a      	adds	r3, #26
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	f040 80b8 	bne.w	800321e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	333c      	adds	r3, #60	@ 0x3c
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	332a      	adds	r3, #42	@ 0x2a
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
      break;
 80030d8:	e0a1      	b.n	800321e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	332a      	adds	r3, #42	@ 0x2a
 80030ea:	2202      	movs	r2, #2
 80030ec:	701a      	strb	r2, [r3, #0]
      break;
 80030ee:	e096      	b.n	800321e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80030f0:	78bb      	ldrb	r3, [r7, #2]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d120      	bne.n	8003138 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	333d      	adds	r3, #61	@ 0x3d
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	332a      	adds	r3, #42	@ 0x2a
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003120:	e07e      	b.n	8003220 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	332a      	adds	r3, #42	@ 0x2a
 8003132:	2202      	movs	r2, #2
 8003134:	701a      	strb	r2, [r3, #0]
      break;
 8003136:	e073      	b.n	8003220 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	333c      	adds	r3, #60	@ 0x3c
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10a      	bne.n	8003164 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	332a      	adds	r3, #42	@ 0x2a
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
      break;
 8003162:	e05d      	b.n	8003220 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	332a      	adds	r3, #42	@ 0x2a
 8003174:	2202      	movs	r2, #2
 8003176:	701a      	strb	r2, [r3, #0]
      break;
 8003178:	e052      	b.n	8003220 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800317a:	78bb      	ldrb	r3, [r7, #2]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d120      	bne.n	80031c2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	333d      	adds	r3, #61	@ 0x3d
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	332a      	adds	r3, #42	@ 0x2a
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80031aa:	e039      	b.n	8003220 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	332a      	adds	r3, #42	@ 0x2a
 80031bc:	2202      	movs	r2, #2
 80031be:	701a      	strb	r2, [r3, #0]
      break;
 80031c0:	e02e      	b.n	8003220 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	333c      	adds	r3, #60	@ 0x3c
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	332a      	adds	r3, #42	@ 0x2a
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
      break;
 80031ec:	e018      	b.n	8003220 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	332a      	adds	r3, #42	@ 0x2a
 80031fe:	2202      	movs	r2, #2
 8003200:	701a      	strb	r2, [r3, #0]
      break;
 8003202:	e00d      	b.n	8003220 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	332a      	adds	r3, #42	@ 0x2a
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
      break;
 8003218:	e002      	b.n	8003220 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800321a:	bf00      	nop
 800321c:	e000      	b.n	8003220 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800321e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	332c      	adds	r3, #44	@ 0x2c
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	8b39      	ldrh	r1, [r7, #24]
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4403      	add	r3, r0
 8003244:	3334      	adds	r3, #52	@ 0x34
 8003246:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	334c      	adds	r3, #76	@ 0x4c
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	3338      	adds	r3, #56	@ 0x38
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3315      	adds	r3, #21
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	334d      	adds	r3, #77	@ 0x4d
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6818      	ldr	r0, [r3, #0]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	3310      	adds	r3, #16
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	1d19      	adds	r1, r3, #4
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	799b      	ldrb	r3, [r3, #6]
 80032b2:	461a      	mov	r2, r3
 80032b4:	f004 ff8c 	bl	80081d0 <USB_HC_StartXfer>
 80032b8:	4603      	mov	r3, r0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop

080032c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 fc80 	bl	8007be0 <USB_GetMode>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	f040 80fb 	bne.w	80034de <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f004 fc43 	bl	8007b78 <USB_ReadInterrupts>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80f1 	beq.w	80034dc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f004 fc3a 	bl	8007b78 <USB_ReadInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800330a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800330e:	d104      	bne.n	800331a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003318:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f004 fc2a 	bl	8007b78 <USB_ReadInterrupts>
 8003324:	4603      	mov	r3, r0
 8003326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800332a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800332e:	d104      	bne.n	800333a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003338:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f004 fc1a 	bl	8007b78 <USB_ReadInterrupts>
 8003344:	4603      	mov	r3, r0
 8003346:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800334a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800334e:	d104      	bne.n	800335a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003358:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f004 fc0a 	bl	8007b78 <USB_ReadInterrupts>
 8003364:	4603      	mov	r3, r0
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b02      	cmp	r3, #2
 800336c:	d103      	bne.n	8003376 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2202      	movs	r2, #2
 8003374:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f004 fbfc 	bl	8007b78 <USB_ReadInterrupts>
 8003380:	4603      	mov	r3, r0
 8003382:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800338a:	d120      	bne.n	80033ce <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003394:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d113      	bne.n	80033ce <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80033a6:	2110      	movs	r1, #16
 80033a8:	6938      	ldr	r0, [r7, #16]
 80033aa:	f004 faef 	bl	800798c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80033ae:	6938      	ldr	r0, [r7, #16]
 80033b0:	f004 fb1e 	bl	80079f0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7a5b      	ldrb	r3, [r3, #9]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d105      	bne.n	80033c8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	4618      	mov	r0, r3
 80033c4:	f004 fd10 	bl	8007de8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f007 fcd7 	bl	800ad7c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f004 fbd0 	bl	8007b78 <USB_ReadInterrupts>
 80033d8:	4603      	mov	r3, r0
 80033da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033e2:	d102      	bne.n	80033ea <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f001 fd33 	bl	8004e50 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f004 fbc2 	bl	8007b78 <USB_ReadInterrupts>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d106      	bne.n	800340c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f007 fca0 	bl	800ad44 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2208      	movs	r2, #8
 800340a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f004 fbb1 	bl	8007b78 <USB_ReadInterrupts>
 8003416:	4603      	mov	r3, r0
 8003418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003420:	d139      	bne.n	8003496 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f005 f94c 	bl	80086c4 <USB_HC_ReadInterrupt>
 800342c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	e025      	b.n	8003480 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d018      	beq.n	800347a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800345a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800345e:	d106      	bne.n	800346e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f905 	bl	8003676 <HCD_HC_IN_IRQHandler>
 800346c:	e005      	b.n	800347a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	4619      	mov	r1, r3
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 ff67 	bl	8004348 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	3301      	adds	r3, #1
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	795b      	ldrb	r3, [r3, #5]
 8003484:	461a      	mov	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	4293      	cmp	r3, r2
 800348a:	d3d3      	bcc.n	8003434 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f004 fb6c 	bl	8007b78 <USB_ReadInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d101      	bne.n	80034ae <HAL_HCD_IRQHandler+0x1ea>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <HAL_HCD_IRQHandler+0x1ec>
 80034ae:	2300      	movs	r3, #0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d014      	beq.n	80034de <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0210 	bic.w	r2, r2, #16
 80034c2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f001 fbe4 	bl	8004c92 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699a      	ldr	r2, [r3, #24]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0210 	orr.w	r2, r2, #16
 80034d8:	619a      	str	r2, [r3, #24]
 80034da:	e000      	b.n	80034de <HAL_HCD_IRQHandler+0x21a>
      return;
 80034dc:	bf00      	nop
    }
  }
}
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_HCD_Start+0x16>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e013      	b.n	8003522 <HAL_HCD_Start+0x3e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2101      	movs	r1, #1
 8003508:	4618      	mov	r0, r3
 800350a:	f004 fcd4 	bl	8007eb6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f004 f9cc 	bl	80078b0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_HCD_Stop+0x16>
 800353c:	2302      	movs	r3, #2
 800353e:	e00d      	b.n	800355c <HAL_HCD_Stop+0x32>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f005 fa27 	bl	80089a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f004 fc76 	bl	8007e62 <USB_ResetPort>
 8003576:	4603      	mov	r3, r0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	334c      	adds	r3, #76	@ 0x4c
 800359c:	781b      	ldrb	r3, [r3, #0]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3338      	adds	r3, #56	@ 0x38
 80035c6:	681b      	ldr	r3, [r3, #0]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f004 fcb8 	bl	8007f56 <USB_GetCurrentFrame>
 80035e6:	4603      	mov	r3, r0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f004 fc93 	bl	8007f28 <USB_GetHostSpeed>
 8003602:	4603      	mov	r3, r0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	331a      	adds	r3, #26
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	331b      	adds	r3, #27
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	3325      	adds	r3, #37	@ 0x25
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	3324      	adds	r3, #36	@ 0x24
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f004 fa82 	bl	8007b9e <USB_ReadChInterrupts>
 800369a:	4603      	mov	r3, r0
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d11a      	bne.n	80036da <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b0:	461a      	mov	r2, r3
 80036b2:	2304      	movs	r3, #4
 80036b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	334d      	adds	r3, #77	@ 0x4d
 80036c6:	2207      	movs	r2, #7
 80036c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f005 f807 	bl	80086e6 <USB_HC_Halt>
 80036d8:	e09e      	b.n	8003818 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	4611      	mov	r1, r2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f004 fa5b 	bl	8007b9e <USB_ReadChInterrupts>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036f2:	d11b      	bne.n	800372c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003700:	461a      	mov	r2, r3
 8003702:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003706:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	334d      	adds	r3, #77	@ 0x4d
 8003718:	2208      	movs	r2, #8
 800371a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f004 ffde 	bl	80086e6 <USB_HC_Halt>
 800372a:	e075      	b.n	8003818 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f004 fa32 	bl	8007b9e <USB_ReadChInterrupts>
 800373a:	4603      	mov	r3, r0
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b08      	cmp	r3, #8
 8003742:	d11a      	bne.n	800377a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4413      	add	r3, r2
 800374c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003750:	461a      	mov	r2, r3
 8003752:	2308      	movs	r3, #8
 8003754:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	334d      	adds	r3, #77	@ 0x4d
 8003766:	2206      	movs	r2, #6
 8003768:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f004 ffb7 	bl	80086e6 <USB_HC_Halt>
 8003778:	e04e      	b.n	8003818 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f004 fa0b 	bl	8007b9e <USB_ReadChInterrupts>
 8003788:	4603      	mov	r3, r0
 800378a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800378e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003792:	d11b      	bne.n	80037cc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037a0:	461a      	mov	r2, r3
 80037a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	334d      	adds	r3, #77	@ 0x4d
 80037b8:	2209      	movs	r2, #9
 80037ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f004 ff8e 	bl	80086e6 <USB_HC_Halt>
 80037ca:	e025      	b.n	8003818 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f004 f9e2 	bl	8007b9e <USB_ReadChInterrupts>
 80037da:	4603      	mov	r3, r0
 80037dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e0:	2b80      	cmp	r3, #128	@ 0x80
 80037e2:	d119      	bne.n	8003818 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f0:	461a      	mov	r2, r3
 80037f2:	2380      	movs	r3, #128	@ 0x80
 80037f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	334d      	adds	r3, #77	@ 0x4d
 8003806:	2207      	movs	r2, #7
 8003808:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f004 ff67 	bl	80086e6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f004 f9bc 	bl	8007b9e <USB_ReadChInterrupts>
 8003826:	4603      	mov	r3, r0
 8003828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800382c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003830:	d112      	bne.n	8003858 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f004 ff53 	bl	80086e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4413      	add	r3, r2
 8003848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800384c:	461a      	mov	r2, r3
 800384e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003852:	6093      	str	r3, [r2, #8]
 8003854:	f000 bd75 	b.w	8004342 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	78fa      	ldrb	r2, [r7, #3]
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f004 f99c 	bl	8007b9e <USB_ReadChInterrupts>
 8003866:	4603      	mov	r3, r0
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	f040 8128 	bne.w	8003ac2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4413      	add	r3, r2
 800387a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800387e:	461a      	mov	r2, r3
 8003880:	2320      	movs	r3, #32
 8003882:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	331b      	adds	r3, #27
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d119      	bne.n	80038ce <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	331b      	adds	r3, #27
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	0151      	lsls	r1, r2, #5
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	440a      	add	r2, r1
 80038c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038cc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	799b      	ldrb	r3, [r3, #6]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d01b      	beq.n	800390e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	3330      	adds	r3, #48	@ 0x30
 80038e6:	6819      	ldr	r1, [r3, #0]
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fa:	78fa      	ldrb	r2, [r7, #3]
 80038fc:	1ac9      	subs	r1, r1, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4403      	add	r3, r0
 800390a:	3338      	adds	r3, #56	@ 0x38
 800390c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	334d      	adds	r3, #77	@ 0x4d
 800391e:	2201      	movs	r2, #1
 8003920:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	3344      	adds	r3, #68	@ 0x44
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003942:	461a      	mov	r2, r3
 8003944:	2301      	movs	r3, #1
 8003946:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	3326      	adds	r3, #38	@ 0x26
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3326      	adds	r3, #38	@ 0x26
 800396e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003970:	2b02      	cmp	r3, #2
 8003972:	d110      	bne.n	8003996 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	4611      	mov	r1, r2
 800397c:	4618      	mov	r0, r3
 800397e:	f004 feb2 	bl	80086e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4413      	add	r3, r2
 800398a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800398e:	461a      	mov	r2, r3
 8003990:	2310      	movs	r3, #16
 8003992:	6093      	str	r3, [r2, #8]
 8003994:	e03d      	b.n	8003a12 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	3326      	adds	r3, #38	@ 0x26
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d00a      	beq.n	80039c2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	3326      	adds	r3, #38	@ 0x26
 80039bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d127      	bne.n	8003a12 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	0151      	lsls	r1, r2, #5
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	440a      	add	r2, r1
 80039d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80039e0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	334c      	adds	r3, #76	@ 0x4c
 80039f2:	2201      	movs	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	334c      	adds	r3, #76	@ 0x4c
 8003a06:	781a      	ldrb	r2, [r3, #0]
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f007 f9c3 	bl	800ad98 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	799b      	ldrb	r3, [r3, #6]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d13b      	bne.n	8003a92 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	3338      	adds	r3, #56	@ 0x38
 8003a2a:	6819      	ldr	r1, [r3, #0]
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4403      	add	r3, r0
 8003a3a:	3328      	adds	r3, #40	@ 0x28
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	440b      	add	r3, r1
 8003a40:	1e59      	subs	r1, r3, #1
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4403      	add	r3, r0
 8003a50:	3328      	adds	r3, #40	@ 0x28
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8470 	beq.w	8004342 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	333c      	adds	r3, #60	@ 0x3c
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	f083 0301 	eor.w	r3, r3, #1
 8003a7a:	b2d8      	uxtb	r0, r3
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	333c      	adds	r3, #60	@ 0x3c
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	f000 bc58 	b.w	8004342 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	333c      	adds	r3, #60	@ 0x3c
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	f083 0301 	eor.w	r3, r3, #1
 8003aaa:	b2d8      	uxtb	r0, r3
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	333c      	adds	r3, #60	@ 0x3c
 8003aba:	4602      	mov	r2, r0
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	f000 bc40 	b.w	8004342 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f004 f867 	bl	8007b9e <USB_ReadChInterrupts>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d131      	bne.n	8003b3e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2320      	movs	r3, #32
 8003aea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	331a      	adds	r3, #26
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	f040 841f 	bne.w	8004342 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	331b      	adds	r3, #27
 8003b14:	2201      	movs	r2, #1
 8003b16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	334d      	adds	r3, #77	@ 0x4d
 8003b28:	2203      	movs	r2, #3
 8003b2a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f004 fdd6 	bl	80086e6 <USB_HC_Halt>
 8003b3a:	f000 bc02 	b.w	8004342 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f004 f829 	bl	8007b9e <USB_ReadChInterrupts>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	f040 8305 	bne.w	8004162 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b64:	461a      	mov	r2, r3
 8003b66:	2302      	movs	r3, #2
 8003b68:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	334d      	adds	r3, #77	@ 0x4d
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d114      	bne.n	8003baa <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b80:	78fa      	ldrb	r2, [r7, #3]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	334d      	adds	r3, #77	@ 0x4d
 8003b90:	2202      	movs	r2, #2
 8003b92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	334c      	adds	r3, #76	@ 0x4c
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	701a      	strb	r2, [r3, #0]
 8003ba8:	e2cc      	b.n	8004144 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	334d      	adds	r3, #77	@ 0x4d
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b06      	cmp	r3, #6
 8003bbe:	d114      	bne.n	8003bea <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	334d      	adds	r3, #77	@ 0x4d
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	334c      	adds	r3, #76	@ 0x4c
 8003be4:	2205      	movs	r2, #5
 8003be6:	701a      	strb	r2, [r3, #0]
 8003be8:	e2ac      	b.n	8004144 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	334d      	adds	r3, #77	@ 0x4d
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b07      	cmp	r3, #7
 8003bfe:	d00b      	beq.n	8003c18 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	334d      	adds	r3, #77	@ 0x4d
 8003c10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c12:	2b09      	cmp	r3, #9
 8003c14:	f040 80a6 	bne.w	8003d64 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c18:	78fa      	ldrb	r2, [r7, #3]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	334d      	adds	r3, #77	@ 0x4d
 8003c28:	2202      	movs	r2, #2
 8003c2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	3344      	adds	r3, #68	@ 0x44
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	1c59      	adds	r1, r3, #1
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4403      	add	r3, r0
 8003c4c:	3344      	adds	r3, #68	@ 0x44
 8003c4e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3344      	adds	r3, #68	@ 0x44
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d943      	bls.n	8003cee <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	3344      	adds	r3, #68	@ 0x44
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	331a      	adds	r3, #26
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d123      	bne.n	8003cd8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	331b      	adds	r3, #27
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	331c      	adds	r3, #28
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	0151      	lsls	r1, r2, #5
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	440a      	add	r2, r1
 8003cce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cd8:	78fa      	ldrb	r2, [r7, #3]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	334c      	adds	r3, #76	@ 0x4c
 8003ce8:	2204      	movs	r2, #4
 8003cea:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cec:	e229      	b.n	8004142 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	1a9b      	subs	r3, r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	334c      	adds	r3, #76	@ 0x4c
 8003cfe:	2202      	movs	r2, #2
 8003d00:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	3326      	adds	r3, #38	@ 0x26
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00b      	beq.n	8003d30 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	3326      	adds	r3, #38	@ 0x26
 8003d28:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	f040 8209 	bne.w	8004142 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d46:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d4e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d62:	e1ee      	b.n	8004142 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	334d      	adds	r3, #77	@ 0x4d
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	f040 80c8 	bne.w	8003f0c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	334d      	adds	r3, #77	@ 0x4d
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	331b      	adds	r3, #27
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	f040 81ce 	bne.w	8004144 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	3326      	adds	r3, #38	@ 0x26
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d16b      	bne.n	8003e96 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	3348      	adds	r3, #72	@ 0x48
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	1c59      	adds	r1, r3, #1
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4403      	add	r3, r0
 8003dde:	3348      	adds	r3, #72	@ 0x48
 8003de0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	3348      	adds	r3, #72	@ 0x48
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d943      	bls.n	8003e80 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	3348      	adds	r3, #72	@ 0x48
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	331b      	adds	r3, #27
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3344      	adds	r3, #68	@ 0x44
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d809      	bhi.n	8003e4a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	331c      	adds	r3, #28
 8003e46:	2201      	movs	r2, #1
 8003e48:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	0151      	lsls	r1, r2, #5
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	440a      	add	r2, r1
 8003e60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e68:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	334c      	adds	r3, #76	@ 0x4c
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	701a      	strb	r2, [r3, #0]
 8003e7e:	e014      	b.n	8003eaa <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	334c      	adds	r3, #76	@ 0x4c
 8003e90:	2202      	movs	r2, #2
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e009      	b.n	8003eaa <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	334c      	adds	r3, #76	@ 0x4c
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	3326      	adds	r3, #38	@ 0x26
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00b      	beq.n	8003ed8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ec0:	78fa      	ldrb	r2, [r7, #3]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	3326      	adds	r3, #38	@ 0x26
 8003ed0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	f040 8136 	bne.w	8004144 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003eee:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ef6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f04:	461a      	mov	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e11b      	b.n	8004144 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	334d      	adds	r3, #77	@ 0x4d
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	f040 8081 	bne.w	8004026 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	334d      	adds	r3, #77	@ 0x4d
 8003f34:	2202      	movs	r2, #2
 8003f36:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	331b      	adds	r3, #27
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	f040 80fa 	bne.w	8004144 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	334c      	adds	r3, #76	@ 0x4c
 8003f60:	2202      	movs	r2, #2
 8003f62:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	0151      	lsls	r1, r2, #5
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	440a      	add	r2, r1
 8003f7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f82:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	0151      	lsls	r1, r2, #5
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	440a      	add	r2, r1
 8003f9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fa2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	78fa      	ldrb	r2, [r7, #3]
 8003fb4:	0151      	lsls	r1, r2, #5
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	440a      	add	r2, r1
 8003fba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fbe:	f023 0320 	bic.w	r3, r3, #32
 8003fc2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	3326      	adds	r3, #38	@ 0x26
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00b      	beq.n	8003ff2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	3326      	adds	r3, #38	@ 0x26
 8003fea:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	f040 80a9 	bne.w	8004144 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004008:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004010:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4413      	add	r3, r2
 800401a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800401e:	461a      	mov	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e08e      	b.n	8004144 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	334d      	adds	r3, #77	@ 0x4d
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b04      	cmp	r3, #4
 800403a:	d143      	bne.n	80040c4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	334d      	adds	r3, #77	@ 0x4d
 800404c:	2202      	movs	r2, #2
 800404e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	334c      	adds	r3, #76	@ 0x4c
 8004060:	2202      	movs	r2, #2
 8004062:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	3326      	adds	r3, #38	@ 0x26
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	3326      	adds	r3, #38	@ 0x26
 800408a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800408c:	2b02      	cmp	r3, #2
 800408e:	d159      	bne.n	8004144 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040a6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040ae:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040bc:	461a      	mov	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e03f      	b.n	8004144 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	334d      	adds	r3, #77	@ 0x4d
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d126      	bne.n	8004128 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	334d      	adds	r3, #77	@ 0x4d
 80040ea:	2202      	movs	r2, #2
 80040ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	3344      	adds	r3, #68	@ 0x44
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	1c59      	adds	r1, r3, #1
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4403      	add	r3, r0
 800410e:	3344      	adds	r3, #68	@ 0x44
 8004110:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	334c      	adds	r3, #76	@ 0x4c
 8004122:	2204      	movs	r2, #4
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	e00d      	b.n	8004144 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	334d      	adds	r3, #77	@ 0x4d
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b02      	cmp	r3, #2
 800413c:	f000 8100 	beq.w	8004340 <HCD_HC_IN_IRQHandler+0xcca>
 8004140:	e000      	b.n	8004144 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004142:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	334c      	adds	r3, #76	@ 0x4c
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f006 fe1c 	bl	800ad98 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004160:	e0ef      	b.n	8004342 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	4611      	mov	r1, r2
 800416a:	4618      	mov	r0, r3
 800416c:	f003 fd17 	bl	8007b9e <USB_ReadChInterrupts>
 8004170:	4603      	mov	r3, r0
 8004172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004176:	2b40      	cmp	r3, #64	@ 0x40
 8004178:	d12f      	bne.n	80041da <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4413      	add	r3, r2
 8004182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004186:	461a      	mov	r2, r3
 8004188:	2340      	movs	r3, #64	@ 0x40
 800418a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800418c:	78fa      	ldrb	r2, [r7, #3]
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	4613      	mov	r3, r2
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	334d      	adds	r3, #77	@ 0x4d
 800419c:	2205      	movs	r2, #5
 800419e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	331a      	adds	r3, #26
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80041b6:	78fa      	ldrb	r2, [r7, #3]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	3344      	adds	r3, #68	@ 0x44
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	4611      	mov	r1, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f004 fa87 	bl	80086e6 <USB_HC_Halt>
 80041d8:	e0b3      	b.n	8004342 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f003 fcdb 	bl	8007b9e <USB_ReadChInterrupts>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	2b10      	cmp	r3, #16
 80041f0:	f040 80a7 	bne.w	8004342 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	3326      	adds	r3, #38	@ 0x26
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b03      	cmp	r3, #3
 8004208:	d11b      	bne.n	8004242 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	440b      	add	r3, r1
 8004218:	3344      	adds	r3, #68	@ 0x44
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800421e:	78fa      	ldrb	r2, [r7, #3]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	334d      	adds	r3, #77	@ 0x4d
 800422e:	2204      	movs	r2, #4
 8004230:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f004 fa53 	bl	80086e6 <USB_HC_Halt>
 8004240:	e03f      	b.n	80042c2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	3326      	adds	r3, #38	@ 0x26
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	3326      	adds	r3, #38	@ 0x26
 8004268:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800426a:	2b02      	cmp	r3, #2
 800426c:	d129      	bne.n	80042c2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800426e:	78fa      	ldrb	r2, [r7, #3]
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	3344      	adds	r3, #68	@ 0x44
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	799b      	ldrb	r3, [r3, #6]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <HCD_HC_IN_IRQHandler+0xc2a>
 800428a:	78fa      	ldrb	r2, [r7, #3]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	331b      	adds	r3, #27
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d110      	bne.n	80042c2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80042a0:	78fa      	ldrb	r2, [r7, #3]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	334d      	adds	r3, #77	@ 0x4d
 80042b0:	2204      	movs	r2, #4
 80042b2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	78fa      	ldrb	r2, [r7, #3]
 80042ba:	4611      	mov	r1, r2
 80042bc:	4618      	mov	r0, r3
 80042be:	f004 fa12 	bl	80086e6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	331b      	adds	r3, #27
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d129      	bne.n	800432c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	331b      	adds	r3, #27
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	0151      	lsls	r1, r2, #5
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	440a      	add	r2, r1
 8004302:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800430a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4413      	add	r3, r2
 8004314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	0151      	lsls	r1, r2, #5
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	440a      	add	r2, r1
 8004322:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004326:	f043 0320 	orr.w	r3, r3, #32
 800432a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4413      	add	r3, r2
 8004334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004338:	461a      	mov	r2, r3
 800433a:	2310      	movs	r3, #16
 800433c:	6093      	str	r3, [r2, #8]
 800433e:	e000      	b.n	8004342 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004340:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f003 fc19 	bl	8007b9e <USB_ReadChInterrupts>
 800436c:	4603      	mov	r3, r0
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b04      	cmp	r3, #4
 8004374:	d11b      	bne.n	80043ae <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004382:	461a      	mov	r2, r3
 8004384:	2304      	movs	r3, #4
 8004386:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004388:	78fa      	ldrb	r2, [r7, #3]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	334d      	adds	r3, #77	@ 0x4d
 8004398:	2207      	movs	r2, #7
 800439a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f004 f99e 	bl	80086e6 <USB_HC_Halt>
 80043aa:	f000 bc6f 	b.w	8004c8c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f003 fbf1 	bl	8007b9e <USB_ReadChInterrupts>
 80043bc:	4603      	mov	r3, r0
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	f040 8082 	bne.w	80044cc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043d4:	461a      	mov	r2, r3
 80043d6:	2320      	movs	r3, #32
 80043d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80043da:	78fa      	ldrb	r2, [r7, #3]
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	3319      	adds	r3, #25
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d124      	bne.n	800443a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	3319      	adds	r3, #25
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	334c      	adds	r3, #76	@ 0x4c
 8004414:	2202      	movs	r2, #2
 8004416:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	334d      	adds	r3, #77	@ 0x4d
 8004428:	2203      	movs	r2, #3
 800442a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	4611      	mov	r1, r2
 8004434:	4618      	mov	r0, r3
 8004436:	f004 f956 	bl	80086e6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800443a:	78fa      	ldrb	r2, [r7, #3]
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	331a      	adds	r3, #26
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	f040 841d 	bne.w	8004c8c <HCD_HC_OUT_IRQHandler+0x944>
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	331b      	adds	r3, #27
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f040 8411 	bne.w	8004c8c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	3326      	adds	r3, #38	@ 0x26
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d009      	beq.n	8004494 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004480:	78fa      	ldrb	r2, [r7, #3]
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	4613      	mov	r3, r2
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	1a9b      	subs	r3, r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	331b      	adds	r3, #27
 8004490:	2201      	movs	r2, #1
 8004492:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004494:	78fa      	ldrb	r2, [r7, #3]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	334d      	adds	r3, #77	@ 0x4d
 80044a4:	2203      	movs	r2, #3
 80044a6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f004 f918 	bl	80086e6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80044b6:	78fa      	ldrb	r2, [r7, #3]
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	3344      	adds	r3, #68	@ 0x44
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e3df      	b.n	8004c8c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	4611      	mov	r1, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f003 fb62 	bl	8007b9e <USB_ReadChInterrupts>
 80044da:	4603      	mov	r3, r0
 80044dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044e4:	d111      	bne.n	800450a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044f2:	461a      	mov	r2, r3
 80044f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044f8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	78fa      	ldrb	r2, [r7, #3]
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f004 f8ef 	bl	80086e6 <USB_HC_Halt>
 8004508:	e3c0      	b.n	8004c8c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	4611      	mov	r1, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f003 fb43 	bl	8007b9e <USB_ReadChInterrupts>
 8004518:	4603      	mov	r3, r0
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b01      	cmp	r3, #1
 8004520:	d168      	bne.n	80045f4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	3344      	adds	r3, #68	@ 0x44
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	78fa      	ldrb	r2, [r7, #3]
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f003 fb2d 	bl	8007b9e <USB_ReadChInterrupts>
 8004544:	4603      	mov	r3, r0
 8004546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454a:	2b40      	cmp	r3, #64	@ 0x40
 800454c:	d112      	bne.n	8004574 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	3319      	adds	r3, #25
 800455e:	2201      	movs	r2, #1
 8004560:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4413      	add	r3, r2
 800456a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800456e:	461a      	mov	r2, r3
 8004570:	2340      	movs	r3, #64	@ 0x40
 8004572:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	331b      	adds	r3, #27
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d019      	beq.n	80045be <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	331b      	adds	r3, #27
 800459a:	2200      	movs	r2, #0
 800459c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	0151      	lsls	r1, r2, #5
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	440a      	add	r2, r1
 80045b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045bc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045ca:	461a      	mov	r2, r3
 80045cc:	2301      	movs	r3, #1
 80045ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	334d      	adds	r3, #77	@ 0x4d
 80045e0:	2201      	movs	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f004 f87a 	bl	80086e6 <USB_HC_Halt>
 80045f2:	e34b      	b.n	8004c8c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f003 face 	bl	8007b9e <USB_ReadChInterrupts>
 8004602:	4603      	mov	r3, r0
 8004604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004608:	2b40      	cmp	r3, #64	@ 0x40
 800460a:	d139      	bne.n	8004680 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800460c:	78fa      	ldrb	r2, [r7, #3]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	334d      	adds	r3, #77	@ 0x4d
 800461c:	2205      	movs	r2, #5
 800461e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004620:	78fa      	ldrb	r2, [r7, #3]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	331a      	adds	r3, #26
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	3319      	adds	r3, #25
 8004646:	2201      	movs	r2, #1
 8004648:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800464a:	78fa      	ldrb	r2, [r7, #3]
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	3344      	adds	r3, #68	@ 0x44
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	78fa      	ldrb	r2, [r7, #3]
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f004 f83d 	bl	80086e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4413      	add	r3, r2
 8004674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004678:	461a      	mov	r2, r3
 800467a:	2340      	movs	r3, #64	@ 0x40
 800467c:	6093      	str	r3, [r2, #8]
 800467e:	e305      	b.n	8004c8c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f003 fa88 	bl	8007b9e <USB_ReadChInterrupts>
 800468e:	4603      	mov	r3, r0
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b08      	cmp	r3, #8
 8004696:	d11a      	bne.n	80046ce <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a4:	461a      	mov	r2, r3
 80046a6:	2308      	movs	r3, #8
 80046a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80046aa:	78fa      	ldrb	r2, [r7, #3]
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	334d      	adds	r3, #77	@ 0x4d
 80046ba:	2206      	movs	r2, #6
 80046bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f004 f80d 	bl	80086e6 <USB_HC_Halt>
 80046cc:	e2de      	b.n	8004c8c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f003 fa61 	bl	8007b9e <USB_ReadChInterrupts>
 80046dc:	4603      	mov	r3, r0
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b10      	cmp	r3, #16
 80046e4:	d144      	bne.n	8004770 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80046e6:	78fa      	ldrb	r2, [r7, #3]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	3344      	adds	r3, #68	@ 0x44
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80046fa:	78fa      	ldrb	r2, [r7, #3]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	440b      	add	r3, r1
 8004708:	334d      	adds	r3, #77	@ 0x4d
 800470a:	2204      	movs	r2, #4
 800470c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	3319      	adds	r3, #25
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d114      	bne.n	800474e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004724:	78fa      	ldrb	r2, [r7, #3]
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	3318      	adds	r3, #24
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800473a:	78fa      	ldrb	r2, [r7, #3]
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	3319      	adds	r3, #25
 800474a:	2201      	movs	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f003 ffc5 	bl	80086e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800475c:	78fb      	ldrb	r3, [r7, #3]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004768:	461a      	mov	r2, r3
 800476a:	2310      	movs	r3, #16
 800476c:	6093      	str	r3, [r2, #8]
 800476e:	e28d      	b.n	8004c8c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	78fa      	ldrb	r2, [r7, #3]
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f003 fa10 	bl	8007b9e <USB_ReadChInterrupts>
 800477e:	4603      	mov	r3, r0
 8004780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004784:	2b80      	cmp	r3, #128	@ 0x80
 8004786:	d169      	bne.n	800485c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	799b      	ldrb	r3, [r3, #6]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d111      	bne.n	80047b4 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	334d      	adds	r3, #77	@ 0x4d
 80047a0:	2207      	movs	r2, #7
 80047a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	4611      	mov	r1, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f003 ff9a 	bl	80086e6 <USB_HC_Halt>
 80047b2:	e049      	b.n	8004848 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	3344      	adds	r3, #68	@ 0x44
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	1c59      	adds	r1, r3, #1
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4403      	add	r3, r0
 80047d4:	3344      	adds	r3, #68	@ 0x44
 80047d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	3344      	adds	r3, #68	@ 0x44
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d922      	bls.n	8004834 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80047ee:	78fa      	ldrb	r2, [r7, #3]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	3344      	adds	r3, #68	@ 0x44
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	334c      	adds	r3, #76	@ 0x4c
 8004812:	2204      	movs	r2, #4
 8004814:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004816:	78fa      	ldrb	r2, [r7, #3]
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	334c      	adds	r3, #76	@ 0x4c
 8004826:	781a      	ldrb	r2, [r3, #0]
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	4619      	mov	r1, r3
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f006 fab3 	bl	800ad98 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004832:	e009      	b.n	8004848 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	334c      	adds	r3, #76	@ 0x4c
 8004844:	2202      	movs	r2, #2
 8004846:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4413      	add	r3, r2
 8004850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004854:	461a      	mov	r2, r3
 8004856:	2380      	movs	r3, #128	@ 0x80
 8004858:	6093      	str	r3, [r2, #8]
 800485a:	e217      	b.n	8004c8c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	78fa      	ldrb	r2, [r7, #3]
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f003 f99a 	bl	8007b9e <USB_ReadChInterrupts>
 800486a:	4603      	mov	r3, r0
 800486c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004874:	d11b      	bne.n	80048ae <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004876:	78fa      	ldrb	r2, [r7, #3]
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	334d      	adds	r3, #77	@ 0x4d
 8004886:	2209      	movs	r2, #9
 8004888:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	78fa      	ldrb	r2, [r7, #3]
 8004890:	4611      	mov	r1, r2
 8004892:	4618      	mov	r0, r3
 8004894:	f003 ff27 	bl	80086e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048a4:	461a      	mov	r2, r3
 80048a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048aa:	6093      	str	r3, [r2, #8]
 80048ac:	e1ee      	b.n	8004c8c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f003 f971 	bl	8007b9e <USB_ReadChInterrupts>
 80048bc:	4603      	mov	r3, r0
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	f040 81df 	bne.w	8004c86 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048d4:	461a      	mov	r2, r3
 80048d6:	2302      	movs	r3, #2
 80048d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80048da:	78fa      	ldrb	r2, [r7, #3]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	334d      	adds	r3, #77	@ 0x4d
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	f040 8093 	bne.w	8004a18 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	334d      	adds	r3, #77	@ 0x4d
 8004902:	2202      	movs	r2, #2
 8004904:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	334c      	adds	r3, #76	@ 0x4c
 8004916:	2201      	movs	r2, #1
 8004918:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800491a:	78fa      	ldrb	r2, [r7, #3]
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	1a9b      	subs	r3, r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	3326      	adds	r3, #38	@ 0x26
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d00b      	beq.n	8004948 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	3326      	adds	r3, #38	@ 0x26
 8004940:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004942:	2b03      	cmp	r3, #3
 8004944:	f040 8190 	bne.w	8004c68 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	799b      	ldrb	r3, [r3, #6]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d115      	bne.n	800497c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	333d      	adds	r3, #61	@ 0x3d
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	f083 0301 	eor.w	r3, r3, #1
 8004968:	b2d8      	uxtb	r0, r3
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	333d      	adds	r3, #61	@ 0x3d
 8004978:	4602      	mov	r2, r0
 800497a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	799b      	ldrb	r3, [r3, #6]
 8004980:	2b01      	cmp	r3, #1
 8004982:	f040 8171 	bne.w	8004c68 <HCD_HC_OUT_IRQHandler+0x920>
 8004986:	78fa      	ldrb	r2, [r7, #3]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	3334      	adds	r3, #52	@ 0x34
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8165 	beq.w	8004c68 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800499e:	78fa      	ldrb	r2, [r7, #3]
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	3334      	adds	r3, #52	@ 0x34
 80049ae:	6819      	ldr	r1, [r3, #0]
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	4613      	mov	r3, r2
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4403      	add	r3, r0
 80049be:	3328      	adds	r3, #40	@ 0x28
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	440b      	add	r3, r1
 80049c4:	1e59      	subs	r1, r3, #1
 80049c6:	78fa      	ldrb	r2, [r7, #3]
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4403      	add	r3, r0
 80049d4:	3328      	adds	r3, #40	@ 0x28
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80049dc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 813f 	beq.w	8004c68 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	333d      	adds	r3, #61	@ 0x3d
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	78fa      	ldrb	r2, [r7, #3]
 80049fe:	f083 0301 	eor.w	r3, r3, #1
 8004a02:	b2d8      	uxtb	r0, r3
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	333d      	adds	r3, #61	@ 0x3d
 8004a12:	4602      	mov	r2, r0
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	e127      	b.n	8004c68 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	334d      	adds	r3, #77	@ 0x4d
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d120      	bne.n	8004a70 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	334d      	adds	r3, #77	@ 0x4d
 8004a3e:	2202      	movs	r2, #2
 8004a40:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	331b      	adds	r3, #27
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	f040 8107 	bne.w	8004c68 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	334c      	adds	r3, #76	@ 0x4c
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	e0fb      	b.n	8004c68 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004a70:	78fa      	ldrb	r2, [r7, #3]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	1a9b      	subs	r3, r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	334d      	adds	r3, #77	@ 0x4d
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d13a      	bne.n	8004afc <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a86:	78fa      	ldrb	r2, [r7, #3]
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	334d      	adds	r3, #77	@ 0x4d
 8004a96:	2202      	movs	r2, #2
 8004a98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	334c      	adds	r3, #76	@ 0x4c
 8004aaa:	2202      	movs	r2, #2
 8004aac:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004aae:	78fa      	ldrb	r2, [r7, #3]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	331b      	adds	r3, #27
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	f040 80d1 	bne.w	8004c68 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	331b      	adds	r3, #27
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004af8:	6053      	str	r3, [r2, #4]
 8004afa:	e0b5      	b.n	8004c68 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004afc:	78fa      	ldrb	r2, [r7, #3]
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	4613      	mov	r3, r2
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	334d      	adds	r3, #77	@ 0x4d
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b05      	cmp	r3, #5
 8004b10:	d114      	bne.n	8004b3c <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b12:	78fa      	ldrb	r2, [r7, #3]
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	1a9b      	subs	r3, r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	334d      	adds	r3, #77	@ 0x4d
 8004b22:	2202      	movs	r2, #2
 8004b24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004b26:	78fa      	ldrb	r2, [r7, #3]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	334c      	adds	r3, #76	@ 0x4c
 8004b36:	2202      	movs	r2, #2
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	e095      	b.n	8004c68 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004b3c:	78fa      	ldrb	r2, [r7, #3]
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	334d      	adds	r3, #77	@ 0x4d
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b06      	cmp	r3, #6
 8004b50:	d114      	bne.n	8004b7c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b52:	78fa      	ldrb	r2, [r7, #3]
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	4613      	mov	r3, r2
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	334d      	adds	r3, #77	@ 0x4d
 8004b62:	2202      	movs	r2, #2
 8004b64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004b66:	78fa      	ldrb	r2, [r7, #3]
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	334c      	adds	r3, #76	@ 0x4c
 8004b76:	2205      	movs	r2, #5
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	e075      	b.n	8004c68 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004b7c:	78fa      	ldrb	r2, [r7, #3]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	334d      	adds	r3, #77	@ 0x4d
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b07      	cmp	r3, #7
 8004b90:	d00a      	beq.n	8004ba8 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004b92:	78fa      	ldrb	r2, [r7, #3]
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	440b      	add	r3, r1
 8004ba0:	334d      	adds	r3, #77	@ 0x4d
 8004ba2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004ba4:	2b09      	cmp	r3, #9
 8004ba6:	d170      	bne.n	8004c8a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	334d      	adds	r3, #77	@ 0x4d
 8004bb8:	2202      	movs	r2, #2
 8004bba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004bbc:	78fa      	ldrb	r2, [r7, #3]
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	1a9b      	subs	r3, r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	3344      	adds	r3, #68	@ 0x44
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1c59      	adds	r1, r3, #1
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4403      	add	r3, r0
 8004bdc:	3344      	adds	r3, #68	@ 0x44
 8004bde:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004be0:	78fa      	ldrb	r2, [r7, #3]
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	4613      	mov	r3, r2
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	1a9b      	subs	r3, r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	3344      	adds	r3, #68	@ 0x44
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d914      	bls.n	8004c20 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004bf6:	78fa      	ldrb	r2, [r7, #3]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	440b      	add	r3, r1
 8004c04:	3344      	adds	r3, #68	@ 0x44
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	334c      	adds	r3, #76	@ 0x4c
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c1e:	e022      	b.n	8004c66 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c20:	78fa      	ldrb	r2, [r7, #3]
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	1a9b      	subs	r3, r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	334c      	adds	r3, #76	@ 0x4c
 8004c30:	2202      	movs	r2, #2
 8004c32:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c4a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c52:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c60:	461a      	mov	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c66:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004c68:	78fa      	ldrb	r2, [r7, #3]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	334c      	adds	r3, #76	@ 0x4c
 8004c78:	781a      	ldrb	r2, [r3, #0]
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f006 f88a 	bl	800ad98 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c84:	e002      	b.n	8004c8c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004c8a:	bf00      	nop
  }
}
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b08a      	sub	sp, #40	@ 0x28
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	0c5b      	lsrs	r3, r3, #17
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	091b      	lsrs	r3, r3, #4
 8004cc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cc6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d004      	beq.n	8004cd8 <HCD_RXQLVL_IRQHandler+0x46>
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b05      	cmp	r3, #5
 8004cd2:	f000 80b6 	beq.w	8004e42 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004cd6:	e0b7      	b.n	8004e48 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 80b3 	beq.w	8004e46 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	332c      	adds	r3, #44	@ 0x2c
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 80a7 	beq.w	8004e46 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	3338      	adds	r3, #56	@ 0x38
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	18d1      	adds	r1, r2, r3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4613      	mov	r3, r2
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4403      	add	r3, r0
 8004d1c:	3334      	adds	r3, #52	@ 0x34
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4299      	cmp	r1, r3
 8004d22:	f200 8083 	bhi.w	8004e2c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	332c      	adds	r3, #44	@ 0x2c
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	b292      	uxth	r2, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	f002 fec1 	bl	8007ac8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	332c      	adds	r3, #44	@ 0x2c
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	18d1      	adds	r1, r2, r3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4613      	mov	r3, r2
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4403      	add	r3, r0
 8004d6a:	332c      	adds	r3, #44	@ 0x2c
 8004d6c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4613      	mov	r3, r2
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	3338      	adds	r3, #56	@ 0x38
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	18d1      	adds	r1, r2, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4403      	add	r3, r0
 8004d92:	3338      	adds	r3, #56	@ 0x38
 8004d94:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	0cdb      	lsrs	r3, r3, #19
 8004da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004daa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4613      	mov	r3, r2
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	3328      	adds	r3, #40	@ 0x28
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d13f      	bne.n	8004e46 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d03c      	beq.n	8004e46 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004de2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004dea:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004df8:	461a      	mov	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	4613      	mov	r3, r2
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	333c      	adds	r3, #60	@ 0x3c
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f083 0301 	eor.w	r3, r3, #1
 8004e14:	b2d8      	uxtb	r0, r3
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	333c      	adds	r3, #60	@ 0x3c
 8004e26:	4602      	mov	r2, r0
 8004e28:	701a      	strb	r2, [r3, #0]
      break;
 8004e2a:	e00c      	b.n	8004e46 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	4613      	mov	r3, r2
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	1a9b      	subs	r3, r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	334c      	adds	r3, #76	@ 0x4c
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	701a      	strb	r2, [r3, #0]
      break;
 8004e40:	e001      	b.n	8004e46 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004e42:	bf00      	nop
 8004e44:	e000      	b.n	8004e48 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004e46:	bf00      	nop
  }
}
 8004e48:	bf00      	nop
 8004e4a:	3728      	adds	r7, #40	@ 0x28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004e7c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d10b      	bne.n	8004ea0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d102      	bne.n	8004e98 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f005 ff64 	bl	800ad60 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f043 0302 	orr.w	r3, r3, #2
 8004e9e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d132      	bne.n	8004f10 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f043 0308 	orr.w	r3, r3, #8
 8004eb0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d126      	bne.n	8004f0a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	7a5b      	ldrb	r3, [r3, #9]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d113      	bne.n	8004eec <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004eca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ece:	d106      	bne.n	8004ede <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2102      	movs	r1, #2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f002 ff86 	bl	8007de8 <USB_InitFSLSPClkSel>
 8004edc:	e011      	b.n	8004f02 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f002 ff7f 	bl	8007de8 <USB_InitFSLSPClkSel>
 8004eea:	e00a      	b.n	8004f02 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	79db      	ldrb	r3, [r3, #7]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d106      	bne.n	8004f02 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004efa:	461a      	mov	r2, r3
 8004efc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004f00:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f005 ff56 	bl	800adb4 <HAL_HCD_PortEnabled_Callback>
 8004f08:	e002      	b.n	8004f10 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f005 ff60 	bl	800add0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d103      	bne.n	8004f22 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f043 0320 	orr.w	r3, r3, #32
 8004f20:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004f28:	461a      	mov	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	6013      	str	r3, [r2, #0]
}
 8004f2e:	bf00      	nop
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e12b      	b.n	80051a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fc fe4a 	bl	8001bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2224      	movs	r2, #36	@ 0x24
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0201 	bic.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f9c:	f001 fa20 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 8004fa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	4a81      	ldr	r2, [pc, #516]	@ (80051ac <HAL_I2C_Init+0x274>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d807      	bhi.n	8004fbc <HAL_I2C_Init+0x84>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4a80      	ldr	r2, [pc, #512]	@ (80051b0 <HAL_I2C_Init+0x278>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	bf94      	ite	ls
 8004fb4:	2301      	movls	r3, #1
 8004fb6:	2300      	movhi	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	e006      	b.n	8004fca <HAL_I2C_Init+0x92>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4a7d      	ldr	r2, [pc, #500]	@ (80051b4 <HAL_I2C_Init+0x27c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	bf94      	ite	ls
 8004fc4:	2301      	movls	r3, #1
 8004fc6:	2300      	movhi	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e0e7      	b.n	80051a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4a78      	ldr	r2, [pc, #480]	@ (80051b8 <HAL_I2C_Init+0x280>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	0c9b      	lsrs	r3, r3, #18
 8004fdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	4a6a      	ldr	r2, [pc, #424]	@ (80051ac <HAL_I2C_Init+0x274>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d802      	bhi.n	800500c <HAL_I2C_Init+0xd4>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	3301      	adds	r3, #1
 800500a:	e009      	b.n	8005020 <HAL_I2C_Init+0xe8>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	4a69      	ldr	r2, [pc, #420]	@ (80051bc <HAL_I2C_Init+0x284>)
 8005018:	fba2 2303 	umull	r2, r3, r2, r3
 800501c:	099b      	lsrs	r3, r3, #6
 800501e:	3301      	adds	r3, #1
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	430b      	orrs	r3, r1
 8005026:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005032:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	495c      	ldr	r1, [pc, #368]	@ (80051ac <HAL_I2C_Init+0x274>)
 800503c:	428b      	cmp	r3, r1
 800503e:	d819      	bhi.n	8005074 <HAL_I2C_Init+0x13c>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	1e59      	subs	r1, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	fbb1 f3f3 	udiv	r3, r1, r3
 800504e:	1c59      	adds	r1, r3, #1
 8005050:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005054:	400b      	ands	r3, r1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_I2C_Init+0x138>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1e59      	subs	r1, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	fbb1 f3f3 	udiv	r3, r1, r3
 8005068:	3301      	adds	r3, #1
 800506a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800506e:	e051      	b.n	8005114 <HAL_I2C_Init+0x1dc>
 8005070:	2304      	movs	r3, #4
 8005072:	e04f      	b.n	8005114 <HAL_I2C_Init+0x1dc>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d111      	bne.n	80050a0 <HAL_I2C_Init+0x168>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	1e58      	subs	r0, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6859      	ldr	r1, [r3, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	440b      	add	r3, r1
 800508a:	fbb0 f3f3 	udiv	r3, r0, r3
 800508e:	3301      	adds	r3, #1
 8005090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005094:	2b00      	cmp	r3, #0
 8005096:	bf0c      	ite	eq
 8005098:	2301      	moveq	r3, #1
 800509a:	2300      	movne	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	e012      	b.n	80050c6 <HAL_I2C_Init+0x18e>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	1e58      	subs	r0, r3, #1
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6859      	ldr	r1, [r3, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	0099      	lsls	r1, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80050b6:	3301      	adds	r3, #1
 80050b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050bc:	2b00      	cmp	r3, #0
 80050be:	bf0c      	ite	eq
 80050c0:	2301      	moveq	r3, #1
 80050c2:	2300      	movne	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_I2C_Init+0x196>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e022      	b.n	8005114 <HAL_I2C_Init+0x1dc>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10e      	bne.n	80050f4 <HAL_I2C_Init+0x1bc>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	1e58      	subs	r0, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6859      	ldr	r1, [r3, #4]
 80050de:	460b      	mov	r3, r1
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	440b      	add	r3, r1
 80050e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80050e8:	3301      	adds	r3, #1
 80050ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050f2:	e00f      	b.n	8005114 <HAL_I2C_Init+0x1dc>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1e58      	subs	r0, r3, #1
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6859      	ldr	r1, [r3, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	0099      	lsls	r1, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	fbb0 f3f3 	udiv	r3, r0, r3
 800510a:	3301      	adds	r3, #1
 800510c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005110:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	6809      	ldr	r1, [r1, #0]
 8005118:	4313      	orrs	r3, r2
 800511a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69da      	ldr	r2, [r3, #28]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005142:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6911      	ldr	r1, [r2, #16]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	68d2      	ldr	r2, [r2, #12]
 800514e:	4311      	orrs	r1, r2
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6812      	ldr	r2, [r2, #0]
 8005154:	430b      	orrs	r3, r1
 8005156:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695a      	ldr	r2, [r3, #20]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	000186a0 	.word	0x000186a0
 80051b0:	001e847f 	.word	0x001e847f
 80051b4:	003d08ff 	.word	0x003d08ff
 80051b8:	431bde83 	.word	0x431bde83
 80051bc:	10624dd3 	.word	0x10624dd3

080051c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e128      	b.n	8005424 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a90      	ldr	r2, [pc, #576]	@ (800542c <HAL_I2S_Init+0x26c>)
 80051ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fc fd4b 	bl	8001c88 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005208:	f023 030f 	bic.w	r3, r3, #15
 800520c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2202      	movs	r2, #2
 8005214:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d060      	beq.n	80052e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d102      	bne.n	800522c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005226:	2310      	movs	r3, #16
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	e001      	b.n	8005230 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800522c:	2320      	movs	r3, #32
 800522e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b20      	cmp	r3, #32
 8005236:	d802      	bhi.n	800523e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800523e:	2001      	movs	r0, #1
 8005240:	f001 f9c4 	bl	80065cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005244:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800524e:	d125      	bne.n	800529c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d010      	beq.n	800527a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	461a      	mov	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	fbb2 f3f3 	udiv	r3, r2, r3
 8005274:	3305      	adds	r3, #5
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	e01f      	b.n	80052ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	fbb2 f2f3 	udiv	r2, r2, r3
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	461a      	mov	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	fbb2 f3f3 	udiv	r3, r2, r3
 8005296:	3305      	adds	r3, #5
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	e00e      	b.n	80052ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	461a      	mov	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	3305      	adds	r3, #5
 80052b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	4a5c      	ldr	r2, [pc, #368]	@ (8005430 <HAL_I2S_Init+0x270>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	08db      	lsrs	r3, r3, #3
 80052c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	e003      	b.n	80052e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80052e0:	2302      	movs	r3, #2
 80052e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d902      	bls.n	80052f4 <HAL_I2S_Init+0x134>
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2bff      	cmp	r3, #255	@ 0xff
 80052f2:	d907      	bls.n	8005304 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f8:	f043 0210 	orr.w	r2, r3, #16
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e08f      	b.n	8005424 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	ea42 0103 	orr.w	r1, r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	430a      	orrs	r2, r1
 8005316:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005322:	f023 030f 	bic.w	r3, r3, #15
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6851      	ldr	r1, [r2, #4]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6892      	ldr	r2, [r2, #8]
 800532e:	4311      	orrs	r1, r2
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	68d2      	ldr	r2, [r2, #12]
 8005334:	4311      	orrs	r1, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6992      	ldr	r2, [r2, #24]
 800533a:	430a      	orrs	r2, r1
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005346:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d161      	bne.n	8005414 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a38      	ldr	r2, [pc, #224]	@ (8005434 <HAL_I2S_Init+0x274>)
 8005354:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a37      	ldr	r2, [pc, #220]	@ (8005438 <HAL_I2S_Init+0x278>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d101      	bne.n	8005364 <HAL_I2S_Init+0x1a4>
 8005360:	4b36      	ldr	r3, [pc, #216]	@ (800543c <HAL_I2S_Init+0x27c>)
 8005362:	e001      	b.n	8005368 <HAL_I2S_Init+0x1a8>
 8005364:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	4932      	ldr	r1, [pc, #200]	@ (8005438 <HAL_I2S_Init+0x278>)
 8005370:	428a      	cmp	r2, r1
 8005372:	d101      	bne.n	8005378 <HAL_I2S_Init+0x1b8>
 8005374:	4a31      	ldr	r2, [pc, #196]	@ (800543c <HAL_I2S_Init+0x27c>)
 8005376:	e001      	b.n	800537c <HAL_I2S_Init+0x1bc>
 8005378:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800537c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005380:	f023 030f 	bic.w	r3, r3, #15
 8005384:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a2b      	ldr	r2, [pc, #172]	@ (8005438 <HAL_I2S_Init+0x278>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d101      	bne.n	8005394 <HAL_I2S_Init+0x1d4>
 8005390:	4b2a      	ldr	r3, [pc, #168]	@ (800543c <HAL_I2S_Init+0x27c>)
 8005392:	e001      	b.n	8005398 <HAL_I2S_Init+0x1d8>
 8005394:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005398:	2202      	movs	r2, #2
 800539a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a25      	ldr	r2, [pc, #148]	@ (8005438 <HAL_I2S_Init+0x278>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d101      	bne.n	80053aa <HAL_I2S_Init+0x1ea>
 80053a6:	4b25      	ldr	r3, [pc, #148]	@ (800543c <HAL_I2S_Init+0x27c>)
 80053a8:	e001      	b.n	80053ae <HAL_I2S_Init+0x1ee>
 80053aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ba:	d003      	beq.n	80053c4 <HAL_I2S_Init+0x204>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d103      	bne.n	80053cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80053c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	e001      	b.n	80053d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80053da:	4313      	orrs	r3, r2
 80053dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80053e4:	4313      	orrs	r3, r2
 80053e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80053ee:	4313      	orrs	r3, r2
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	897b      	ldrh	r3, [r7, #10]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80053fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a0d      	ldr	r2, [pc, #52]	@ (8005438 <HAL_I2S_Init+0x278>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d101      	bne.n	800540c <HAL_I2S_Init+0x24c>
 8005408:	4b0c      	ldr	r3, [pc, #48]	@ (800543c <HAL_I2S_Init+0x27c>)
 800540a:	e001      	b.n	8005410 <HAL_I2S_Init+0x250>
 800540c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005410:	897a      	ldrh	r2, [r7, #10]
 8005412:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	08005537 	.word	0x08005537
 8005430:	cccccccd 	.word	0xcccccccd
 8005434:	0800564d 	.word	0x0800564d
 8005438:	40003800 	.word	0x40003800
 800543c:	40003400 	.word	0x40003400

08005440 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	881a      	ldrh	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	1c9a      	adds	r2, r3, #2
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10e      	bne.n	80054d0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80054c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff ffb8 	bl	8005440 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ea:	b292      	uxth	r2, r2
 80054ec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f2:	1c9a      	adds	r2, r3, #2
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10e      	bne.n	800552e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800551e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff ff93 	bl	8005454 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800552e:	bf00      	nop
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b086      	sub	sp, #24
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b04      	cmp	r3, #4
 8005550:	d13a      	bne.n	80055c8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b01      	cmp	r3, #1
 800555a:	d109      	bne.n	8005570 <I2S_IRQHandler+0x3a>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005566:	2b40      	cmp	r3, #64	@ 0x40
 8005568:	d102      	bne.n	8005570 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff ffb4 	bl	80054d8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005576:	2b40      	cmp	r3, #64	@ 0x40
 8005578:	d126      	bne.n	80055c8 <I2S_IRQHandler+0x92>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b20      	cmp	r3, #32
 8005586:	d11f      	bne.n	80055c8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005596:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005598:	2300      	movs	r3, #0
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ba:	f043 0202 	orr.w	r2, r3, #2
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ff50 	bl	8005468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d136      	bne.n	8005642 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d109      	bne.n	80055f2 <I2S_IRQHandler+0xbc>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e8:	2b80      	cmp	r3, #128	@ 0x80
 80055ea:	d102      	bne.n	80055f2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff ff45 	bl	800547c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d122      	bne.n	8005642 <I2S_IRQHandler+0x10c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b20      	cmp	r3, #32
 8005608:	d11b      	bne.n	8005642 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005618:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005634:	f043 0204 	orr.w	r2, r3, #4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff ff13 	bl	8005468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005642:	bf00      	nop
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a92      	ldr	r2, [pc, #584]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d101      	bne.n	800566a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005666:	4b92      	ldr	r3, [pc, #584]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005668:	e001      	b.n	800566e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800566a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a8b      	ldr	r2, [pc, #556]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d101      	bne.n	8005688 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005684:	4b8a      	ldr	r3, [pc, #552]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005686:	e001      	b.n	800568c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005688:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005698:	d004      	beq.n	80056a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 8099 	bne.w	80057d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d107      	bne.n	80056be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f925 	bl	8005908 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d107      	bne.n	80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f9c8 	bl	8005a68 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056de:	2b40      	cmp	r3, #64	@ 0x40
 80056e0:	d13a      	bne.n	8005758 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d035      	beq.n	8005758 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a6e      	ldr	r2, [pc, #440]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d101      	bne.n	80056fa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80056f6:	4b6e      	ldr	r3, [pc, #440]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056f8:	e001      	b.n	80056fe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80056fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4969      	ldr	r1, [pc, #420]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005706:	428b      	cmp	r3, r1
 8005708:	d101      	bne.n	800570e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800570a:	4b69      	ldr	r3, [pc, #420]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800570c:	e001      	b.n	8005712 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800570e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005712:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005716:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005726:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574a:	f043 0202 	orr.w	r2, r3, #2
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff fe88 	bl	8005468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b08      	cmp	r3, #8
 8005760:	f040 80c3 	bne.w	80058ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80bd 	beq.w	80058ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800577e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a49      	ldr	r2, [pc, #292]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d101      	bne.n	800578e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800578a:	4b49      	ldr	r3, [pc, #292]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800578c:	e001      	b.n	8005792 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800578e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4944      	ldr	r1, [pc, #272]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800579a:	428b      	cmp	r3, r1
 800579c:	d101      	bne.n	80057a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800579e:	4b44      	ldr	r3, [pc, #272]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057a0:	e001      	b.n	80057a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80057a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057aa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80057ac:	2300      	movs	r3, #0
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	60bb      	str	r3, [r7, #8]
 80057b8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c6:	f043 0204 	orr.w	r2, r3, #4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff fe4a 	bl	8005468 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80057d4:	e089      	b.n	80058ea <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d107      	bne.n	80057f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f8be 	bl	800596c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d107      	bne.n	800580a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f8fd 	bl	8005a04 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005810:	2b40      	cmp	r3, #64	@ 0x40
 8005812:	d12f      	bne.n	8005874 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d02a      	beq.n	8005874 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800582c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1e      	ldr	r2, [pc, #120]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d101      	bne.n	800583c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005838:	4b1d      	ldr	r3, [pc, #116]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800583a:	e001      	b.n	8005840 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800583c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4919      	ldr	r1, [pc, #100]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005848:	428b      	cmp	r3, r1
 800584a:	d101      	bne.n	8005850 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800584c:	4b18      	ldr	r3, [pc, #96]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800584e:	e001      	b.n	8005854 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005850:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005854:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005858:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005866:	f043 0202 	orr.w	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff fdfa 	bl	8005468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b08      	cmp	r3, #8
 800587c:	d136      	bne.n	80058ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d031      	beq.n	80058ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a07      	ldr	r2, [pc, #28]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d101      	bne.n	8005896 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005892:	4b07      	ldr	r3, [pc, #28]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005894:	e001      	b.n	800589a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005896:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4902      	ldr	r1, [pc, #8]	@ (80058ac <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058a2:	428b      	cmp	r3, r1
 80058a4:	d106      	bne.n	80058b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80058a6:	4b02      	ldr	r3, [pc, #8]	@ (80058b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058a8:	e006      	b.n	80058b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80058aa:	bf00      	nop
 80058ac:	40003800 	.word	0x40003800
 80058b0:	40003400 	.word	0x40003400
 80058b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058bc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058da:	f043 0204 	orr.w	r2, r3, #4
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fdc0 	bl	8005468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058e8:	e000      	b.n	80058ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80058ea:	bf00      	nop
}
 80058ec:	bf00      	nop
 80058ee:	3720      	adds	r7, #32
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005914:	1c99      	adds	r1, r3, #2
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6251      	str	r1, [r2, #36]	@ 0x24
 800591a:	881a      	ldrh	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d113      	bne.n	8005962 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005948:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff ffc9 	bl	80058f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	1c99      	adds	r1, r3, #2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6251      	str	r1, [r2, #36]	@ 0x24
 800597e:	8819      	ldrh	r1, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1d      	ldr	r2, [pc, #116]	@ (80059fc <I2SEx_TxISR_I2SExt+0x90>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d101      	bne.n	800598e <I2SEx_TxISR_I2SExt+0x22>
 800598a:	4b1d      	ldr	r3, [pc, #116]	@ (8005a00 <I2SEx_TxISR_I2SExt+0x94>)
 800598c:	e001      	b.n	8005992 <I2SEx_TxISR_I2SExt+0x26>
 800598e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005992:	460a      	mov	r2, r1
 8005994:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d121      	bne.n	80059f2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a12      	ldr	r2, [pc, #72]	@ (80059fc <I2SEx_TxISR_I2SExt+0x90>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d101      	bne.n	80059bc <I2SEx_TxISR_I2SExt+0x50>
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <I2SEx_TxISR_I2SExt+0x94>)
 80059ba:	e001      	b.n	80059c0 <I2SEx_TxISR_I2SExt+0x54>
 80059bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	490d      	ldr	r1, [pc, #52]	@ (80059fc <I2SEx_TxISR_I2SExt+0x90>)
 80059c8:	428b      	cmp	r3, r1
 80059ca:	d101      	bne.n	80059d0 <I2SEx_TxISR_I2SExt+0x64>
 80059cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a00 <I2SEx_TxISR_I2SExt+0x94>)
 80059ce:	e001      	b.n	80059d4 <I2SEx_TxISR_I2SExt+0x68>
 80059d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff ff81 	bl	80058f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40003800 	.word	0x40003800
 8005a00:	40003400 	.word	0x40003400

08005a04 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68d8      	ldr	r0, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	1c99      	adds	r1, r3, #2
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005a1c:	b282      	uxth	r2, r0
 8005a1e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d113      	bne.n	8005a60 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a46:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7ff ff4a 	bl	80058f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a20      	ldr	r2, [pc, #128]	@ (8005af8 <I2SEx_RxISR_I2SExt+0x90>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d101      	bne.n	8005a7e <I2SEx_RxISR_I2SExt+0x16>
 8005a7a:	4b20      	ldr	r3, [pc, #128]	@ (8005afc <I2SEx_RxISR_I2SExt+0x94>)
 8005a7c:	e001      	b.n	8005a82 <I2SEx_RxISR_I2SExt+0x1a>
 8005a7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a82:	68d8      	ldr	r0, [r3, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	1c99      	adds	r1, r3, #2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005a8e:	b282      	uxth	r2, r0
 8005a90:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d121      	bne.n	8005aee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a12      	ldr	r2, [pc, #72]	@ (8005af8 <I2SEx_RxISR_I2SExt+0x90>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d101      	bne.n	8005ab8 <I2SEx_RxISR_I2SExt+0x50>
 8005ab4:	4b11      	ldr	r3, [pc, #68]	@ (8005afc <I2SEx_RxISR_I2SExt+0x94>)
 8005ab6:	e001      	b.n	8005abc <I2SEx_RxISR_I2SExt+0x54>
 8005ab8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	490d      	ldr	r1, [pc, #52]	@ (8005af8 <I2SEx_RxISR_I2SExt+0x90>)
 8005ac4:	428b      	cmp	r3, r1
 8005ac6:	d101      	bne.n	8005acc <I2SEx_RxISR_I2SExt+0x64>
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8005afc <I2SEx_RxISR_I2SExt+0x94>)
 8005aca:	e001      	b.n	8005ad0 <I2SEx_RxISR_I2SExt+0x68>
 8005acc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ad0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ad4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff ff03 	bl	80058f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40003800 	.word	0x40003800
 8005afc:	40003400 	.word	0x40003400

08005b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e267      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d075      	beq.n	8005c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b1e:	4b88      	ldr	r3, [pc, #544]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 030c 	and.w	r3, r3, #12
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d00c      	beq.n	8005b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b2a:	4b85      	ldr	r3, [pc, #532]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d112      	bne.n	8005b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b36:	4b82      	ldr	r3, [pc, #520]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b42:	d10b      	bne.n	8005b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b44:	4b7e      	ldr	r3, [pc, #504]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d05b      	beq.n	8005c08 <HAL_RCC_OscConfig+0x108>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d157      	bne.n	8005c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e242      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b64:	d106      	bne.n	8005b74 <HAL_RCC_OscConfig+0x74>
 8005b66:	4b76      	ldr	r3, [pc, #472]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a75      	ldr	r2, [pc, #468]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	e01d      	b.n	8005bb0 <HAL_RCC_OscConfig+0xb0>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b7c:	d10c      	bne.n	8005b98 <HAL_RCC_OscConfig+0x98>
 8005b7e:	4b70      	ldr	r3, [pc, #448]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a6f      	ldr	r2, [pc, #444]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a6c      	ldr	r2, [pc, #432]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	e00b      	b.n	8005bb0 <HAL_RCC_OscConfig+0xb0>
 8005b98:	4b69      	ldr	r3, [pc, #420]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a68      	ldr	r2, [pc, #416]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	4b66      	ldr	r3, [pc, #408]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a65      	ldr	r2, [pc, #404]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d013      	beq.n	8005be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb8:	f7fc fa66 	bl	8002088 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bc0:	f7fc fa62 	bl	8002088 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b64      	cmp	r3, #100	@ 0x64
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e207      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f0      	beq.n	8005bc0 <HAL_RCC_OscConfig+0xc0>
 8005bde:	e014      	b.n	8005c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be0:	f7fc fa52 	bl	8002088 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005be8:	f7fc fa4e 	bl	8002088 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b64      	cmp	r3, #100	@ 0x64
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e1f3      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bfa:	4b51      	ldr	r3, [pc, #324]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0xe8>
 8005c06:	e000      	b.n	8005c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d063      	beq.n	8005cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c16:	4b4a      	ldr	r3, [pc, #296]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 030c 	and.w	r3, r3, #12
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00b      	beq.n	8005c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c22:	4b47      	ldr	r3, [pc, #284]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c2a:	2b08      	cmp	r3, #8
 8005c2c:	d11c      	bne.n	8005c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c2e:	4b44      	ldr	r3, [pc, #272]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d116      	bne.n	8005c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c3a:	4b41      	ldr	r3, [pc, #260]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <HAL_RCC_OscConfig+0x152>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d001      	beq.n	8005c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e1c7      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c52:	4b3b      	ldr	r3, [pc, #236]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4937      	ldr	r1, [pc, #220]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c66:	e03a      	b.n	8005cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d020      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c70:	4b34      	ldr	r3, [pc, #208]	@ (8005d44 <HAL_RCC_OscConfig+0x244>)
 8005c72:	2201      	movs	r2, #1
 8005c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c76:	f7fc fa07 	bl	8002088 <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c7c:	e008      	b.n	8005c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c7e:	f7fc fa03 	bl	8002088 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e1a8      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c90:	4b2b      	ldr	r3, [pc, #172]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0f0      	beq.n	8005c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c9c:	4b28      	ldr	r3, [pc, #160]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	4925      	ldr	r1, [pc, #148]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	600b      	str	r3, [r1, #0]
 8005cb0:	e015      	b.n	8005cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cb2:	4b24      	ldr	r3, [pc, #144]	@ (8005d44 <HAL_RCC_OscConfig+0x244>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb8:	f7fc f9e6 	bl	8002088 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cc0:	f7fc f9e2 	bl	8002088 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e187      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d036      	beq.n	8005d58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d016      	beq.n	8005d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cf2:	4b15      	ldr	r3, [pc, #84]	@ (8005d48 <HAL_RCC_OscConfig+0x248>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf8:	f7fc f9c6 	bl	8002088 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d00:	f7fc f9c2 	bl	8002088 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e167      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d12:	4b0b      	ldr	r3, [pc, #44]	@ (8005d40 <HAL_RCC_OscConfig+0x240>)
 8005d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f0      	beq.n	8005d00 <HAL_RCC_OscConfig+0x200>
 8005d1e:	e01b      	b.n	8005d58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d20:	4b09      	ldr	r3, [pc, #36]	@ (8005d48 <HAL_RCC_OscConfig+0x248>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d26:	f7fc f9af 	bl	8002088 <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d2c:	e00e      	b.n	8005d4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d2e:	f7fc f9ab 	bl	8002088 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d907      	bls.n	8005d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e150      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
 8005d40:	40023800 	.word	0x40023800
 8005d44:	42470000 	.word	0x42470000
 8005d48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d4c:	4b88      	ldr	r3, [pc, #544]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1ea      	bne.n	8005d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8097 	beq.w	8005e94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d66:	2300      	movs	r3, #0
 8005d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d6a:	4b81      	ldr	r3, [pc, #516]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10f      	bne.n	8005d96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d76:	2300      	movs	r3, #0
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	4b7d      	ldr	r3, [pc, #500]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	4a7c      	ldr	r2, [pc, #496]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d86:	4b7a      	ldr	r3, [pc, #488]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d8e:	60bb      	str	r3, [r7, #8]
 8005d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d92:	2301      	movs	r3, #1
 8005d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d96:	4b77      	ldr	r3, [pc, #476]	@ (8005f74 <HAL_RCC_OscConfig+0x474>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d118      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005da2:	4b74      	ldr	r3, [pc, #464]	@ (8005f74 <HAL_RCC_OscConfig+0x474>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a73      	ldr	r2, [pc, #460]	@ (8005f74 <HAL_RCC_OscConfig+0x474>)
 8005da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dae:	f7fc f96b 	bl	8002088 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db6:	f7fc f967 	bl	8002088 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e10c      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc8:	4b6a      	ldr	r3, [pc, #424]	@ (8005f74 <HAL_RCC_OscConfig+0x474>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0f0      	beq.n	8005db6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d106      	bne.n	8005dea <HAL_RCC_OscConfig+0x2ea>
 8005ddc:	4b64      	ldr	r3, [pc, #400]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de0:	4a63      	ldr	r2, [pc, #396]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005de8:	e01c      	b.n	8005e24 <HAL_RCC_OscConfig+0x324>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	d10c      	bne.n	8005e0c <HAL_RCC_OscConfig+0x30c>
 8005df2:	4b5f      	ldr	r3, [pc, #380]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df6:	4a5e      	ldr	r2, [pc, #376]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005df8:	f043 0304 	orr.w	r3, r3, #4
 8005dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dfe:	4b5c      	ldr	r3, [pc, #368]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e02:	4a5b      	ldr	r2, [pc, #364]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e0a:	e00b      	b.n	8005e24 <HAL_RCC_OscConfig+0x324>
 8005e0c:	4b58      	ldr	r3, [pc, #352]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e10:	4a57      	ldr	r2, [pc, #348]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e12:	f023 0301 	bic.w	r3, r3, #1
 8005e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e18:	4b55      	ldr	r3, [pc, #340]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1c:	4a54      	ldr	r2, [pc, #336]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e1e:	f023 0304 	bic.w	r3, r3, #4
 8005e22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d015      	beq.n	8005e58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2c:	f7fc f92c 	bl	8002088 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e32:	e00a      	b.n	8005e4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e34:	f7fc f928 	bl	8002088 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e0cb      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e4a:	4b49      	ldr	r3, [pc, #292]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0ee      	beq.n	8005e34 <HAL_RCC_OscConfig+0x334>
 8005e56:	e014      	b.n	8005e82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e58:	f7fc f916 	bl	8002088 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e60:	f7fc f912 	bl	8002088 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e0b5      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e76:	4b3e      	ldr	r3, [pc, #248]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1ee      	bne.n	8005e60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d105      	bne.n	8005e94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e88:	4b39      	ldr	r3, [pc, #228]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8c:	4a38      	ldr	r2, [pc, #224]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80a1 	beq.w	8005fe0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e9e:	4b34      	ldr	r3, [pc, #208]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 030c 	and.w	r3, r3, #12
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d05c      	beq.n	8005f64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d141      	bne.n	8005f36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb2:	4b31      	ldr	r3, [pc, #196]	@ (8005f78 <HAL_RCC_OscConfig+0x478>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb8:	f7fc f8e6 	bl	8002088 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec0:	f7fc f8e2 	bl	8002088 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e087      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ed2:	4b27      	ldr	r3, [pc, #156]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69da      	ldr	r2, [r3, #28]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	019b      	lsls	r3, r3, #6
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef4:	085b      	lsrs	r3, r3, #1
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	041b      	lsls	r3, r3, #16
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f00:	061b      	lsls	r3, r3, #24
 8005f02:	491b      	ldr	r1, [pc, #108]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f08:	4b1b      	ldr	r3, [pc, #108]	@ (8005f78 <HAL_RCC_OscConfig+0x478>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0e:	f7fc f8bb 	bl	8002088 <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f16:	f7fc f8b7 	bl	8002088 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e05c      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f28:	4b11      	ldr	r3, [pc, #68]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0f0      	beq.n	8005f16 <HAL_RCC_OscConfig+0x416>
 8005f34:	e054      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f36:	4b10      	ldr	r3, [pc, #64]	@ (8005f78 <HAL_RCC_OscConfig+0x478>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3c:	f7fc f8a4 	bl	8002088 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f44:	f7fc f8a0 	bl	8002088 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e045      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f56:	4b06      	ldr	r3, [pc, #24]	@ (8005f70 <HAL_RCC_OscConfig+0x470>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f0      	bne.n	8005f44 <HAL_RCC_OscConfig+0x444>
 8005f62:	e03d      	b.n	8005fe0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d107      	bne.n	8005f7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e038      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
 8005f70:	40023800 	.word	0x40023800
 8005f74:	40007000 	.word	0x40007000
 8005f78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fec <HAL_RCC_OscConfig+0x4ec>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d028      	beq.n	8005fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d121      	bne.n	8005fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d11a      	bne.n	8005fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005fac:	4013      	ands	r3, r2
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005fb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d111      	bne.n	8005fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc2:	085b      	lsrs	r3, r3, #1
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d107      	bne.n	8005fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d001      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	40023800 	.word	0x40023800

08005ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e0cc      	b.n	800619e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006004:	4b68      	ldr	r3, [pc, #416]	@ (80061a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d90c      	bls.n	800602c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006012:	4b65      	ldr	r3, [pc, #404]	@ (80061a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800601a:	4b63      	ldr	r3, [pc, #396]	@ (80061a8 <HAL_RCC_ClockConfig+0x1b8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d001      	beq.n	800602c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e0b8      	b.n	800619e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d020      	beq.n	800607a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d005      	beq.n	8006050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006044:	4b59      	ldr	r3, [pc, #356]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	4a58      	ldr	r2, [pc, #352]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800604e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800605c:	4b53      	ldr	r3, [pc, #332]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	4a52      	ldr	r2, [pc, #328]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006068:	4b50      	ldr	r3, [pc, #320]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	494d      	ldr	r1, [pc, #308]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	4313      	orrs	r3, r2
 8006078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d044      	beq.n	8006110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d107      	bne.n	800609e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800608e:	4b47      	ldr	r3, [pc, #284]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d119      	bne.n	80060ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e07f      	b.n	800619e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d003      	beq.n	80060ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d107      	bne.n	80060be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ae:	4b3f      	ldr	r3, [pc, #252]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d109      	bne.n	80060ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e06f      	b.n	800619e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060be:	4b3b      	ldr	r3, [pc, #236]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e067      	b.n	800619e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060ce:	4b37      	ldr	r3, [pc, #220]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f023 0203 	bic.w	r2, r3, #3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	4934      	ldr	r1, [pc, #208]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060e0:	f7fb ffd2 	bl	8002088 <HAL_GetTick>
 80060e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060e6:	e00a      	b.n	80060fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060e8:	f7fb ffce 	bl	8002088 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e04f      	b.n	800619e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060fe:	4b2b      	ldr	r3, [pc, #172]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 020c 	and.w	r2, r3, #12
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	429a      	cmp	r2, r3
 800610e:	d1eb      	bne.n	80060e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006110:	4b25      	ldr	r3, [pc, #148]	@ (80061a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d20c      	bcs.n	8006138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800611e:	4b22      	ldr	r3, [pc, #136]	@ (80061a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006126:	4b20      	ldr	r3, [pc, #128]	@ (80061a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d001      	beq.n	8006138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e032      	b.n	800619e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b00      	cmp	r3, #0
 8006142:	d008      	beq.n	8006156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006144:	4b19      	ldr	r3, [pc, #100]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	4916      	ldr	r1, [pc, #88]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006152:	4313      	orrs	r3, r2
 8006154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006162:	4b12      	ldr	r3, [pc, #72]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	490e      	ldr	r1, [pc, #56]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 8006172:	4313      	orrs	r3, r2
 8006174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006176:	f000 f821 	bl	80061bc <HAL_RCC_GetSysClockFreq>
 800617a:	4602      	mov	r2, r0
 800617c:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <HAL_RCC_ClockConfig+0x1bc>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	490a      	ldr	r1, [pc, #40]	@ (80061b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006188:	5ccb      	ldrb	r3, [r1, r3]
 800618a:	fa22 f303 	lsr.w	r3, r2, r3
 800618e:	4a09      	ldr	r2, [pc, #36]	@ (80061b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006192:	4b09      	ldr	r3, [pc, #36]	@ (80061b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f7fb ff32 	bl	8002000 <HAL_InitTick>

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40023c00 	.word	0x40023c00
 80061ac:	40023800 	.word	0x40023800
 80061b0:	0800b490 	.word	0x0800b490
 80061b4:	20000010 	.word	0x20000010
 80061b8:	20000014 	.word	0x20000014

080061bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061c0:	b094      	sub	sp, #80	@ 0x50
 80061c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80061c8:	2300      	movs	r3, #0
 80061ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061cc:	2300      	movs	r3, #0
 80061ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061d4:	4b79      	ldr	r3, [pc, #484]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x200>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 030c 	and.w	r3, r3, #12
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d00d      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0x40>
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	f200 80e1 	bhi.w	80063a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <HAL_RCC_GetSysClockFreq+0x34>
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d003      	beq.n	80061f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80061ee:	e0db      	b.n	80063a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061f0:	4b73      	ldr	r3, [pc, #460]	@ (80063c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80061f2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80061f4:	e0db      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061f6:	4b73      	ldr	r3, [pc, #460]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80061f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061fa:	e0d8      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061fc:	4b6f      	ldr	r3, [pc, #444]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x200>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006204:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006206:	4b6d      	ldr	r3, [pc, #436]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d063      	beq.n	80062da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006212:	4b6a      	ldr	r3, [pc, #424]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	099b      	lsrs	r3, r3, #6
 8006218:	2200      	movs	r2, #0
 800621a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800621c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006224:	633b      	str	r3, [r7, #48]	@ 0x30
 8006226:	2300      	movs	r3, #0
 8006228:	637b      	str	r3, [r7, #52]	@ 0x34
 800622a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800622e:	4622      	mov	r2, r4
 8006230:	462b      	mov	r3, r5
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	f04f 0100 	mov.w	r1, #0
 800623a:	0159      	lsls	r1, r3, #5
 800623c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006240:	0150      	lsls	r0, r2, #5
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4621      	mov	r1, r4
 8006248:	1a51      	subs	r1, r2, r1
 800624a:	6139      	str	r1, [r7, #16]
 800624c:	4629      	mov	r1, r5
 800624e:	eb63 0301 	sbc.w	r3, r3, r1
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006260:	4659      	mov	r1, fp
 8006262:	018b      	lsls	r3, r1, #6
 8006264:	4651      	mov	r1, sl
 8006266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800626a:	4651      	mov	r1, sl
 800626c:	018a      	lsls	r2, r1, #6
 800626e:	4651      	mov	r1, sl
 8006270:	ebb2 0801 	subs.w	r8, r2, r1
 8006274:	4659      	mov	r1, fp
 8006276:	eb63 0901 	sbc.w	r9, r3, r1
 800627a:	f04f 0200 	mov.w	r2, #0
 800627e:	f04f 0300 	mov.w	r3, #0
 8006282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800628a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800628e:	4690      	mov	r8, r2
 8006290:	4699      	mov	r9, r3
 8006292:	4623      	mov	r3, r4
 8006294:	eb18 0303 	adds.w	r3, r8, r3
 8006298:	60bb      	str	r3, [r7, #8]
 800629a:	462b      	mov	r3, r5
 800629c:	eb49 0303 	adc.w	r3, r9, r3
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	f04f 0300 	mov.w	r3, #0
 80062aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062ae:	4629      	mov	r1, r5
 80062b0:	024b      	lsls	r3, r1, #9
 80062b2:	4621      	mov	r1, r4
 80062b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062b8:	4621      	mov	r1, r4
 80062ba:	024a      	lsls	r2, r1, #9
 80062bc:	4610      	mov	r0, r2
 80062be:	4619      	mov	r1, r3
 80062c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062c2:	2200      	movs	r2, #0
 80062c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062cc:	f7fa fbc2 	bl	8000a54 <__aeabi_uldivmod>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4613      	mov	r3, r2
 80062d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062d8:	e058      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062da:	4b38      	ldr	r3, [pc, #224]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x200>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	099b      	lsrs	r3, r3, #6
 80062e0:	2200      	movs	r2, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	4611      	mov	r1, r2
 80062e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062ea:	623b      	str	r3, [r7, #32]
 80062ec:	2300      	movs	r3, #0
 80062ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80062f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062f4:	4642      	mov	r2, r8
 80062f6:	464b      	mov	r3, r9
 80062f8:	f04f 0000 	mov.w	r0, #0
 80062fc:	f04f 0100 	mov.w	r1, #0
 8006300:	0159      	lsls	r1, r3, #5
 8006302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006306:	0150      	lsls	r0, r2, #5
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4641      	mov	r1, r8
 800630e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006312:	4649      	mov	r1, r9
 8006314:	eb63 0b01 	sbc.w	fp, r3, r1
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800632c:	ebb2 040a 	subs.w	r4, r2, sl
 8006330:	eb63 050b 	sbc.w	r5, r3, fp
 8006334:	f04f 0200 	mov.w	r2, #0
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	00eb      	lsls	r3, r5, #3
 800633e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006342:	00e2      	lsls	r2, r4, #3
 8006344:	4614      	mov	r4, r2
 8006346:	461d      	mov	r5, r3
 8006348:	4643      	mov	r3, r8
 800634a:	18e3      	adds	r3, r4, r3
 800634c:	603b      	str	r3, [r7, #0]
 800634e:	464b      	mov	r3, r9
 8006350:	eb45 0303 	adc.w	r3, r5, r3
 8006354:	607b      	str	r3, [r7, #4]
 8006356:	f04f 0200 	mov.w	r2, #0
 800635a:	f04f 0300 	mov.w	r3, #0
 800635e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006362:	4629      	mov	r1, r5
 8006364:	028b      	lsls	r3, r1, #10
 8006366:	4621      	mov	r1, r4
 8006368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800636c:	4621      	mov	r1, r4
 800636e:	028a      	lsls	r2, r1, #10
 8006370:	4610      	mov	r0, r2
 8006372:	4619      	mov	r1, r3
 8006374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006376:	2200      	movs	r2, #0
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	61fa      	str	r2, [r7, #28]
 800637c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006380:	f7fa fb68 	bl	8000a54 <__aeabi_uldivmod>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4613      	mov	r3, r2
 800638a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800638c:	4b0b      	ldr	r3, [pc, #44]	@ (80063bc <HAL_RCC_GetSysClockFreq+0x200>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	0c1b      	lsrs	r3, r3, #16
 8006392:	f003 0303 	and.w	r3, r3, #3
 8006396:	3301      	adds	r3, #1
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800639c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800639e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063a6:	e002      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063a8:	4b05      	ldr	r3, [pc, #20]	@ (80063c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80063aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3750      	adds	r7, #80	@ 0x50
 80063b4:	46bd      	mov	sp, r7
 80063b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ba:	bf00      	nop
 80063bc:	40023800 	.word	0x40023800
 80063c0:	00f42400 	.word	0x00f42400
 80063c4:	007a1200 	.word	0x007a1200

080063c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063cc:	4b03      	ldr	r3, [pc, #12]	@ (80063dc <HAL_RCC_GetHCLKFreq+0x14>)
 80063ce:	681b      	ldr	r3, [r3, #0]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	20000010 	.word	0x20000010

080063e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063e4:	f7ff fff0 	bl	80063c8 <HAL_RCC_GetHCLKFreq>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b05      	ldr	r3, [pc, #20]	@ (8006400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	0a9b      	lsrs	r3, r3, #10
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	4903      	ldr	r1, [pc, #12]	@ (8006404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063f6:	5ccb      	ldrb	r3, [r1, r3]
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40023800 	.word	0x40023800
 8006404:	0800b4a0 	.word	0x0800b4a0

08006408 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d105      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800642c:	2b00      	cmp	r3, #0
 800642e:	d035      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006430:	4b62      	ldr	r3, [pc, #392]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006436:	f7fb fe27 	bl	8002088 <HAL_GetTick>
 800643a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800643c:	e008      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800643e:	f7fb fe23 	bl	8002088 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e0b0      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006450:	4b5b      	ldr	r3, [pc, #364]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f0      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	019a      	lsls	r2, r3, #6
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	071b      	lsls	r3, r3, #28
 8006468:	4955      	ldr	r1, [pc, #340]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006470:	4b52      	ldr	r3, [pc, #328]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006472:	2201      	movs	r2, #1
 8006474:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006476:	f7fb fe07 	bl	8002088 <HAL_GetTick>
 800647a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800647c:	e008      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800647e:	f7fb fe03 	bl	8002088 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d901      	bls.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e090      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006490:	4b4b      	ldr	r3, [pc, #300]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0f0      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 8083 	beq.w	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	4b44      	ldr	r3, [pc, #272]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b2:	4a43      	ldr	r2, [pc, #268]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80064ba:	4b41      	ldr	r3, [pc, #260]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80064c6:	4b3f      	ldr	r3, [pc, #252]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a3e      	ldr	r2, [pc, #248]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064d2:	f7fb fdd9 	bl	8002088 <HAL_GetTick>
 80064d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064d8:	e008      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064da:	f7fb fdd5 	bl	8002088 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d901      	bls.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e062      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064ec:	4b35      	ldr	r3, [pc, #212]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0f0      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064f8:	4b31      	ldr	r3, [pc, #196]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006500:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d02f      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	429a      	cmp	r2, r3
 8006514:	d028      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006516:	4b2a      	ldr	r3, [pc, #168]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800651e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006520:	4b29      	ldr	r3, [pc, #164]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006522:	2201      	movs	r2, #1
 8006524:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006526:	4b28      	ldr	r3, [pc, #160]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800652c:	4a24      	ldr	r2, [pc, #144]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006532:	4b23      	ldr	r3, [pc, #140]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b01      	cmp	r3, #1
 800653c:	d114      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800653e:	f7fb fda3 	bl	8002088 <HAL_GetTick>
 8006542:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006544:	e00a      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006546:	f7fb fd9f 	bl	8002088 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006554:	4293      	cmp	r3, r2
 8006556:	d901      	bls.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e02a      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800655c:	4b18      	ldr	r3, [pc, #96]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800655e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0ee      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006570:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006574:	d10d      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006576:	4b12      	ldr	r3, [pc, #72]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658a:	490d      	ldr	r1, [pc, #52]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800658c:	4313      	orrs	r3, r2
 800658e:	608b      	str	r3, [r1, #8]
 8006590:	e005      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006592:	4b0b      	ldr	r3, [pc, #44]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	4a0a      	ldr	r2, [pc, #40]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006598:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800659c:	6093      	str	r3, [r2, #8]
 800659e:	4b08      	ldr	r3, [pc, #32]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065aa:	4905      	ldr	r1, [pc, #20]	@ (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	42470068 	.word	0x42470068
 80065c0:	40023800 	.word	0x40023800
 80065c4:	40007000 	.word	0x40007000
 80065c8:	42470e40 	.word	0x42470e40

080065cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d13f      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80065ea:	4b24      	ldr	r3, [pc, #144]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d006      	beq.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006600:	d12f      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006602:	4b1f      	ldr	r3, [pc, #124]	@ (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006604:	617b      	str	r3, [r7, #20]
          break;
 8006606:	e02f      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006608:	4b1c      	ldr	r3, [pc, #112]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006610:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006614:	d108      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006616:	4b19      	ldr	r3, [pc, #100]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800661e:	4a19      	ldr	r2, [pc, #100]	@ (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006620:	fbb2 f3f3 	udiv	r3, r2, r3
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	e007      	b.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006628:	4b14      	ldr	r3, [pc, #80]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006630:	4a15      	ldr	r2, [pc, #84]	@ (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006632:	fbb2 f3f3 	udiv	r3, r2, r3
 8006636:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006638:	4b10      	ldr	r3, [pc, #64]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800663a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800663e:	099b      	lsrs	r3, r3, #6
 8006640:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	fb02 f303 	mul.w	r3, r2, r3
 800664a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800664c:	4b0b      	ldr	r3, [pc, #44]	@ (800667c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800664e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006652:	0f1b      	lsrs	r3, r3, #28
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	fbb2 f3f3 	udiv	r3, r2, r3
 800665e:	617b      	str	r3, [r7, #20]
          break;
 8006660:	e002      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
          break;
 8006666:	bf00      	nop
        }
      }
      break;
 8006668:	e000      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 800666a:	bf00      	nop
    }
  }
  return frequency;
 800666c:	697b      	ldr	r3, [r7, #20]
}
 800666e:	4618      	mov	r0, r3
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40023800 	.word	0x40023800
 8006680:	00bb8000 	.word	0x00bb8000
 8006684:	007a1200 	.word	0x007a1200
 8006688:	00f42400 	.word	0x00f42400

0800668c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e07b      	b.n	8006796 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d108      	bne.n	80066b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066ae:	d009      	beq.n	80066c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	61da      	str	r2, [r3, #28]
 80066b6:	e005      	b.n	80066c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fb fb52 	bl	8001d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006748:	ea42 0103 	orr.w	r1, r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006750:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	0c1b      	lsrs	r3, r3, #16
 8006762:	f003 0104 	and.w	r1, r3, #4
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676a:	f003 0210 	and.w	r2, r3, #16
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006784:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b088      	sub	sp, #32
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	60f8      	str	r0, [r7, #12]
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	603b      	str	r3, [r7, #0]
 80067aa:	4613      	mov	r3, r2
 80067ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_SPI_Transmit+0x22>
 80067bc:	2302      	movs	r3, #2
 80067be:	e12d      	b.n	8006a1c <HAL_SPI_Transmit+0x27e>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067c8:	f7fb fc5e 	bl	8002088 <HAL_GetTick>
 80067cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d002      	beq.n	80067e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067de:	2302      	movs	r3, #2
 80067e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067e2:	e116      	b.n	8006a12 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <HAL_SPI_Transmit+0x52>
 80067ea:	88fb      	ldrh	r3, [r7, #6]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d102      	bne.n	80067f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067f4:	e10d      	b.n	8006a12 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2203      	movs	r2, #3
 80067fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	88fa      	ldrh	r2, [r7, #6]
 800680e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	88fa      	ldrh	r2, [r7, #6]
 8006814:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800683c:	d10f      	bne.n	800685e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800684c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800685c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006868:	2b40      	cmp	r3, #64	@ 0x40
 800686a:	d007      	beq.n	800687c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800687a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006884:	d14f      	bne.n	8006926 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <HAL_SPI_Transmit+0xf6>
 800688e:	8afb      	ldrh	r3, [r7, #22]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d142      	bne.n	800691a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006898:	881a      	ldrh	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a4:	1c9a      	adds	r2, r3, #2
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068b8:	e02f      	b.n	800691a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d112      	bne.n	80068ee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068cc:	881a      	ldrh	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d8:	1c9a      	adds	r2, r3, #2
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068ec:	e015      	b.n	800691a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068ee:	f7fb fbcb 	bl	8002088 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d803      	bhi.n	8006906 <HAL_SPI_Transmit+0x168>
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006904:	d102      	bne.n	800690c <HAL_SPI_Transmit+0x16e>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d106      	bne.n	800691a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006918:	e07b      	b.n	8006a12 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1ca      	bne.n	80068ba <HAL_SPI_Transmit+0x11c>
 8006924:	e050      	b.n	80069c8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <HAL_SPI_Transmit+0x196>
 800692e:	8afb      	ldrh	r3, [r7, #22]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d144      	bne.n	80069be <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	330c      	adds	r3, #12
 800693e:	7812      	ldrb	r2, [r2, #0]
 8006940:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800695a:	e030      	b.n	80069be <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b02      	cmp	r3, #2
 8006968:	d113      	bne.n	8006992 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	330c      	adds	r3, #12
 8006974:	7812      	ldrb	r2, [r2, #0]
 8006976:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006986:	b29b      	uxth	r3, r3
 8006988:	3b01      	subs	r3, #1
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006990:	e015      	b.n	80069be <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006992:	f7fb fb79 	bl	8002088 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d803      	bhi.n	80069aa <HAL_SPI_Transmit+0x20c>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a8:	d102      	bne.n	80069b0 <HAL_SPI_Transmit+0x212>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d106      	bne.n	80069be <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80069bc:	e029      	b.n	8006a12 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1c9      	bne.n	800695c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 fbdf 	bl	8007190 <SPI_EndRxTxTransaction>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069e6:	2300      	movs	r3, #0
 80069e8:	613b      	str	r3, [r7, #16]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	613b      	str	r3, [r7, #16]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e003      	b.n	8006a12 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006a1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3720      	adds	r7, #32
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	4613      	mov	r3, r2
 8006a32:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d002      	beq.n	8006a4a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006a44:	2302      	movs	r3, #2
 8006a46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a48:	e0fb      	b.n	8006c42 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a52:	d112      	bne.n	8006a7a <HAL_SPI_Receive+0x56>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10e      	bne.n	8006a7a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2204      	movs	r2, #4
 8006a60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a64:	88fa      	ldrh	r2, [r7, #6]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f8ef 	bl	8006c54 <HAL_SPI_TransmitReceive>
 8006a76:	4603      	mov	r3, r0
 8006a78:	e0e8      	b.n	8006c4c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_SPI_Receive+0x64>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e0e1      	b.n	8006c4c <HAL_SPI_Receive+0x228>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a90:	f7fb fafa 	bl	8002088 <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <HAL_SPI_Receive+0x7e>
 8006a9c:	88fb      	ldrh	r3, [r7, #6]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d102      	bne.n	8006aa8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006aa6:	e0cc      	b.n	8006c42 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2204      	movs	r2, #4
 8006aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	88fa      	ldrh	r2, [r7, #6]
 8006ac0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	88fa      	ldrh	r2, [r7, #6]
 8006ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006aee:	d10f      	bne.n	8006b10 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006afe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b0e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b1a:	2b40      	cmp	r3, #64	@ 0x40
 8006b1c:	d007      	beq.n	8006b2e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d16a      	bne.n	8006c0c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b36:	e032      	b.n	8006b9e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d115      	bne.n	8006b72 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f103 020c 	add.w	r2, r3, #12
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b52:	7812      	ldrb	r2, [r2, #0]
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b70:	e015      	b.n	8006b9e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b72:	f7fb fa89 	bl	8002088 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d803      	bhi.n	8006b8a <HAL_SPI_Receive+0x166>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d102      	bne.n	8006b90 <HAL_SPI_Receive+0x16c>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d106      	bne.n	8006b9e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006b9c:	e051      	b.n	8006c42 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1c7      	bne.n	8006b38 <HAL_SPI_Receive+0x114>
 8006ba8:	e035      	b.n	8006c16 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d113      	bne.n	8006be0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc2:	b292      	uxth	r2, r2
 8006bc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bca:	1c9a      	adds	r2, r3, #2
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bde:	e015      	b.n	8006c0c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006be0:	f7fb fa52 	bl	8002088 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d803      	bhi.n	8006bf8 <HAL_SPI_Receive+0x1d4>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf6:	d102      	bne.n	8006bfe <HAL_SPI_Receive+0x1da>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d106      	bne.n	8006c0c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006c0a:	e01a      	b.n	8006c42 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1c9      	bne.n	8006baa <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 fa52 	bl	80070c4 <SPI_EndRxTransaction>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	75fb      	strb	r3, [r7, #23]
 8006c38:	e003      	b.n	8006c42 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08c      	sub	sp, #48	@ 0x30
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c62:	2301      	movs	r3, #1
 8006c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_SPI_TransmitReceive+0x26>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e198      	b.n	8006fac <HAL_SPI_TransmitReceive+0x358>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c82:	f7fb fa01 	bl	8002088 <HAL_GetTick>
 8006c86:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006c98:	887b      	ldrh	r3, [r7, #2]
 8006c9a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d00f      	beq.n	8006cc4 <HAL_SPI_TransmitReceive+0x70>
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006caa:	d107      	bne.n	8006cbc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d103      	bne.n	8006cbc <HAL_SPI_TransmitReceive+0x68>
 8006cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d003      	beq.n	8006cc4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006cc2:	e16d      	b.n	8006fa0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_SPI_TransmitReceive+0x82>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <HAL_SPI_TransmitReceive+0x82>
 8006cd0:	887b      	ldrh	r3, [r7, #2]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d103      	bne.n	8006cde <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006cdc:	e160      	b.n	8006fa0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d003      	beq.n	8006cf2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2205      	movs	r2, #5
 8006cee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	887a      	ldrh	r2, [r7, #2]
 8006d02:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	887a      	ldrh	r2, [r7, #2]
 8006d08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	887a      	ldrh	r2, [r7, #2]
 8006d14:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	887a      	ldrh	r2, [r7, #2]
 8006d1a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d32:	2b40      	cmp	r3, #64	@ 0x40
 8006d34:	d007      	beq.n	8006d46 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d4e:	d17c      	bne.n	8006e4a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <HAL_SPI_TransmitReceive+0x10a>
 8006d58:	8b7b      	ldrh	r3, [r7, #26]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d16a      	bne.n	8006e34 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d62:	881a      	ldrh	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6e:	1c9a      	adds	r2, r3, #2
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d82:	e057      	b.n	8006e34 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d11b      	bne.n	8006dca <HAL_SPI_TransmitReceive+0x176>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d016      	beq.n	8006dca <HAL_SPI_TransmitReceive+0x176>
 8006d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d113      	bne.n	8006dca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da6:	881a      	ldrh	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db2:	1c9a      	adds	r2, r3, #2
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d119      	bne.n	8006e0c <HAL_SPI_TransmitReceive+0x1b8>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d014      	beq.n	8006e0c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dec:	b292      	uxth	r2, r2
 8006dee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df4:	1c9a      	adds	r2, r3, #2
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e0c:	f7fb f93c 	bl	8002088 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d80b      	bhi.n	8006e34 <HAL_SPI_TransmitReceive+0x1e0>
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	d007      	beq.n	8006e34 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006e32:	e0b5      	b.n	8006fa0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1a2      	bne.n	8006d84 <HAL_SPI_TransmitReceive+0x130>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d19d      	bne.n	8006d84 <HAL_SPI_TransmitReceive+0x130>
 8006e48:	e080      	b.n	8006f4c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <HAL_SPI_TransmitReceive+0x204>
 8006e52:	8b7b      	ldrh	r3, [r7, #26]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d16f      	bne.n	8006f38 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	7812      	ldrb	r2, [r2, #0]
 8006e64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e7e:	e05b      	b.n	8006f38 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d11c      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x274>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d017      	beq.n	8006ec8 <HAL_SPI_TransmitReceive+0x274>
 8006e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d114      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	330c      	adds	r3, #12
 8006ea8:	7812      	ldrb	r2, [r2, #0]
 8006eaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d119      	bne.n	8006f0a <HAL_SPI_TransmitReceive+0x2b6>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d014      	beq.n	8006f0a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68da      	ldr	r2, [r3, #12]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f06:	2301      	movs	r3, #1
 8006f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f0a:	f7fb f8bd 	bl	8002088 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d803      	bhi.n	8006f22 <HAL_SPI_TransmitReceive+0x2ce>
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f20:	d102      	bne.n	8006f28 <HAL_SPI_TransmitReceive+0x2d4>
 8006f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d107      	bne.n	8006f38 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006f36:	e033      	b.n	8006fa0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d19e      	bne.n	8006e80 <HAL_SPI_TransmitReceive+0x22c>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d199      	bne.n	8006e80 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 f91d 	bl	8007190 <SPI_EndRxTxTransaction>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d006      	beq.n	8006f6a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006f68:	e01a      	b.n	8006fa0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f96:	e003      	b.n	8006fa0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006fa8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3730      	adds	r7, #48	@ 0x30
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	603b      	str	r3, [r7, #0]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fc4:	f7fb f860 	bl	8002088 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fcc:	1a9b      	subs	r3, r3, r2
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fd4:	f7fb f858 	bl	8002088 <HAL_GetTick>
 8006fd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fda:	4b39      	ldr	r3, [pc, #228]	@ (80070c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	015b      	lsls	r3, r3, #5
 8006fe0:	0d1b      	lsrs	r3, r3, #20
 8006fe2:	69fa      	ldr	r2, [r7, #28]
 8006fe4:	fb02 f303 	mul.w	r3, r2, r3
 8006fe8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fea:	e054      	b.n	8007096 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff2:	d050      	beq.n	8007096 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ff4:	f7fb f848 	bl	8002088 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	429a      	cmp	r2, r3
 8007002:	d902      	bls.n	800700a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d13d      	bne.n	8007086 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007018:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007022:	d111      	bne.n	8007048 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800702c:	d004      	beq.n	8007038 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007036:	d107      	bne.n	8007048 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007046:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007050:	d10f      	bne.n	8007072 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007070:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e017      	b.n	80070b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	3b01      	subs	r3, #1
 8007094:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	4013      	ands	r3, r2
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	bf0c      	ite	eq
 80070a6:	2301      	moveq	r3, #1
 80070a8:	2300      	movne	r3, #0
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d19b      	bne.n	8006fec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3720      	adds	r7, #32
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	20000010 	.word	0x20000010

080070c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af02      	add	r7, sp, #8
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070d8:	d111      	bne.n	80070fe <SPI_EndRxTransaction+0x3a>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070e2:	d004      	beq.n	80070ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ec:	d107      	bne.n	80070fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007106:	d12a      	bne.n	800715e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007110:	d012      	beq.n	8007138 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2200      	movs	r2, #0
 800711a:	2180      	movs	r1, #128	@ 0x80
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f7ff ff49 	bl	8006fb4 <SPI_WaitFlagStateUntilTimeout>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d02d      	beq.n	8007184 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800712c:	f043 0220 	orr.w	r2, r3, #32
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e026      	b.n	8007186 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2200      	movs	r2, #0
 8007140:	2101      	movs	r1, #1
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f7ff ff36 	bl	8006fb4 <SPI_WaitFlagStateUntilTimeout>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d01a      	beq.n	8007184 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007152:	f043 0220 	orr.w	r2, r3, #32
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e013      	b.n	8007186 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	2200      	movs	r2, #0
 8007166:	2101      	movs	r1, #1
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f7ff ff23 	bl	8006fb4 <SPI_WaitFlagStateUntilTimeout>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d007      	beq.n	8007184 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007178:	f043 0220 	orr.w	r2, r3, #32
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e000      	b.n	8007186 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af02      	add	r7, sp, #8
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2201      	movs	r2, #1
 80071a4:	2102      	movs	r1, #2
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f7ff ff04 	bl	8006fb4 <SPI_WaitFlagStateUntilTimeout>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d007      	beq.n	80071c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071b6:	f043 0220 	orr.w	r2, r3, #32
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e032      	b.n	8007228 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80071c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007230 <SPI_EndRxTxTransaction+0xa0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1b      	ldr	r2, [pc, #108]	@ (8007234 <SPI_EndRxTxTransaction+0xa4>)
 80071c8:	fba2 2303 	umull	r2, r3, r2, r3
 80071cc:	0d5b      	lsrs	r3, r3, #21
 80071ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80071d2:	fb02 f303 	mul.w	r3, r2, r3
 80071d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071e0:	d112      	bne.n	8007208 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2200      	movs	r2, #0
 80071ea:	2180      	movs	r1, #128	@ 0x80
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f7ff fee1 	bl	8006fb4 <SPI_WaitFlagStateUntilTimeout>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d016      	beq.n	8007226 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071fc:	f043 0220 	orr.w	r2, r3, #32
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e00f      	b.n	8007228 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	3b01      	subs	r3, #1
 8007212:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800721e:	2b80      	cmp	r3, #128	@ 0x80
 8007220:	d0f2      	beq.n	8007208 <SPI_EndRxTxTransaction+0x78>
 8007222:	e000      	b.n	8007226 <SPI_EndRxTxTransaction+0x96>
        break;
 8007224:	bf00      	nop
  }

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000010 	.word	0x20000010
 8007234:	165e9f81 	.word	0x165e9f81

08007238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e041      	b.n	80072ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d106      	bne.n	8007264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fa fdda 	bl	8001e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3304      	adds	r3, #4
 8007274:	4619      	mov	r1, r3
 8007276:	4610      	mov	r0, r2
 8007278:	f000 f8f4 	bl	8007464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_TIM_ConfigClockSource+0x1c>
 80072ee:	2302      	movs	r3, #2
 80072f0:	e0b4      	b.n	800745c <HAL_TIM_ConfigClockSource+0x186>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2202      	movs	r2, #2
 80072fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007310:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007318:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800732a:	d03e      	beq.n	80073aa <HAL_TIM_ConfigClockSource+0xd4>
 800732c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007330:	f200 8087 	bhi.w	8007442 <HAL_TIM_ConfigClockSource+0x16c>
 8007334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007338:	f000 8086 	beq.w	8007448 <HAL_TIM_ConfigClockSource+0x172>
 800733c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007340:	d87f      	bhi.n	8007442 <HAL_TIM_ConfigClockSource+0x16c>
 8007342:	2b70      	cmp	r3, #112	@ 0x70
 8007344:	d01a      	beq.n	800737c <HAL_TIM_ConfigClockSource+0xa6>
 8007346:	2b70      	cmp	r3, #112	@ 0x70
 8007348:	d87b      	bhi.n	8007442 <HAL_TIM_ConfigClockSource+0x16c>
 800734a:	2b60      	cmp	r3, #96	@ 0x60
 800734c:	d050      	beq.n	80073f0 <HAL_TIM_ConfigClockSource+0x11a>
 800734e:	2b60      	cmp	r3, #96	@ 0x60
 8007350:	d877      	bhi.n	8007442 <HAL_TIM_ConfigClockSource+0x16c>
 8007352:	2b50      	cmp	r3, #80	@ 0x50
 8007354:	d03c      	beq.n	80073d0 <HAL_TIM_ConfigClockSource+0xfa>
 8007356:	2b50      	cmp	r3, #80	@ 0x50
 8007358:	d873      	bhi.n	8007442 <HAL_TIM_ConfigClockSource+0x16c>
 800735a:	2b40      	cmp	r3, #64	@ 0x40
 800735c:	d058      	beq.n	8007410 <HAL_TIM_ConfigClockSource+0x13a>
 800735e:	2b40      	cmp	r3, #64	@ 0x40
 8007360:	d86f      	bhi.n	8007442 <HAL_TIM_ConfigClockSource+0x16c>
 8007362:	2b30      	cmp	r3, #48	@ 0x30
 8007364:	d064      	beq.n	8007430 <HAL_TIM_ConfigClockSource+0x15a>
 8007366:	2b30      	cmp	r3, #48	@ 0x30
 8007368:	d86b      	bhi.n	8007442 <HAL_TIM_ConfigClockSource+0x16c>
 800736a:	2b20      	cmp	r3, #32
 800736c:	d060      	beq.n	8007430 <HAL_TIM_ConfigClockSource+0x15a>
 800736e:	2b20      	cmp	r3, #32
 8007370:	d867      	bhi.n	8007442 <HAL_TIM_ConfigClockSource+0x16c>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d05c      	beq.n	8007430 <HAL_TIM_ConfigClockSource+0x15a>
 8007376:	2b10      	cmp	r3, #16
 8007378:	d05a      	beq.n	8007430 <HAL_TIM_ConfigClockSource+0x15a>
 800737a:	e062      	b.n	8007442 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800738c:	f000 f990 	bl	80076b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800739e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	609a      	str	r2, [r3, #8]
      break;
 80073a8:	e04f      	b.n	800744a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073ba:	f000 f979 	bl	80076b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689a      	ldr	r2, [r3, #8]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073cc:	609a      	str	r2, [r3, #8]
      break;
 80073ce:	e03c      	b.n	800744a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073dc:	461a      	mov	r2, r3
 80073de:	f000 f8ed 	bl	80075bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2150      	movs	r1, #80	@ 0x50
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 f946 	bl	800767a <TIM_ITRx_SetConfig>
      break;
 80073ee:	e02c      	b.n	800744a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073fc:	461a      	mov	r2, r3
 80073fe:	f000 f90c 	bl	800761a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2160      	movs	r1, #96	@ 0x60
 8007408:	4618      	mov	r0, r3
 800740a:	f000 f936 	bl	800767a <TIM_ITRx_SetConfig>
      break;
 800740e:	e01c      	b.n	800744a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800741c:	461a      	mov	r2, r3
 800741e:	f000 f8cd 	bl	80075bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2140      	movs	r1, #64	@ 0x40
 8007428:	4618      	mov	r0, r3
 800742a:	f000 f926 	bl	800767a <TIM_ITRx_SetConfig>
      break;
 800742e:	e00c      	b.n	800744a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4619      	mov	r1, r3
 800743a:	4610      	mov	r0, r2
 800743c:	f000 f91d 	bl	800767a <TIM_ITRx_SetConfig>
      break;
 8007440:	e003      	b.n	800744a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	73fb      	strb	r3, [r7, #15]
      break;
 8007446:	e000      	b.n	800744a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007448:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800745a:	7bfb      	ldrb	r3, [r7, #15]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a46      	ldr	r2, [pc, #280]	@ (8007590 <TIM_Base_SetConfig+0x12c>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d013      	beq.n	80074a4 <TIM_Base_SetConfig+0x40>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007482:	d00f      	beq.n	80074a4 <TIM_Base_SetConfig+0x40>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a43      	ldr	r2, [pc, #268]	@ (8007594 <TIM_Base_SetConfig+0x130>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00b      	beq.n	80074a4 <TIM_Base_SetConfig+0x40>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a42      	ldr	r2, [pc, #264]	@ (8007598 <TIM_Base_SetConfig+0x134>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d007      	beq.n	80074a4 <TIM_Base_SetConfig+0x40>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a41      	ldr	r2, [pc, #260]	@ (800759c <TIM_Base_SetConfig+0x138>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d003      	beq.n	80074a4 <TIM_Base_SetConfig+0x40>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a40      	ldr	r2, [pc, #256]	@ (80075a0 <TIM_Base_SetConfig+0x13c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d108      	bne.n	80074b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a35      	ldr	r2, [pc, #212]	@ (8007590 <TIM_Base_SetConfig+0x12c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d02b      	beq.n	8007516 <TIM_Base_SetConfig+0xb2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074c4:	d027      	beq.n	8007516 <TIM_Base_SetConfig+0xb2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a32      	ldr	r2, [pc, #200]	@ (8007594 <TIM_Base_SetConfig+0x130>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d023      	beq.n	8007516 <TIM_Base_SetConfig+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a31      	ldr	r2, [pc, #196]	@ (8007598 <TIM_Base_SetConfig+0x134>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d01f      	beq.n	8007516 <TIM_Base_SetConfig+0xb2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a30      	ldr	r2, [pc, #192]	@ (800759c <TIM_Base_SetConfig+0x138>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d01b      	beq.n	8007516 <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a2f      	ldr	r2, [pc, #188]	@ (80075a0 <TIM_Base_SetConfig+0x13c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d017      	beq.n	8007516 <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a2e      	ldr	r2, [pc, #184]	@ (80075a4 <TIM_Base_SetConfig+0x140>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d013      	beq.n	8007516 <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a2d      	ldr	r2, [pc, #180]	@ (80075a8 <TIM_Base_SetConfig+0x144>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00f      	beq.n	8007516 <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a2c      	ldr	r2, [pc, #176]	@ (80075ac <TIM_Base_SetConfig+0x148>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d00b      	beq.n	8007516 <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2b      	ldr	r2, [pc, #172]	@ (80075b0 <TIM_Base_SetConfig+0x14c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d007      	beq.n	8007516 <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a2a      	ldr	r2, [pc, #168]	@ (80075b4 <TIM_Base_SetConfig+0x150>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d003      	beq.n	8007516 <TIM_Base_SetConfig+0xb2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a29      	ldr	r2, [pc, #164]	@ (80075b8 <TIM_Base_SetConfig+0x154>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d108      	bne.n	8007528 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800751c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	4313      	orrs	r3, r2
 8007534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a10      	ldr	r2, [pc, #64]	@ (8007590 <TIM_Base_SetConfig+0x12c>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d003      	beq.n	800755c <TIM_Base_SetConfig+0xf8>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a12      	ldr	r2, [pc, #72]	@ (80075a0 <TIM_Base_SetConfig+0x13c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d103      	bne.n	8007564 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	691a      	ldr	r2, [r3, #16]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b01      	cmp	r3, #1
 8007574:	d105      	bne.n	8007582 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	f023 0201 	bic.w	r2, r3, #1
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	611a      	str	r2, [r3, #16]
  }
}
 8007582:	bf00      	nop
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	40010000 	.word	0x40010000
 8007594:	40000400 	.word	0x40000400
 8007598:	40000800 	.word	0x40000800
 800759c:	40000c00 	.word	0x40000c00
 80075a0:	40010400 	.word	0x40010400
 80075a4:	40014000 	.word	0x40014000
 80075a8:	40014400 	.word	0x40014400
 80075ac:	40014800 	.word	0x40014800
 80075b0:	40001800 	.word	0x40001800
 80075b4:	40001c00 	.word	0x40001c00
 80075b8:	40002000 	.word	0x40002000

080075bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	f023 0201 	bic.w	r2, r3, #1
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	011b      	lsls	r3, r3, #4
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f023 030a 	bic.w	r3, r3, #10
 80075f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	621a      	str	r2, [r3, #32]
}
 800760e:	bf00      	nop
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800761a:	b480      	push	{r7}
 800761c:	b087      	sub	sp, #28
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	f023 0210 	bic.w	r2, r3, #16
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	031b      	lsls	r3, r3, #12
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	4313      	orrs	r3, r2
 800764e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007656:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	011b      	lsls	r3, r3, #4
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4313      	orrs	r3, r2
 8007660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	621a      	str	r2, [r3, #32]
}
 800766e:	bf00      	nop
 8007670:	371c      	adds	r7, #28
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800767a:	b480      	push	{r7}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4313      	orrs	r3, r2
 8007698:	f043 0307 	orr.w	r3, r3, #7
 800769c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	609a      	str	r2, [r3, #8]
}
 80076a4:	bf00      	nop
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	021a      	lsls	r2, r3, #8
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	4313      	orrs	r3, r2
 80076dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	609a      	str	r2, [r3, #8]
}
 80076e4:	bf00      	nop
 80076e6:	371c      	adds	r7, #28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007704:	2302      	movs	r3, #2
 8007706:	e05a      	b.n	80077be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800772e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a21      	ldr	r2, [pc, #132]	@ (80077cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d022      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007754:	d01d      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1d      	ldr	r2, [pc, #116]	@ (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d018      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1b      	ldr	r2, [pc, #108]	@ (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d013      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1a      	ldr	r2, [pc, #104]	@ (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00e      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a18      	ldr	r2, [pc, #96]	@ (80077dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d009      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a17      	ldr	r2, [pc, #92]	@ (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d004      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a15      	ldr	r2, [pc, #84]	@ (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d10c      	bne.n	80077ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40010000 	.word	0x40010000
 80077d0:	40000400 	.word	0x40000400
 80077d4:	40000800 	.word	0x40000800
 80077d8:	40000c00 	.word	0x40000c00
 80077dc:	40010400 	.word	0x40010400
 80077e0:	40014000 	.word	0x40014000
 80077e4:	40001800 	.word	0x40001800

080077e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077e8:	b084      	sub	sp, #16
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	f107 001c 	add.w	r0, r7, #28
 80077f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d123      	bne.n	800784a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007806:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007816:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800782a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800782e:	2b01      	cmp	r3, #1
 8007830:	d105      	bne.n	800783e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f9dc 	bl	8007bfc <USB_CoreReset>
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]
 8007848:	e01b      	b.n	8007882 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f9d0 	bl	8007bfc <USB_CoreReset>
 800785c:	4603      	mov	r3, r0
 800785e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007860:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007864:	2b00      	cmp	r3, #0
 8007866:	d106      	bne.n	8007876 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	639a      	str	r2, [r3, #56]	@ 0x38
 8007874:	e005      	b.n	8007882 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007882:	7fbb      	ldrb	r3, [r7, #30]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d10b      	bne.n	80078a0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f043 0206 	orr.w	r2, r3, #6
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f043 0220 	orr.w	r2, r3, #32
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078ac:	b004      	add	sp, #16
 80078ae:	4770      	bx	lr

080078b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f043 0201 	orr.w	r2, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f023 0201 	bic.w	r2, r3, #1
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d115      	bne.n	8007942 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007922:	200a      	movs	r0, #10
 8007924:	f7fa fbbc 	bl	80020a0 <HAL_Delay>
      ms += 10U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	330a      	adds	r3, #10
 800792c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f956 	bl	8007be0 <USB_GetMode>
 8007934:	4603      	mov	r3, r0
 8007936:	2b01      	cmp	r3, #1
 8007938:	d01e      	beq.n	8007978 <USB_SetCurrentMode+0x84>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2bc7      	cmp	r3, #199	@ 0xc7
 800793e:	d9f0      	bls.n	8007922 <USB_SetCurrentMode+0x2e>
 8007940:	e01a      	b.n	8007978 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007942:	78fb      	ldrb	r3, [r7, #3]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d115      	bne.n	8007974 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007954:	200a      	movs	r0, #10
 8007956:	f7fa fba3 	bl	80020a0 <HAL_Delay>
      ms += 10U;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	330a      	adds	r3, #10
 800795e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f93d 	bl	8007be0 <USB_GetMode>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <USB_SetCurrentMode+0x84>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007970:	d9f0      	bls.n	8007954 <USB_SetCurrentMode+0x60>
 8007972:	e001      	b.n	8007978 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e005      	b.n	8007984 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2bc8      	cmp	r3, #200	@ 0xc8
 800797c:	d101      	bne.n	8007982 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e000      	b.n	8007984 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3301      	adds	r3, #1
 800799e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079a6:	d901      	bls.n	80079ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e01b      	b.n	80079e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	daf2      	bge.n	800799a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	019b      	lsls	r3, r3, #6
 80079bc:	f043 0220 	orr.w	r2, r3, #32
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3301      	adds	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079d0:	d901      	bls.n	80079d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e006      	b.n	80079e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f003 0320 	and.w	r3, r3, #32
 80079de:	2b20      	cmp	r3, #32
 80079e0:	d0f0      	beq.n	80079c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3301      	adds	r3, #1
 8007a00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a08:	d901      	bls.n	8007a0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e018      	b.n	8007a40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	daf2      	bge.n	80079fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2210      	movs	r2, #16
 8007a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3301      	adds	r3, #1
 8007a24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a2c:	d901      	bls.n	8007a32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e006      	b.n	8007a40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2b10      	cmp	r3, #16
 8007a3c:	d0f0      	beq.n	8007a20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b089      	sub	sp, #36	@ 0x24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	4611      	mov	r1, r2
 8007a58:	461a      	mov	r2, r3
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	71fb      	strb	r3, [r7, #7]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d123      	bne.n	8007aba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a72:	88bb      	ldrh	r3, [r7, #4]
 8007a74:	3303      	adds	r3, #3
 8007a76:	089b      	lsrs	r3, r3, #2
 8007a78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	e018      	b.n	8007ab2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a80:	79fb      	ldrb	r3, [r7, #7]
 8007a82:	031a      	lsls	r2, r3, #12
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	3301      	adds	r3, #1
 8007a98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	61bb      	str	r3, [r7, #24]
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d3e2      	bcc.n	8007a80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3724      	adds	r7, #36	@ 0x24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b08b      	sub	sp, #44	@ 0x2c
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ade:	88fb      	ldrh	r3, [r7, #6]
 8007ae0:	089b      	lsrs	r3, r3, #2
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ae6:	88fb      	ldrh	r3, [r7, #6]
 8007ae8:	f003 0303 	and.w	r3, r3, #3
 8007aec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007aee:	2300      	movs	r3, #0
 8007af0:	623b      	str	r3, [r7, #32]
 8007af2:	e014      	b.n	8007b1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b02:	3301      	adds	r3, #1
 8007b04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b08:	3301      	adds	r3, #1
 8007b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0e:	3301      	adds	r3, #1
 8007b10:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b14:	3301      	adds	r3, #1
 8007b16:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	623b      	str	r3, [r7, #32]
 8007b1e:	6a3a      	ldr	r2, [r7, #32]
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d3e6      	bcc.n	8007af4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b26:	8bfb      	ldrh	r3, [r7, #30]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d01e      	beq.n	8007b6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b36:	461a      	mov	r2, r3
 8007b38:	f107 0310 	add.w	r3, r7, #16
 8007b3c:	6812      	ldr	r2, [r2, #0]
 8007b3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	fa22 f303 	lsr.w	r3, r2, r3
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b50:	701a      	strb	r2, [r3, #0]
      i++;
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	3301      	adds	r3, #1
 8007b56:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007b5e:	8bfb      	ldrh	r3, [r7, #30]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b64:	8bfb      	ldrh	r3, [r7, #30]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1ea      	bne.n	8007b40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	372c      	adds	r7, #44	@ 0x2c
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b90:	68fb      	ldr	r3, [r7, #12]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007bbe:	78fb      	ldrb	r3, [r7, #3]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	4013      	ands	r3, r2
 8007bd0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	f003 0301 	and.w	r3, r3, #1
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c14:	d901      	bls.n	8007c1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e01b      	b.n	8007c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	daf2      	bge.n	8007c08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	f043 0201 	orr.w	r2, r3, #1
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3301      	adds	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c3e:	d901      	bls.n	8007c44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e006      	b.n	8007c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d0f0      	beq.n	8007c32 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
	...

08007c60 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c60:	b084      	sub	sp, #16
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b086      	sub	sp, #24
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c80:	461a      	mov	r2, r3
 8007c82:	2300      	movs	r3, #0
 8007c84:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c8a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c96:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d119      	bne.n	8007cea <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d10a      	bne.n	8007cd4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007ccc:	f043 0304 	orr.w	r3, r3, #4
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	e014      	b.n	8007cfe <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007ce2:	f023 0304 	bic.w	r3, r3, #4
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	e009      	b.n	8007cfe <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007cf8:	f023 0304 	bic.w	r3, r3, #4
 8007cfc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007cfe:	2110      	movs	r1, #16
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff fe43 	bl	800798c <USB_FlushTxFifo>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7ff fe6d 	bl	80079f0 <USB_FlushRxFifo>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d20:	2300      	movs	r3, #0
 8007d22:	613b      	str	r3, [r7, #16]
 8007d24:	e015      	b.n	8007d52 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d32:	461a      	mov	r2, r3
 8007d34:	f04f 33ff 	mov.w	r3, #4294967295
 8007d38:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d46:	461a      	mov	r2, r3
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	613b      	str	r3, [r7, #16]
 8007d52:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007d56:	461a      	mov	r2, r3
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d3e3      	bcc.n	8007d26 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a18      	ldr	r2, [pc, #96]	@ (8007dd0 <USB_HostInit+0x170>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d10b      	bne.n	8007d8c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a15      	ldr	r2, [pc, #84]	@ (8007dd4 <USB_HostInit+0x174>)
 8007d80:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a14      	ldr	r2, [pc, #80]	@ (8007dd8 <USB_HostInit+0x178>)
 8007d86:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007d8a:	e009      	b.n	8007da0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2280      	movs	r2, #128	@ 0x80
 8007d90:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a11      	ldr	r2, [pc, #68]	@ (8007ddc <USB_HostInit+0x17c>)
 8007d96:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a11      	ldr	r2, [pc, #68]	@ (8007de0 <USB_HostInit+0x180>)
 8007d9c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007da0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d105      	bne.n	8007db4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	f043 0210 	orr.w	r2, r3, #16
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	699a      	ldr	r2, [r3, #24]
 8007db8:	4b0a      	ldr	r3, [pc, #40]	@ (8007de4 <USB_HostInit+0x184>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3718      	adds	r7, #24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dcc:	b004      	add	sp, #16
 8007dce:	4770      	bx	lr
 8007dd0:	40040000 	.word	0x40040000
 8007dd4:	01000200 	.word	0x01000200
 8007dd8:	00e00300 	.word	0x00e00300
 8007ddc:	00600080 	.word	0x00600080
 8007de0:	004000e0 	.word	0x004000e0
 8007de4:	a3200008 	.word	0xa3200008

08007de8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e06:	f023 0303 	bic.w	r3, r3, #3
 8007e0a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	78fb      	ldrb	r3, [r7, #3]
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	68f9      	ldr	r1, [r7, #12]
 8007e1c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007e20:	4313      	orrs	r3, r2
 8007e22:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d107      	bne.n	8007e3a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e30:	461a      	mov	r2, r3
 8007e32:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007e36:	6053      	str	r3, [r2, #4]
 8007e38:	e00c      	b.n	8007e54 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007e3a:	78fb      	ldrb	r3, [r7, #3]
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d107      	bne.n	8007e50 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e46:	461a      	mov	r2, r3
 8007e48:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007e4c:	6053      	str	r3, [r2, #4]
 8007e4e:	e001      	b.n	8007e54 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e000      	b.n	8007e56 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007e82:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e90:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007e92:	2064      	movs	r0, #100	@ 0x64
 8007e94:	f7fa f904 	bl	80020a0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ea4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007ea6:	200a      	movs	r0, #10
 8007ea8:	f7fa f8fa 	bl	80020a0 <HAL_Delay>

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b085      	sub	sp, #20
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007eda:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d109      	bne.n	8007efa <USB_DriveVbus+0x44>
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d106      	bne.n	8007efa <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007ef4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007ef8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f04:	d109      	bne.n	8007f1a <USB_DriveVbus+0x64>
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d106      	bne.n	8007f1a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f18:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	0c5b      	lsrs	r3, r3, #17
 8007f46:	f003 0303 	and.w	r3, r3, #3
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b085      	sub	sp, #20
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	b29b      	uxth	r3, r3
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	4608      	mov	r0, r1
 8007f82:	4611      	mov	r1, r2
 8007f84:	461a      	mov	r2, r3
 8007f86:	4603      	mov	r3, r0
 8007f88:	70fb      	strb	r3, [r7, #3]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	70bb      	strb	r3, [r7, #2]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007fae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d87c      	bhi.n	80080b0 <USB_HC_Init+0x138>
 8007fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fbc <USB_HC_Init+0x44>)
 8007fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbc:	08007fcd 	.word	0x08007fcd
 8007fc0:	08008073 	.word	0x08008073
 8007fc4:	08007fcd 	.word	0x08007fcd
 8007fc8:	08008035 	.word	0x08008035
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fd8:	461a      	mov	r2, r3
 8007fda:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007fde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007fe0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	da10      	bge.n	800800a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	78fa      	ldrb	r2, [r7, #3]
 8007ff8:	0151      	lsls	r1, r2, #5
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	440a      	add	r2, r1
 8007ffe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008006:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008008:	e055      	b.n	80080b6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a6f      	ldr	r2, [pc, #444]	@ (80081cc <USB_HC_Init+0x254>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d151      	bne.n	80080b6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008012:	78fb      	ldrb	r3, [r7, #3]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	4413      	add	r3, r2
 800801a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	78fa      	ldrb	r2, [r7, #3]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	440a      	add	r2, r1
 8008028:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800802c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008030:	60d3      	str	r3, [r2, #12]
      break;
 8008032:	e040      	b.n	80080b6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	4413      	add	r3, r2
 800803c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008040:	461a      	mov	r2, r3
 8008042:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008046:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008048:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800804c:	2b00      	cmp	r3, #0
 800804e:	da34      	bge.n	80080ba <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	4413      	add	r3, r2
 8008058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	78fa      	ldrb	r2, [r7, #3]
 8008060:	0151      	lsls	r1, r2, #5
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	440a      	add	r2, r1
 8008066:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800806a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800806e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008070:	e023      	b.n	80080ba <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008072:	78fb      	ldrb	r3, [r7, #3]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	4413      	add	r3, r2
 800807a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800807e:	461a      	mov	r2, r3
 8008080:	f240 2325 	movw	r3, #549	@ 0x225
 8008084:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008086:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800808a:	2b00      	cmp	r3, #0
 800808c:	da17      	bge.n	80080be <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800808e:	78fb      	ldrb	r3, [r7, #3]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	4413      	add	r3, r2
 8008096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	78fa      	ldrb	r2, [r7, #3]
 800809e:	0151      	lsls	r1, r2, #5
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	440a      	add	r2, r1
 80080a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080a8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80080ac:	60d3      	str	r3, [r2, #12]
      }
      break;
 80080ae:	e006      	b.n	80080be <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	77fb      	strb	r3, [r7, #31]
      break;
 80080b4:	e004      	b.n	80080c0 <USB_HC_Init+0x148>
      break;
 80080b6:	bf00      	nop
 80080b8:	e002      	b.n	80080c0 <USB_HC_Init+0x148>
      break;
 80080ba:	bf00      	nop
 80080bc:	e000      	b.n	80080c0 <USB_HC_Init+0x148>
      break;
 80080be:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080cc:	461a      	mov	r2, r3
 80080ce:	2300      	movs	r3, #0
 80080d0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80080d2:	78fb      	ldrb	r3, [r7, #3]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	78fa      	ldrb	r2, [r7, #3]
 80080e2:	0151      	lsls	r1, r2, #5
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	440a      	add	r2, r1
 80080e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080ec:	f043 0302 	orr.w	r3, r3, #2
 80080f0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080f8:	699a      	ldr	r2, [r3, #24]
 80080fa:	78fb      	ldrb	r3, [r7, #3]
 80080fc:	f003 030f 	and.w	r3, r3, #15
 8008100:	2101      	movs	r1, #1
 8008102:	fa01 f303 	lsl.w	r3, r1, r3
 8008106:	6939      	ldr	r1, [r7, #16]
 8008108:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800810c:	4313      	orrs	r3, r2
 800810e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800811c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008120:	2b00      	cmp	r3, #0
 8008122:	da03      	bge.n	800812c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008124:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008128:	61bb      	str	r3, [r7, #24]
 800812a:	e001      	b.n	8008130 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800812c:	2300      	movs	r3, #0
 800812e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7ff fef9 	bl	8007f28 <USB_GetHostSpeed>
 8008136:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008138:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800813c:	2b02      	cmp	r3, #2
 800813e:	d106      	bne.n	800814e <USB_HC_Init+0x1d6>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b02      	cmp	r3, #2
 8008144:	d003      	beq.n	800814e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008146:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800814a:	617b      	str	r3, [r7, #20]
 800814c:	e001      	b.n	8008152 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008152:	787b      	ldrb	r3, [r7, #1]
 8008154:	059b      	lsls	r3, r3, #22
 8008156:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800815a:	78bb      	ldrb	r3, [r7, #2]
 800815c:	02db      	lsls	r3, r3, #11
 800815e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008162:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008164:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008168:	049b      	lsls	r3, r3, #18
 800816a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800816e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008170:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008172:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008176:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	431a      	orrs	r2, r3
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008180:	78fa      	ldrb	r2, [r7, #3]
 8008182:	0151      	lsls	r1, r2, #5
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	440a      	add	r2, r1
 8008188:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800818c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008190:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008192:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008196:	2b03      	cmp	r3, #3
 8008198:	d003      	beq.n	80081a2 <USB_HC_Init+0x22a>
 800819a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d10f      	bne.n	80081c2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80081a2:	78fb      	ldrb	r3, [r7, #3]
 80081a4:	015a      	lsls	r2, r3, #5
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	78fa      	ldrb	r2, [r7, #3]
 80081b2:	0151      	lsls	r1, r2, #5
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	440a      	add	r2, r1
 80081b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80081c0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80081c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3720      	adds	r7, #32
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	40040000 	.word	0x40040000

080081d0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08c      	sub	sp, #48	@ 0x30
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	4613      	mov	r3, r2
 80081dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	785b      	ldrb	r3, [r3, #1]
 80081e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80081e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80081ec:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	4a5d      	ldr	r2, [pc, #372]	@ (8008368 <USB_HC_StartXfer+0x198>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d12f      	bne.n	8008256 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d11c      	bne.n	8008236 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	7c9b      	ldrb	r3, [r3, #18]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d003      	beq.n	800820c <USB_HC_StartXfer+0x3c>
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	7c9b      	ldrb	r3, [r3, #18]
 8008208:	2b02      	cmp	r3, #2
 800820a:	d124      	bne.n	8008256 <USB_HC_StartXfer+0x86>
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	799b      	ldrb	r3, [r3, #6]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d120      	bne.n	8008256 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	4413      	add	r3, r2
 800821c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	69fa      	ldr	r2, [r7, #28]
 8008224:	0151      	lsls	r1, r2, #5
 8008226:	6a3a      	ldr	r2, [r7, #32]
 8008228:	440a      	add	r2, r1
 800822a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800822e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008232:	60d3      	str	r3, [r2, #12]
 8008234:	e00f      	b.n	8008256 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	791b      	ldrb	r3, [r3, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10b      	bne.n	8008256 <USB_HC_StartXfer+0x86>
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	795b      	ldrb	r3, [r3, #5]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d107      	bne.n	8008256 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	785b      	ldrb	r3, [r3, #1]
 800824a:	4619      	mov	r1, r3
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f000 fb6b 	bl	8008928 <USB_DoPing>
        return HAL_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	e232      	b.n	80086bc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	799b      	ldrb	r3, [r3, #6]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d158      	bne.n	8008310 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800825e:	2301      	movs	r3, #1
 8008260:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	78db      	ldrb	r3, [r3, #3]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d007      	beq.n	800827a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800826a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	8a92      	ldrh	r2, [r2, #20]
 8008270:	fb03 f202 	mul.w	r2, r3, r2
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	61da      	str	r2, [r3, #28]
 8008278:	e07c      	b.n	8008374 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	7c9b      	ldrb	r3, [r3, #18]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d130      	bne.n	80082e4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	2bbc      	cmp	r3, #188	@ 0xbc
 8008288:	d918      	bls.n	80082bc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	8a9b      	ldrh	r3, [r3, #20]
 800828e:	461a      	mov	r2, r3
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	69da      	ldr	r2, [r3, #28]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d003      	beq.n	80082ac <USB_HC_StartXfer+0xdc>
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d103      	bne.n	80082b4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2202      	movs	r2, #2
 80082b0:	60da      	str	r2, [r3, #12]
 80082b2:	e05f      	b.n	8008374 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2201      	movs	r2, #1
 80082b8:	60da      	str	r2, [r3, #12]
 80082ba:	e05b      	b.n	8008374 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	6a1a      	ldr	r2, [r3, #32]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d007      	beq.n	80082dc <USB_HC_StartXfer+0x10c>
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d003      	beq.n	80082dc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2204      	movs	r2, #4
 80082d8:	60da      	str	r2, [r3, #12]
 80082da:	e04b      	b.n	8008374 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2203      	movs	r2, #3
 80082e0:	60da      	str	r2, [r3, #12]
 80082e2:	e047      	b.n	8008374 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80082e4:	79fb      	ldrb	r3, [r7, #7]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d10d      	bne.n	8008306 <USB_HC_StartXfer+0x136>
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	8a92      	ldrh	r2, [r2, #20]
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d907      	bls.n	8008306 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80082f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	8a92      	ldrh	r2, [r2, #20]
 80082fc:	fb03 f202 	mul.w	r2, r3, r2
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	61da      	str	r2, [r3, #28]
 8008304:	e036      	b.n	8008374 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	6a1a      	ldr	r2, [r3, #32]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	61da      	str	r2, [r3, #28]
 800830e:	e031      	b.n	8008374 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d018      	beq.n	800834a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	8a92      	ldrh	r2, [r2, #20]
 8008320:	4413      	add	r3, r2
 8008322:	3b01      	subs	r3, #1
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	8a92      	ldrh	r2, [r2, #20]
 8008328:	fbb3 f3f2 	udiv	r3, r3, r2
 800832c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800832e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008330:	8b7b      	ldrh	r3, [r7, #26]
 8008332:	429a      	cmp	r2, r3
 8008334:	d90b      	bls.n	800834e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008336:	8b7b      	ldrh	r3, [r7, #26]
 8008338:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800833a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	8a92      	ldrh	r2, [r2, #20]
 8008340:	fb03 f202 	mul.w	r2, r3, r2
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	61da      	str	r2, [r3, #28]
 8008348:	e001      	b.n	800834e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800834a:	2301      	movs	r3, #1
 800834c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	78db      	ldrb	r3, [r3, #3]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00a      	beq.n	800836c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008356:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	8a92      	ldrh	r2, [r2, #20]
 800835c:	fb03 f202 	mul.w	r2, r3, r2
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	61da      	str	r2, [r3, #28]
 8008364:	e006      	b.n	8008374 <USB_HC_StartXfer+0x1a4>
 8008366:	bf00      	nop
 8008368:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	6a1a      	ldr	r2, [r3, #32]
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800837c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800837e:	04d9      	lsls	r1, r3, #19
 8008380:	4ba3      	ldr	r3, [pc, #652]	@ (8008610 <USB_HC_StartXfer+0x440>)
 8008382:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008384:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	7d9b      	ldrb	r3, [r3, #22]
 800838a:	075b      	lsls	r3, r3, #29
 800838c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008390:	69f9      	ldr	r1, [r7, #28]
 8008392:	0148      	lsls	r0, r1, #5
 8008394:	6a39      	ldr	r1, [r7, #32]
 8008396:	4401      	add	r1, r0
 8008398:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800839c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800839e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80083a0:	79fb      	ldrb	r3, [r7, #7]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d009      	beq.n	80083ba <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	6999      	ldr	r1, [r3, #24]
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083b6:	460a      	mov	r2, r1
 80083b8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	bf0c      	ite	eq
 80083ca:	2301      	moveq	r3, #1
 80083cc:	2300      	movne	r3, #0
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	69fa      	ldr	r2, [r7, #28]
 80083e2:	0151      	lsls	r1, r2, #5
 80083e4:	6a3a      	ldr	r2, [r7, #32]
 80083e6:	440a      	add	r2, r1
 80083e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80083f0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	7e7b      	ldrb	r3, [r7, #25]
 8008402:	075b      	lsls	r3, r3, #29
 8008404:	69f9      	ldr	r1, [r7, #28]
 8008406:	0148      	lsls	r0, r1, #5
 8008408:	6a39      	ldr	r1, [r7, #32]
 800840a:	4401      	add	r1, r0
 800840c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008410:	4313      	orrs	r3, r2
 8008412:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	799b      	ldrb	r3, [r3, #6]
 8008418:	2b01      	cmp	r3, #1
 800841a:	f040 80c3 	bne.w	80085a4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	7c5b      	ldrb	r3, [r3, #17]
 8008422:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008428:	4313      	orrs	r3, r2
 800842a:	69fa      	ldr	r2, [r7, #28]
 800842c:	0151      	lsls	r1, r2, #5
 800842e:	6a3a      	ldr	r2, [r7, #32]
 8008430:	440a      	add	r2, r1
 8008432:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008436:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800843a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	015a      	lsls	r2, r3, #5
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	4413      	add	r3, r2
 8008444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	69fa      	ldr	r2, [r7, #28]
 800844c:	0151      	lsls	r1, r2, #5
 800844e:	6a3a      	ldr	r2, [r7, #32]
 8008450:	440a      	add	r2, r1
 8008452:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008456:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800845a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	79db      	ldrb	r3, [r3, #7]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d123      	bne.n	80084ac <USB_HC_StartXfer+0x2dc>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	78db      	ldrb	r3, [r3, #3]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d11f      	bne.n	80084ac <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	4413      	add	r3, r2
 8008474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	0151      	lsls	r1, r2, #5
 800847e:	6a3a      	ldr	r2, [r7, #32]
 8008480:	440a      	add	r2, r1
 8008482:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800848a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	4413      	add	r3, r2
 8008494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	69fa      	ldr	r2, [r7, #28]
 800849c:	0151      	lsls	r1, r2, #5
 800849e:	6a3a      	ldr	r2, [r7, #32]
 80084a0:	440a      	add	r2, r1
 80084a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084aa:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	7c9b      	ldrb	r3, [r3, #18]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d003      	beq.n	80084bc <USB_HC_StartXfer+0x2ec>
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	7c9b      	ldrb	r3, [r3, #18]
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d117      	bne.n	80084ec <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d113      	bne.n	80084ec <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	78db      	ldrb	r3, [r3, #3]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d10f      	bne.n	80084ec <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	0151      	lsls	r1, r2, #5
 80084de:	6a3a      	ldr	r2, [r7, #32]
 80084e0:	440a      	add	r2, r1
 80084e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084ea:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	7c9b      	ldrb	r3, [r3, #18]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d162      	bne.n	80085ba <USB_HC_StartXfer+0x3ea>
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	78db      	ldrb	r3, [r3, #3]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d15e      	bne.n	80085ba <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	3b01      	subs	r3, #1
 8008502:	2b03      	cmp	r3, #3
 8008504:	d858      	bhi.n	80085b8 <USB_HC_StartXfer+0x3e8>
 8008506:	a201      	add	r2, pc, #4	@ (adr r2, 800850c <USB_HC_StartXfer+0x33c>)
 8008508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850c:	0800851d 	.word	0x0800851d
 8008510:	0800853f 	.word	0x0800853f
 8008514:	08008561 	.word	0x08008561
 8008518:	08008583 	.word	0x08008583
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	4413      	add	r3, r2
 8008524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	69fa      	ldr	r2, [r7, #28]
 800852c:	0151      	lsls	r1, r2, #5
 800852e:	6a3a      	ldr	r2, [r7, #32]
 8008530:	440a      	add	r2, r1
 8008532:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800853a:	6053      	str	r3, [r2, #4]
          break;
 800853c:	e03d      	b.n	80085ba <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	4413      	add	r3, r2
 8008546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	69fa      	ldr	r2, [r7, #28]
 800854e:	0151      	lsls	r1, r2, #5
 8008550:	6a3a      	ldr	r2, [r7, #32]
 8008552:	440a      	add	r2, r1
 8008554:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008558:	f043 030e 	orr.w	r3, r3, #14
 800855c:	6053      	str	r3, [r2, #4]
          break;
 800855e:	e02c      	b.n	80085ba <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	4413      	add	r3, r2
 8008568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	0151      	lsls	r1, r2, #5
 8008572:	6a3a      	ldr	r2, [r7, #32]
 8008574:	440a      	add	r2, r1
 8008576:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800857a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800857e:	6053      	str	r3, [r2, #4]
          break;
 8008580:	e01b      	b.n	80085ba <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	4413      	add	r3, r2
 800858a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	69fa      	ldr	r2, [r7, #28]
 8008592:	0151      	lsls	r1, r2, #5
 8008594:	6a3a      	ldr	r2, [r7, #32]
 8008596:	440a      	add	r2, r1
 8008598:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800859c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085a0:	6053      	str	r3, [r2, #4]
          break;
 80085a2:	e00a      	b.n	80085ba <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085b0:	461a      	mov	r2, r3
 80085b2:	2300      	movs	r3, #0
 80085b4:	6053      	str	r3, [r2, #4]
 80085b6:	e000      	b.n	80085ba <USB_HC_StartXfer+0x3ea>
          break;
 80085b8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80085d0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	78db      	ldrb	r3, [r3, #3]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d004      	beq.n	80085e4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085e0:	613b      	str	r3, [r7, #16]
 80085e2:	e003      	b.n	80085ec <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085ea:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085f2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008600:	461a      	mov	r2, r3
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	e055      	b.n	80086bc <USB_HC_StartXfer+0x4ec>
 8008610:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	78db      	ldrb	r3, [r3, #3]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d14e      	bne.n	80086ba <USB_HC_StartXfer+0x4ea>
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	6a1b      	ldr	r3, [r3, #32]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d04a      	beq.n	80086ba <USB_HC_StartXfer+0x4ea>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	79db      	ldrb	r3, [r3, #7]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d146      	bne.n	80086ba <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	7c9b      	ldrb	r3, [r3, #18]
 8008630:	2b03      	cmp	r3, #3
 8008632:	d831      	bhi.n	8008698 <USB_HC_StartXfer+0x4c8>
 8008634:	a201      	add	r2, pc, #4	@ (adr r2, 800863c <USB_HC_StartXfer+0x46c>)
 8008636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863a:	bf00      	nop
 800863c:	0800864d 	.word	0x0800864d
 8008640:	08008671 	.word	0x08008671
 8008644:	0800864d 	.word	0x0800864d
 8008648:	08008671 	.word	0x08008671
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	3303      	adds	r3, #3
 8008652:	089b      	lsrs	r3, r3, #2
 8008654:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008656:	8afa      	ldrh	r2, [r7, #22]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865c:	b29b      	uxth	r3, r3
 800865e:	429a      	cmp	r2, r3
 8008660:	d91c      	bls.n	800869c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	f043 0220 	orr.w	r2, r3, #32
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	619a      	str	r2, [r3, #24]
        }
        break;
 800866e:	e015      	b.n	800869c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	3303      	adds	r3, #3
 8008676:	089b      	lsrs	r3, r3, #2
 8008678:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800867a:	8afa      	ldrh	r2, [r7, #22]
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	b29b      	uxth	r3, r3
 8008686:	429a      	cmp	r2, r3
 8008688:	d90a      	bls.n	80086a0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	619a      	str	r2, [r3, #24]
        }
        break;
 8008696:	e003      	b.n	80086a0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008698:	bf00      	nop
 800869a:	e002      	b.n	80086a2 <USB_HC_StartXfer+0x4d2>
        break;
 800869c:	bf00      	nop
 800869e:	e000      	b.n	80086a2 <USB_HC_StartXfer+0x4d2>
        break;
 80086a0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	6999      	ldr	r1, [r3, #24]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	785a      	ldrb	r2, [r3, #1]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	2000      	movs	r0, #0
 80086b2:	9000      	str	r0, [sp, #0]
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f7ff f9c9 	bl	8007a4c <USB_WritePacket>
  }

  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3728      	adds	r7, #40	@ 0x28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	b29b      	uxth	r3, r3
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b089      	sub	sp, #36	@ 0x24
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	4413      	add	r3, r2
 8008706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	0c9b      	lsrs	r3, r3, #18
 800870e:	f003 0303 	and.w	r3, r3, #3
 8008712:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	4413      	add	r3, r2
 800871c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	0fdb      	lsrs	r3, r3, #31
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	4413      	add	r3, r2
 8008732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	0fdb      	lsrs	r3, r3, #31
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b20      	cmp	r3, #32
 800874a:	d10d      	bne.n	8008768 <USB_HC_Halt+0x82>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10a      	bne.n	8008768 <USB_HC_Halt+0x82>
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d002      	beq.n	8008764 <USB_HC_Halt+0x7e>
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b03      	cmp	r3, #3
 8008762:	d101      	bne.n	8008768 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	e0d8      	b.n	800891a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <USB_HC_Halt+0x8e>
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d173      	bne.n	800885c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	4413      	add	r3, r2
 800877c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	0151      	lsls	r1, r2, #5
 8008786:	69fa      	ldr	r2, [r7, #28]
 8008788:	440a      	add	r2, r1
 800878a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800878e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008792:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f003 0320 	and.w	r3, r3, #32
 800879c:	2b00      	cmp	r3, #0
 800879e:	d14a      	bne.n	8008836 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d133      	bne.n	8008814 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	0151      	lsls	r1, r2, #5
 80087be:	69fa      	ldr	r2, [r7, #28]
 80087c0:	440a      	add	r2, r1
 80087c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087ca:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	69ba      	ldr	r2, [r7, #24]
 80087dc:	0151      	lsls	r1, r2, #5
 80087de:	69fa      	ldr	r2, [r7, #28]
 80087e0:	440a      	add	r2, r1
 80087e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80087ea:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	3301      	adds	r3, #1
 80087f0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80087f8:	d82e      	bhi.n	8008858 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	4413      	add	r3, r2
 8008802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800880c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008810:	d0ec      	beq.n	80087ec <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008812:	e081      	b.n	8008918 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	4413      	add	r3, r2
 800881c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	69ba      	ldr	r2, [r7, #24]
 8008824:	0151      	lsls	r1, r2, #5
 8008826:	69fa      	ldr	r2, [r7, #28]
 8008828:	440a      	add	r2, r1
 800882a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800882e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008832:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008834:	e070      	b.n	8008918 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	4413      	add	r3, r2
 800883e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	69ba      	ldr	r2, [r7, #24]
 8008846:	0151      	lsls	r1, r2, #5
 8008848:	69fa      	ldr	r2, [r7, #28]
 800884a:	440a      	add	r2, r1
 800884c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008850:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008854:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008856:	e05f      	b.n	8008918 <USB_HC_Halt+0x232>
            break;
 8008858:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800885a:	e05d      	b.n	8008918 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	4413      	add	r3, r2
 8008864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	0151      	lsls	r1, r2, #5
 800886e:	69fa      	ldr	r2, [r7, #28]
 8008870:	440a      	add	r2, r1
 8008872:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008876:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800887a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d133      	bne.n	80088f4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	4413      	add	r3, r2
 8008894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	0151      	lsls	r1, r2, #5
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	440a      	add	r2, r1
 80088a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	0151      	lsls	r1, r2, #5
 80088be:	69fa      	ldr	r2, [r7, #28]
 80088c0:	440a      	add	r2, r1
 80088c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088ca:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	3301      	adds	r3, #1
 80088d0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088d8:	d81d      	bhi.n	8008916 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088f0:	d0ec      	beq.n	80088cc <USB_HC_Halt+0x1e6>
 80088f2:	e011      	b.n	8008918 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69ba      	ldr	r2, [r7, #24]
 8008904:	0151      	lsls	r1, r2, #5
 8008906:	69fa      	ldr	r2, [r7, #28]
 8008908:	440a      	add	r2, r1
 800890a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800890e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	e000      	b.n	8008918 <USB_HC_Halt+0x232>
          break;
 8008916:	bf00      	nop
    }
  }

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3724      	adds	r7, #36	@ 0x24
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
	...

08008928 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	460b      	mov	r3, r1
 8008932:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008938:	78fb      	ldrb	r3, [r7, #3]
 800893a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800893c:	2301      	movs	r3, #1
 800893e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	04da      	lsls	r2, r3, #19
 8008944:	4b15      	ldr	r3, [pc, #84]	@ (800899c <USB_DoPing+0x74>)
 8008946:	4013      	ands	r3, r2
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	0151      	lsls	r1, r2, #5
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	440a      	add	r2, r1
 8008950:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008954:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008958:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	015a      	lsls	r2, r3, #5
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	4413      	add	r3, r2
 8008962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008970:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008978:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	015a      	lsls	r2, r3, #5
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	4413      	add	r3, r2
 8008982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008986:	461a      	mov	r2, r3
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	371c      	adds	r7, #28
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	1ff80000 	.word	0x1ff80000

080089a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7fe ff8c 	bl	80078d2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80089ba:	2110      	movs	r1, #16
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7fe ffe5 	bl	800798c <USB_FlushTxFifo>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7ff f80f 	bl	80079f0 <USB_FlushRxFifo>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80089dc:	2300      	movs	r3, #0
 80089de:	61bb      	str	r3, [r7, #24]
 80089e0:	e01f      	b.n	8008a22 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a08:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a16:	461a      	mov	r2, r3
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	61bb      	str	r3, [r7, #24]
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	2b0f      	cmp	r3, #15
 8008a26:	d9dc      	bls.n	80089e2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61bb      	str	r3, [r7, #24]
 8008a2c:	e034      	b.n	8008a98 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a54:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a62:	461a      	mov	r2, r3
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a74:	d80c      	bhi.n	8008a90 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	015a      	lsls	r2, r3, #5
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a8c:	d0ec      	beq.n	8008a68 <USB_StopHost+0xc8>
 8008a8e:	e000      	b.n	8008a92 <USB_StopHost+0xf2>
        break;
 8008a90:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	3301      	adds	r3, #1
 8008a96:	61bb      	str	r3, [r7, #24]
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	2b0f      	cmp	r3, #15
 8008a9c:	d9c7      	bls.n	8008a2e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aaa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7fe fefb 	bl	80078b0 <USB_EnableGlobalInt>

  return ret;
 8008aba:	7ffb      	ldrb	r3, [r7, #31]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3720      	adds	r7, #32
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008ac4:	b590      	push	{r4, r7, lr}
 8008ac6:	b089      	sub	sp, #36	@ 0x24
 8008ac8:	af04      	add	r7, sp, #16
 8008aca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008acc:	2301      	movs	r3, #1
 8008ace:	2202      	movs	r2, #2
 8008ad0:	2102      	movs	r1, #2
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fc85 	bl	80093e2 <USBH_FindInterface>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	2bff      	cmp	r3, #255	@ 0xff
 8008ae0:	d002      	beq.n	8008ae8 <USBH_CDC_InterfaceInit+0x24>
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d901      	bls.n	8008aec <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e13d      	b.n	8008d68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
 8008aee:	4619      	mov	r1, r3
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fc5a 	bl	80093aa <USBH_SelectInterface>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008b00:	2302      	movs	r3, #2
 8008b02:	e131      	b.n	8008d68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008b0a:	2050      	movs	r0, #80	@ 0x50
 8008b0c:	f002 fb64 	bl	800b1d8 <malloc>
 8008b10:	4603      	mov	r3, r0
 8008b12:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008b24:	2302      	movs	r3, #2
 8008b26:	e11f      	b.n	8008d68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008b28:	2250      	movs	r2, #80	@ 0x50
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	68b8      	ldr	r0, [r7, #8]
 8008b2e:	f002 fc11 	bl	800b354 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	211a      	movs	r1, #26
 8008b38:	fb01 f303 	mul.w	r3, r1, r3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	b25b      	sxtb	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	da15      	bge.n	8008b76 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	211a      	movs	r1, #26
 8008b50:	fb01 f303 	mul.w	r3, r1, r3
 8008b54:	4413      	add	r3, r2
 8008b56:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008b5a:	781a      	ldrb	r2, [r3, #0]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	211a      	movs	r1, #26
 8008b66:	fb01 f303 	mul.w	r3, r1, r3
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008b70:	881a      	ldrh	r2, [r3, #0]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	785b      	ldrb	r3, [r3, #1]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 ffbe 	bl	800aafe <USBH_AllocPipe>
 8008b82:	4603      	mov	r3, r0
 8008b84:	461a      	mov	r2, r3
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	7819      	ldrb	r1, [r3, #0]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	7858      	ldrb	r0, [r3, #1]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	8952      	ldrh	r2, [r2, #10]
 8008ba2:	9202      	str	r2, [sp, #8]
 8008ba4:	2203      	movs	r2, #3
 8008ba6:	9201      	str	r2, [sp, #4]
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	4623      	mov	r3, r4
 8008bac:	4602      	mov	r2, r0
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f001 ff76 	bl	800aaa0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f002 fa85 	bl	800b0cc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	210a      	movs	r1, #10
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fc0a 	bl	80093e2 <USBH_FindInterface>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	2bff      	cmp	r3, #255	@ 0xff
 8008bd6:	d002      	beq.n	8008bde <USBH_CDC_InterfaceInit+0x11a>
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d901      	bls.n	8008be2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008bde:	2302      	movs	r3, #2
 8008be0:	e0c2      	b.n	8008d68 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	211a      	movs	r1, #26
 8008be8:	fb01 f303 	mul.w	r3, r1, r3
 8008bec:	4413      	add	r3, r2
 8008bee:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	b25b      	sxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	da16      	bge.n	8008c28 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	211a      	movs	r1, #26
 8008c00:	fb01 f303 	mul.w	r3, r1, r3
 8008c04:	4413      	add	r3, r2
 8008c06:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c0a:	781a      	ldrb	r2, [r3, #0]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	211a      	movs	r1, #26
 8008c16:	fb01 f303 	mul.w	r3, r1, r3
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008c20:	881a      	ldrh	r2, [r3, #0]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	835a      	strh	r2, [r3, #26]
 8008c26:	e015      	b.n	8008c54 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	211a      	movs	r1, #26
 8008c2e:	fb01 f303 	mul.w	r3, r1, r3
 8008c32:	4413      	add	r3, r2
 8008c34:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	211a      	movs	r1, #26
 8008c44:	fb01 f303 	mul.w	r3, r1, r3
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008c4e:	881a      	ldrh	r2, [r3, #0]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	211a      	movs	r1, #26
 8008c5a:	fb01 f303 	mul.w	r3, r1, r3
 8008c5e:	4413      	add	r3, r2
 8008c60:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	b25b      	sxtb	r3, r3
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	da16      	bge.n	8008c9a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	211a      	movs	r1, #26
 8008c72:	fb01 f303 	mul.w	r3, r1, r3
 8008c76:	4413      	add	r3, r2
 8008c78:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008c7c:	781a      	ldrb	r2, [r3, #0]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	211a      	movs	r1, #26
 8008c88:	fb01 f303 	mul.w	r3, r1, r3
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008c92:	881a      	ldrh	r2, [r3, #0]
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	835a      	strh	r2, [r3, #26]
 8008c98:	e015      	b.n	8008cc6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	211a      	movs	r1, #26
 8008ca0:	fb01 f303 	mul.w	r3, r1, r3
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008caa:	781a      	ldrb	r2, [r3, #0]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	211a      	movs	r1, #26
 8008cb6:	fb01 f303 	mul.w	r3, r1, r3
 8008cba:	4413      	add	r3, r2
 8008cbc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008cc0:	881a      	ldrh	r2, [r3, #0]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	7b9b      	ldrb	r3, [r3, #14]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 ff16 	bl	800aafe <USBH_AllocPipe>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	7bdb      	ldrb	r3, [r3, #15]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 ff0c 	bl	800aafe <USBH_AllocPipe>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	461a      	mov	r2, r3
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	7b59      	ldrb	r1, [r3, #13]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	7b98      	ldrb	r0, [r3, #14]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	8b12      	ldrh	r2, [r2, #24]
 8008d06:	9202      	str	r2, [sp, #8]
 8008d08:	2202      	movs	r2, #2
 8008d0a:	9201      	str	r2, [sp, #4]
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	4623      	mov	r3, r4
 8008d10:	4602      	mov	r2, r0
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f001 fec4 	bl	800aaa0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	7b19      	ldrb	r1, [r3, #12]
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	7bd8      	ldrb	r0, [r3, #15]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	8b52      	ldrh	r2, [r2, #26]
 8008d30:	9202      	str	r2, [sp, #8]
 8008d32:	2202      	movs	r2, #2
 8008d34:	9201      	str	r2, [sp, #4]
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	4623      	mov	r3, r4
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f001 feaf 	bl	800aaa0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	7b5b      	ldrb	r3, [r3, #13]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f002 f9ba 	bl	800b0cc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	7b1b      	ldrb	r3, [r3, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f002 f9b3 	bl	800b0cc <USBH_LL_SetToggle>

  return USBH_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd90      	pop	{r4, r7, pc}

08008d70 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00e      	beq.n	8008da8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f001 fea4 	bl	800aade <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f001 fecf 	bl	800ab40 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	7b1b      	ldrb	r3, [r3, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00e      	beq.n	8008dce <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	7b1b      	ldrb	r3, [r3, #12]
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f001 fe91 	bl	800aade <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	7b1b      	ldrb	r3, [r3, #12]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f001 febc 	bl	800ab40 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	7b5b      	ldrb	r3, [r3, #13]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00e      	beq.n	8008df4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	7b5b      	ldrb	r3, [r3, #13]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 fe7e 	bl	800aade <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	7b5b      	ldrb	r3, [r3, #13]
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 fea9 	bl	800ab40 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00b      	beq.n	8008e18 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f002 f9ed 	bl	800b1e8 <free>
    phost->pActiveClass->pData = 0U;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e14:	2200      	movs	r2, #0
 8008e16:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3340      	adds	r3, #64	@ 0x40
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f8b1 	bl	8008fa2 <GetLineCoding>
 8008e40:	4603      	mov	r3, r0
 8008e42:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008e44:	7afb      	ldrb	r3, [r7, #11]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d105      	bne.n	8008e56 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e50:	2102      	movs	r1, #2
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008e56:	7afb      	ldrb	r3, [r7, #11]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e76:	69db      	ldr	r3, [r3, #28]
 8008e78:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	d877      	bhi.n	8008f74 <USBH_CDC_Process+0x114>
 8008e84:	a201      	add	r2, pc, #4	@ (adr r2, 8008e8c <USBH_CDC_Process+0x2c>)
 8008e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8a:	bf00      	nop
 8008e8c:	08008ea1 	.word	0x08008ea1
 8008e90:	08008ea7 	.word	0x08008ea7
 8008e94:	08008ed7 	.word	0x08008ed7
 8008e98:	08008f4b 	.word	0x08008f4b
 8008e9c:	08008f59 	.word	0x08008f59
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ea4:	e06d      	b.n	8008f82 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f897 	bl	8008fe0 <SetLineCoding>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008eb6:	7bbb      	ldrb	r3, [r7, #14]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d104      	bne.n	8008ec6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008ec4:	e058      	b.n	8008f78 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d055      	beq.n	8008f78 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2204      	movs	r2, #4
 8008ed0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008ed4:	e050      	b.n	8008f78 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	3340      	adds	r3, #64	@ 0x40
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f860 	bl	8008fa2 <GetLineCoding>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d126      	bne.n	8008f3a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008efe:	791b      	ldrb	r3, [r3, #4]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d13b      	bne.n	8008f7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f0e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d133      	bne.n	8008f7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f1e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d12b      	bne.n	8008f7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f2c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d124      	bne.n	8008f7c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f958 	bl	80091e8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008f38:	e020      	b.n	8008f7c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008f3a:	7bbb      	ldrb	r3, [r7, #14]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d01d      	beq.n	8008f7c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2204      	movs	r2, #4
 8008f44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008f48:	e018      	b.n	8008f7c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f867 	bl	800901e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f8da 	bl	800910a <CDC_ProcessReception>
      break;
 8008f56:	e014      	b.n	8008f82 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008f58:	2100      	movs	r1, #0
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f001 f81a 	bl	8009f94 <USBH_ClrFeature>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10a      	bne.n	8008f80 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008f72:	e005      	b.n	8008f80 <USBH_CDC_Process+0x120>

    default:
      break;
 8008f74:	bf00      	nop
 8008f76:	e004      	b.n	8008f82 <USBH_CDC_Process+0x122>
      break;
 8008f78:	bf00      	nop
 8008f7a:	e002      	b.n	8008f82 <USBH_CDC_Process+0x122>
      break;
 8008f7c:	bf00      	nop
 8008f7e:	e000      	b.n	8008f82 <USBH_CDC_Process+0x122>
      break;
 8008f80:	bf00      	nop

  }

  return status;
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b082      	sub	sp, #8
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	22a1      	movs	r2, #161	@ 0xa1
 8008fb0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2221      	movs	r2, #33	@ 0x21
 8008fb6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2207      	movs	r2, #7
 8008fc8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	2207      	movs	r2, #7
 8008fce:	4619      	mov	r1, r3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f001 fb14 	bl	800a5fe <USBH_CtlReq>
 8008fd6:	4603      	mov	r3, r0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2221      	movs	r2, #33	@ 0x21
 8008fee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2207      	movs	r2, #7
 8009006:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	2207      	movs	r2, #7
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f001 faf5 	bl	800a5fe <USBH_CtlReq>
 8009014:	4603      	mov	r3, r0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b086      	sub	sp, #24
 8009022:	af02      	add	r7, sp, #8
 8009024:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009030:	2300      	movs	r3, #0
 8009032:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800903a:	2b01      	cmp	r3, #1
 800903c:	d002      	beq.n	8009044 <CDC_ProcessTransmission+0x26>
 800903e:	2b02      	cmp	r3, #2
 8009040:	d023      	beq.n	800908a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009042:	e05e      	b.n	8009102 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	8b12      	ldrh	r2, [r2, #24]
 800904c:	4293      	cmp	r3, r2
 800904e:	d90b      	bls.n	8009068 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	69d9      	ldr	r1, [r3, #28]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	8b1a      	ldrh	r2, [r3, #24]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	7b5b      	ldrb	r3, [r3, #13]
 800905c:	2001      	movs	r0, #1
 800905e:	9000      	str	r0, [sp, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f001 fcda 	bl	800aa1a <USBH_BulkSendData>
 8009066:	e00b      	b.n	8009080 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009070:	b29a      	uxth	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	7b5b      	ldrb	r3, [r3, #13]
 8009076:	2001      	movs	r0, #1
 8009078:	9000      	str	r0, [sp, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f001 fccd 	bl	800aa1a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2202      	movs	r2, #2
 8009084:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009088:	e03b      	b.n	8009102 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	7b5b      	ldrb	r3, [r3, #13]
 800908e:	4619      	mov	r1, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f001 fff1 	bl	800b078 <USBH_LL_GetURBState>
 8009096:	4603      	mov	r3, r0
 8009098:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800909a:	7afb      	ldrb	r3, [r7, #11]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d128      	bne.n	80090f2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	8b12      	ldrh	r2, [r2, #24]
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d90e      	bls.n	80090ca <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	8b12      	ldrh	r2, [r2, #24]
 80090b4:	1a9a      	subs	r2, r3, r2
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	8b12      	ldrh	r2, [r2, #24]
 80090c2:	441a      	add	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	61da      	str	r2, [r3, #28]
 80090c8:	e002      	b.n	80090d0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d004      	beq.n	80090e2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80090e0:	e00e      	b.n	8009100 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f868 	bl	80091c0 <USBH_CDC_TransmitCallback>
      break;
 80090f0:	e006      	b.n	8009100 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80090f2:	7afb      	ldrb	r3, [r7, #11]
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d103      	bne.n	8009100 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009100:	bf00      	nop
  }
}
 8009102:	bf00      	nop
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800911c:	2300      	movs	r3, #0
 800911e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009126:	2b03      	cmp	r3, #3
 8009128:	d002      	beq.n	8009130 <CDC_ProcessReception+0x26>
 800912a:	2b04      	cmp	r3, #4
 800912c:	d00e      	beq.n	800914c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800912e:	e043      	b.n	80091b8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	6a19      	ldr	r1, [r3, #32]
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	8b5a      	ldrh	r2, [r3, #26]
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	7b1b      	ldrb	r3, [r3, #12]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f001 fc91 	bl	800aa64 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2204      	movs	r2, #4
 8009146:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800914a:	e035      	b.n	80091b8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	7b1b      	ldrb	r3, [r3, #12]
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f001 ff90 	bl	800b078 <USBH_LL_GetURBState>
 8009158:	4603      	mov	r3, r0
 800915a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800915c:	7cfb      	ldrb	r3, [r7, #19]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d129      	bne.n	80091b6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	7b1b      	ldrb	r3, [r3, #12]
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 fef3 	bl	800af54 <USBH_LL_GetLastXferSize>
 800916e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	429a      	cmp	r2, r3
 8009178:	d016      	beq.n	80091a8 <CDC_ProcessReception+0x9e>
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	8b5b      	ldrh	r3, [r3, #26]
 800917e:	461a      	mov	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4293      	cmp	r3, r2
 8009184:	d910      	bls.n	80091a8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	1ad2      	subs	r2, r2, r3
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	6a1a      	ldr	r2, [r3, #32]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	441a      	add	r2, r3
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2203      	movs	r2, #3
 80091a2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80091a6:	e006      	b.n	80091b6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f80f 	bl	80091d4 <USBH_CDC_ReceiveCallback>
      break;
 80091b6:	bf00      	nop
  }
}
 80091b8:	bf00      	nop
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	4613      	mov	r3, r2
 8009208:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009210:	2302      	movs	r3, #2
 8009212:	e029      	b.n	8009268 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	79fa      	ldrb	r2, [r7, #7]
 8009218:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f81f 	bl	8009270 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f001 fdc3 	bl	800adec <USBH_LL_Init>

  return USBH_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800927c:	2300      	movs	r3, #0
 800927e:	60fb      	str	r3, [r7, #12]
 8009280:	e009      	b.n	8009296 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	33e0      	adds	r3, #224	@ 0xe0
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4413      	add	r3, r2
 800928c:	2200      	movs	r2, #0
 800928e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3301      	adds	r3, #1
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b0f      	cmp	r3, #15
 800929a:	d9f2      	bls.n	8009282 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800929c:	2300      	movs	r3, #0
 800929e:	60fb      	str	r3, [r7, #12]
 80092a0:	e009      	b.n	80092b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80092ac:	2200      	movs	r2, #0
 80092ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3301      	adds	r3, #1
 80092b4:	60fb      	str	r3, [r7, #12]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092bc:	d3f1      	bcc.n	80092a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2240      	movs	r2, #64	@ 0x40
 80092e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	331c      	adds	r3, #28
 800930e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009312:	2100      	movs	r1, #0
 8009314:	4618      	mov	r0, r3
 8009316:	f002 f81d 	bl	800b354 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009324:	2100      	movs	r1, #0
 8009326:	4618      	mov	r0, r3
 8009328:	f002 f814 	bl	800b354 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009332:	2212      	movs	r2, #18
 8009334:	2100      	movs	r1, #0
 8009336:	4618      	mov	r0, r3
 8009338:	f002 f80c 	bl	800b354 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009342:	223e      	movs	r2, #62	@ 0x3e
 8009344:	2100      	movs	r1, #0
 8009346:	4618      	mov	r0, r3
 8009348:	f002 f804 	bl	800b354 <memset>

  return USBH_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009356:	b480      	push	{r7}
 8009358:	b085      	sub	sp, #20
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d016      	beq.n	8009398 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10e      	bne.n	8009392 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800937a:	1c59      	adds	r1, r3, #1
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	33de      	adds	r3, #222	@ 0xde
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73fb      	strb	r3, [r7, #15]
 8009390:	e004      	b.n	800939c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009392:	2302      	movs	r3, #2
 8009394:	73fb      	strb	r3, [r7, #15]
 8009396:	e001      	b.n	800939c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009398:	2302      	movs	r3, #2
 800939a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b085      	sub	sp, #20
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	460b      	mov	r3, r1
 80093b4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80093c0:	78fa      	ldrb	r2, [r7, #3]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d204      	bcs.n	80093d0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	78fa      	ldrb	r2, [r7, #3]
 80093ca:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80093ce:	e001      	b.n	80093d4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80093d0:	2302      	movs	r3, #2
 80093d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b087      	sub	sp, #28
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	4608      	mov	r0, r1
 80093ec:	4611      	mov	r1, r2
 80093ee:	461a      	mov	r2, r3
 80093f0:	4603      	mov	r3, r0
 80093f2:	70fb      	strb	r3, [r7, #3]
 80093f4:	460b      	mov	r3, r1
 80093f6:	70bb      	strb	r3, [r7, #2]
 80093f8:	4613      	mov	r3, r2
 80093fa:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009400:	2300      	movs	r3, #0
 8009402:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800940a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800940c:	e025      	b.n	800945a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	221a      	movs	r2, #26
 8009412:	fb02 f303 	mul.w	r3, r2, r3
 8009416:	3308      	adds	r3, #8
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4413      	add	r3, r2
 800941c:	3302      	adds	r3, #2
 800941e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	795b      	ldrb	r3, [r3, #5]
 8009424:	78fa      	ldrb	r2, [r7, #3]
 8009426:	429a      	cmp	r2, r3
 8009428:	d002      	beq.n	8009430 <USBH_FindInterface+0x4e>
 800942a:	78fb      	ldrb	r3, [r7, #3]
 800942c:	2bff      	cmp	r3, #255	@ 0xff
 800942e:	d111      	bne.n	8009454 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009434:	78ba      	ldrb	r2, [r7, #2]
 8009436:	429a      	cmp	r2, r3
 8009438:	d002      	beq.n	8009440 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800943a:	78bb      	ldrb	r3, [r7, #2]
 800943c:	2bff      	cmp	r3, #255	@ 0xff
 800943e:	d109      	bne.n	8009454 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009444:	787a      	ldrb	r2, [r7, #1]
 8009446:	429a      	cmp	r2, r3
 8009448:	d002      	beq.n	8009450 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800944a:	787b      	ldrb	r3, [r7, #1]
 800944c:	2bff      	cmp	r3, #255	@ 0xff
 800944e:	d101      	bne.n	8009454 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	e006      	b.n	8009462 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009454:	7dfb      	ldrb	r3, [r7, #23]
 8009456:	3301      	adds	r3, #1
 8009458:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800945a:	7dfb      	ldrb	r3, [r7, #23]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d9d6      	bls.n	800940e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009460:	23ff      	movs	r3, #255	@ 0xff
}
 8009462:	4618      	mov	r0, r3
 8009464:	371c      	adds	r7, #28
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f001 fcf4 	bl	800ae64 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800947c:	2101      	movs	r1, #1
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 fe0d 	bl	800b09e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
	...

08009490 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b088      	sub	sp, #32
 8009494:	af04      	add	r7, sp, #16
 8009496:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009498:	2302      	movs	r3, #2
 800949a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800949c:	2300      	movs	r3, #0
 800949e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d102      	bne.n	80094b2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2203      	movs	r2, #3
 80094b0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	2b0b      	cmp	r3, #11
 80094ba:	f200 81bb 	bhi.w	8009834 <USBH_Process+0x3a4>
 80094be:	a201      	add	r2, pc, #4	@ (adr r2, 80094c4 <USBH_Process+0x34>)
 80094c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c4:	080094f5 	.word	0x080094f5
 80094c8:	08009527 	.word	0x08009527
 80094cc:	0800958f 	.word	0x0800958f
 80094d0:	080097cf 	.word	0x080097cf
 80094d4:	08009835 	.word	0x08009835
 80094d8:	0800962f 	.word	0x0800962f
 80094dc:	08009775 	.word	0x08009775
 80094e0:	08009665 	.word	0x08009665
 80094e4:	08009685 	.word	0x08009685
 80094e8:	080096a3 	.word	0x080096a3
 80094ec:	080096e7 	.word	0x080096e7
 80094f0:	080097b7 	.word	0x080097b7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 819b 	beq.w	8009838 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009508:	20c8      	movs	r0, #200	@ 0xc8
 800950a:	f001 fe12 	bl	800b132 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f001 fd05 	bl	800af1e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009524:	e188      	b.n	8009838 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800952c:	2b01      	cmp	r3, #1
 800952e:	d107      	bne.n	8009540 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2202      	movs	r2, #2
 800953c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800953e:	e18a      	b.n	8009856 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009546:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800954a:	d914      	bls.n	8009576 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009552:	3301      	adds	r3, #1
 8009554:	b2da      	uxtb	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009562:	2b03      	cmp	r3, #3
 8009564:	d903      	bls.n	800956e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	220d      	movs	r2, #13
 800956a:	701a      	strb	r2, [r3, #0]
      break;
 800956c:	e173      	b.n	8009856 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	701a      	strb	r2, [r3, #0]
      break;
 8009574:	e16f      	b.n	8009856 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800957c:	f103 020a 	add.w	r2, r3, #10
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009586:	200a      	movs	r0, #10
 8009588:	f001 fdd3 	bl	800b132 <USBH_Delay>
      break;
 800958c:	e163      	b.n	8009856 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009594:	2b00      	cmp	r3, #0
 8009596:	d005      	beq.n	80095a4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800959e:	2104      	movs	r1, #4
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80095a4:	2064      	movs	r0, #100	@ 0x64
 80095a6:	f001 fdc4 	bl	800b132 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 fc90 	bl	800aed0 <USBH_LL_GetSpeed>
 80095b0:	4603      	mov	r3, r0
 80095b2:	461a      	mov	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2205      	movs	r2, #5
 80095be:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80095c0:	2100      	movs	r1, #0
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 fa9b 	bl	800aafe <USBH_AllocPipe>
 80095c8:	4603      	mov	r3, r0
 80095ca:	461a      	mov	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80095d0:	2180      	movs	r1, #128	@ 0x80
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f001 fa93 	bl	800aafe <USBH_AllocPipe>
 80095d8:	4603      	mov	r3, r0
 80095da:	461a      	mov	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	7919      	ldrb	r1, [r3, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80095f4:	9202      	str	r2, [sp, #8]
 80095f6:	2200      	movs	r2, #0
 80095f8:	9201      	str	r2, [sp, #4]
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	4603      	mov	r3, r0
 80095fe:	2280      	movs	r2, #128	@ 0x80
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f001 fa4d 	bl	800aaa0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	7959      	ldrb	r1, [r3, #5]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800961a:	9202      	str	r2, [sp, #8]
 800961c:	2200      	movs	r2, #0
 800961e:	9201      	str	r2, [sp, #4]
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	4603      	mov	r3, r0
 8009624:	2200      	movs	r2, #0
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f001 fa3a 	bl	800aaa0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800962c:	e113      	b.n	8009856 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f916 	bl	8009860 <USBH_HandleEnum>
 8009634:	4603      	mov	r3, r0
 8009636:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009638:	7bbb      	ldrb	r3, [r7, #14]
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	f040 80fd 	bne.w	800983c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009650:	2b01      	cmp	r3, #1
 8009652:	d103      	bne.n	800965c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2208      	movs	r2, #8
 8009658:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800965a:	e0ef      	b.n	800983c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2207      	movs	r2, #7
 8009660:	701a      	strb	r2, [r3, #0]
      break;
 8009662:	e0eb      	b.n	800983c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800966a:	2b00      	cmp	r3, #0
 800966c:	f000 80e8 	beq.w	8009840 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009676:	2101      	movs	r1, #1
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2208      	movs	r2, #8
 8009680:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009682:	e0dd      	b.n	8009840 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 fc3a 	bl	8009f06 <USBH_SetCfg>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	f040 80d5 	bne.w	8009844 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2209      	movs	r2, #9
 800969e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096a0:	e0d0      	b.n	8009844 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80096a8:	f003 0320 	and.w	r3, r3, #32
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d016      	beq.n	80096de <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80096b0:	2101      	movs	r1, #1
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fc4a 	bl	8009f4c <USBH_SetFeature>
 80096b8:	4603      	mov	r3, r0
 80096ba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d103      	bne.n	80096cc <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	220a      	movs	r2, #10
 80096c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096ca:	e0bd      	b.n	8009848 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80096cc:	7bbb      	ldrb	r3, [r7, #14]
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	f040 80b9 	bne.w	8009848 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	220a      	movs	r2, #10
 80096da:	701a      	strb	r2, [r3, #0]
      break;
 80096dc:	e0b4      	b.n	8009848 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	220a      	movs	r2, #10
 80096e2:	701a      	strb	r2, [r3, #0]
      break;
 80096e4:	e0b0      	b.n	8009848 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 80ad 	beq.w	800984c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80096fa:	2300      	movs	r3, #0
 80096fc:	73fb      	strb	r3, [r7, #15]
 80096fe:	e016      	b.n	800972e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009700:	7bfa      	ldrb	r2, [r7, #15]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	32de      	adds	r2, #222	@ 0xde
 8009706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970a:	791a      	ldrb	r2, [r3, #4]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009712:	429a      	cmp	r2, r3
 8009714:	d108      	bne.n	8009728 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009716:	7bfa      	ldrb	r2, [r7, #15]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	32de      	adds	r2, #222	@ 0xde
 800971c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009726:	e005      	b.n	8009734 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009728:	7bfb      	ldrb	r3, [r7, #15]
 800972a:	3301      	adds	r3, #1
 800972c:	73fb      	strb	r3, [r7, #15]
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d0e5      	beq.n	8009700 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800973a:	2b00      	cmp	r3, #0
 800973c:	d016      	beq.n	800976c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	4798      	blx	r3
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d109      	bne.n	8009764 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2206      	movs	r2, #6
 8009754:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800975c:	2103      	movs	r1, #3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009762:	e073      	b.n	800984c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	220d      	movs	r2, #13
 8009768:	701a      	strb	r2, [r3, #0]
      break;
 800976a:	e06f      	b.n	800984c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	220d      	movs	r2, #13
 8009770:	701a      	strb	r2, [r3, #0]
      break;
 8009772:	e06b      	b.n	800984c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800977a:	2b00      	cmp	r3, #0
 800977c:	d017      	beq.n	80097ae <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	4798      	blx	r3
 800978a:	4603      	mov	r3, r0
 800978c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b00      	cmp	r3, #0
 8009794:	d103      	bne.n	800979e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	220b      	movs	r2, #11
 800979a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800979c:	e058      	b.n	8009850 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d154      	bne.n	8009850 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	220d      	movs	r2, #13
 80097aa:	701a      	strb	r2, [r3, #0]
      break;
 80097ac:	e050      	b.n	8009850 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	220d      	movs	r2, #13
 80097b2:	701a      	strb	r2, [r3, #0]
      break;
 80097b4:	e04c      	b.n	8009850 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d049      	beq.n	8009854 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	4798      	blx	r3
      }
      break;
 80097cc:	e042      	b.n	8009854 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7ff fd4a 	bl	8009270 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d009      	beq.n	80097fa <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009800:	2b00      	cmp	r3, #0
 8009802:	d005      	beq.n	8009810 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800980a:	2105      	movs	r1, #5
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b01      	cmp	r3, #1
 800981a:	d107      	bne.n	800982c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff fe22 	bl	800946e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800982a:	e014      	b.n	8009856 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f001 fb19 	bl	800ae64 <USBH_LL_Start>
      break;
 8009832:	e010      	b.n	8009856 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009834:	bf00      	nop
 8009836:	e00e      	b.n	8009856 <USBH_Process+0x3c6>
      break;
 8009838:	bf00      	nop
 800983a:	e00c      	b.n	8009856 <USBH_Process+0x3c6>
      break;
 800983c:	bf00      	nop
 800983e:	e00a      	b.n	8009856 <USBH_Process+0x3c6>
    break;
 8009840:	bf00      	nop
 8009842:	e008      	b.n	8009856 <USBH_Process+0x3c6>
      break;
 8009844:	bf00      	nop
 8009846:	e006      	b.n	8009856 <USBH_Process+0x3c6>
      break;
 8009848:	bf00      	nop
 800984a:	e004      	b.n	8009856 <USBH_Process+0x3c6>
      break;
 800984c:	bf00      	nop
 800984e:	e002      	b.n	8009856 <USBH_Process+0x3c6>
      break;
 8009850:	bf00      	nop
 8009852:	e000      	b.n	8009856 <USBH_Process+0x3c6>
      break;
 8009854:	bf00      	nop
  }
  return USBH_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b088      	sub	sp, #32
 8009864:	af04      	add	r7, sp, #16
 8009866:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009868:	2301      	movs	r3, #1
 800986a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800986c:	2301      	movs	r3, #1
 800986e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	785b      	ldrb	r3, [r3, #1]
 8009874:	2b07      	cmp	r3, #7
 8009876:	f200 81bd 	bhi.w	8009bf4 <USBH_HandleEnum+0x394>
 800987a:	a201      	add	r2, pc, #4	@ (adr r2, 8009880 <USBH_HandleEnum+0x20>)
 800987c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009880:	080098a1 	.word	0x080098a1
 8009884:	0800995b 	.word	0x0800995b
 8009888:	080099c5 	.word	0x080099c5
 800988c:	08009a4f 	.word	0x08009a4f
 8009890:	08009ab9 	.word	0x08009ab9
 8009894:	08009b29 	.word	0x08009b29
 8009898:	08009b6f 	.word	0x08009b6f
 800989c:	08009bb5 	.word	0x08009bb5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80098a0:	2108      	movs	r1, #8
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fa4c 	bl	8009d40 <USBH_Get_DevDesc>
 80098a8:	4603      	mov	r3, r0
 80098aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098ac:	7bbb      	ldrb	r3, [r7, #14]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d12e      	bne.n	8009910 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	7919      	ldrb	r1, [r3, #4]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80098d6:	9202      	str	r2, [sp, #8]
 80098d8:	2200      	movs	r2, #0
 80098da:	9201      	str	r2, [sp, #4]
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	4603      	mov	r3, r0
 80098e0:	2280      	movs	r2, #128	@ 0x80
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f001 f8dc 	bl	800aaa0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	7959      	ldrb	r1, [r3, #5]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80098fc:	9202      	str	r2, [sp, #8]
 80098fe:	2200      	movs	r2, #0
 8009900:	9201      	str	r2, [sp, #4]
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	4603      	mov	r3, r0
 8009906:	2200      	movs	r2, #0
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f001 f8c9 	bl	800aaa0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800990e:	e173      	b.n	8009bf8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009910:	7bbb      	ldrb	r3, [r7, #14]
 8009912:	2b03      	cmp	r3, #3
 8009914:	f040 8170 	bne.w	8009bf8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800991e:	3301      	adds	r3, #1
 8009920:	b2da      	uxtb	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800992e:	2b03      	cmp	r3, #3
 8009930:	d903      	bls.n	800993a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	220d      	movs	r2, #13
 8009936:	701a      	strb	r2, [r3, #0]
      break;
 8009938:	e15e      	b.n	8009bf8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	795b      	ldrb	r3, [r3, #5]
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f001 f8fd 	bl	800ab40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	791b      	ldrb	r3, [r3, #4]
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 f8f7 	bl	800ab40 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	701a      	strb	r2, [r3, #0]
      break;
 8009958:	e14e      	b.n	8009bf8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800995a:	2112      	movs	r1, #18
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f9ef 	bl	8009d40 <USBH_Get_DevDesc>
 8009962:	4603      	mov	r3, r0
 8009964:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009966:	7bbb      	ldrb	r3, [r7, #14]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d103      	bne.n	8009974 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009972:	e143      	b.n	8009bfc <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	2b03      	cmp	r3, #3
 8009978:	f040 8140 	bne.w	8009bfc <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009982:	3301      	adds	r3, #1
 8009984:	b2da      	uxtb	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009992:	2b03      	cmp	r3, #3
 8009994:	d903      	bls.n	800999e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	220d      	movs	r2, #13
 800999a:	701a      	strb	r2, [r3, #0]
      break;
 800999c:	e12e      	b.n	8009bfc <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	795b      	ldrb	r3, [r3, #5]
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 f8cb 	bl	800ab40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	791b      	ldrb	r3, [r3, #4]
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f001 f8c5 	bl	800ab40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	701a      	strb	r2, [r3, #0]
      break;
 80099c2:	e11b      	b.n	8009bfc <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80099c4:	2101      	movs	r1, #1
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fa79 	bl	8009ebe <USBH_SetAddress>
 80099cc:	4603      	mov	r3, r0
 80099ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d130      	bne.n	8009a38 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80099d6:	2002      	movs	r0, #2
 80099d8:	f001 fbab 	bl	800b132 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2203      	movs	r2, #3
 80099e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	7919      	ldrb	r1, [r3, #4]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80099fe:	9202      	str	r2, [sp, #8]
 8009a00:	2200      	movs	r2, #0
 8009a02:	9201      	str	r2, [sp, #4]
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	4603      	mov	r3, r0
 8009a08:	2280      	movs	r2, #128	@ 0x80
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f001 f848 	bl	800aaa0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	7959      	ldrb	r1, [r3, #5]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a24:	9202      	str	r2, [sp, #8]
 8009a26:	2200      	movs	r2, #0
 8009a28:	9201      	str	r2, [sp, #4]
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2200      	movs	r2, #0
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f001 f835 	bl	800aaa0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009a36:	e0e3      	b.n	8009c00 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	f040 80e0 	bne.w	8009c00 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	220d      	movs	r2, #13
 8009a44:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	705a      	strb	r2, [r3, #1]
      break;
 8009a4c:	e0d8      	b.n	8009c00 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009a4e:	2109      	movs	r1, #9
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 f9a1 	bl	8009d98 <USBH_Get_CfgDesc>
 8009a56:	4603      	mov	r3, r0
 8009a58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a5a:	7bbb      	ldrb	r3, [r7, #14]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d103      	bne.n	8009a68 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2204      	movs	r2, #4
 8009a64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a66:	e0cd      	b.n	8009c04 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	f040 80ca 	bne.w	8009c04 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009a76:	3301      	adds	r3, #1
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009a86:	2b03      	cmp	r3, #3
 8009a88:	d903      	bls.n	8009a92 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	220d      	movs	r2, #13
 8009a8e:	701a      	strb	r2, [r3, #0]
      break;
 8009a90:	e0b8      	b.n	8009c04 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	795b      	ldrb	r3, [r3, #5]
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 f851 	bl	800ab40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	791b      	ldrb	r3, [r3, #4]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 f84b 	bl	800ab40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	701a      	strb	r2, [r3, #0]
      break;
 8009ab6:	e0a5      	b.n	8009c04 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f969 	bl	8009d98 <USBH_Get_CfgDesc>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d103      	bne.n	8009ad8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2205      	movs	r2, #5
 8009ad4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ad6:	e097      	b.n	8009c08 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	f040 8094 	bne.w	8009c08 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d903      	bls.n	8009b02 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	220d      	movs	r2, #13
 8009afe:	701a      	strb	r2, [r3, #0]
      break;
 8009b00:	e082      	b.n	8009c08 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	795b      	ldrb	r3, [r3, #5]
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 f819 	bl	800ab40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	791b      	ldrb	r3, [r3, #4]
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f001 f813 	bl	800ab40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	701a      	strb	r2, [r3, #0]
      break;
 8009b26:	e06f      	b.n	8009c08 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d019      	beq.n	8009b66 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b3e:	23ff      	movs	r3, #255	@ 0xff
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f953 	bl	8009dec <USBH_Get_StringDesc>
 8009b46:	4603      	mov	r3, r0
 8009b48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b4a:	7bbb      	ldrb	r3, [r7, #14]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d103      	bne.n	8009b58 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2206      	movs	r2, #6
 8009b54:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009b56:	e059      	b.n	8009c0c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d156      	bne.n	8009c0c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2206      	movs	r2, #6
 8009b62:	705a      	strb	r2, [r3, #1]
      break;
 8009b64:	e052      	b.n	8009c0c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2206      	movs	r2, #6
 8009b6a:	705a      	strb	r2, [r3, #1]
      break;
 8009b6c:	e04e      	b.n	8009c0c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d019      	beq.n	8009bac <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009b84:	23ff      	movs	r3, #255	@ 0xff
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f930 	bl	8009dec <USBH_Get_StringDesc>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b90:	7bbb      	ldrb	r3, [r7, #14]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d103      	bne.n	8009b9e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2207      	movs	r2, #7
 8009b9a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009b9c:	e038      	b.n	8009c10 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	2b03      	cmp	r3, #3
 8009ba2:	d135      	bne.n	8009c10 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2207      	movs	r2, #7
 8009ba8:	705a      	strb	r2, [r3, #1]
      break;
 8009baa:	e031      	b.n	8009c10 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2207      	movs	r2, #7
 8009bb0:	705a      	strb	r2, [r3, #1]
      break;
 8009bb2:	e02d      	b.n	8009c10 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d017      	beq.n	8009bee <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009bca:	23ff      	movs	r3, #255	@ 0xff
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f90d 	bl	8009dec <USBH_Get_StringDesc>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009bd6:	7bbb      	ldrb	r3, [r7, #14]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d102      	bne.n	8009be2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009be0:	e018      	b.n	8009c14 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009be2:	7bbb      	ldrb	r3, [r7, #14]
 8009be4:	2b03      	cmp	r3, #3
 8009be6:	d115      	bne.n	8009c14 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	73fb      	strb	r3, [r7, #15]
      break;
 8009bec:	e012      	b.n	8009c14 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8009bf2:	e00f      	b.n	8009c14 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009bf4:	bf00      	nop
 8009bf6:	e00e      	b.n	8009c16 <USBH_HandleEnum+0x3b6>
      break;
 8009bf8:	bf00      	nop
 8009bfa:	e00c      	b.n	8009c16 <USBH_HandleEnum+0x3b6>
      break;
 8009bfc:	bf00      	nop
 8009bfe:	e00a      	b.n	8009c16 <USBH_HandleEnum+0x3b6>
      break;
 8009c00:	bf00      	nop
 8009c02:	e008      	b.n	8009c16 <USBH_HandleEnum+0x3b6>
      break;
 8009c04:	bf00      	nop
 8009c06:	e006      	b.n	8009c16 <USBH_HandleEnum+0x3b6>
      break;
 8009c08:	bf00      	nop
 8009c0a:	e004      	b.n	8009c16 <USBH_HandleEnum+0x3b6>
      break;
 8009c0c:	bf00      	nop
 8009c0e:	e002      	b.n	8009c16 <USBH_HandleEnum+0x3b6>
      break;
 8009c10:	bf00      	nop
 8009c12:	e000      	b.n	8009c16 <USBH_HandleEnum+0x3b6>
      break;
 8009c14:	bf00      	nop
  }
  return Status;
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009c32:	bf00      	nop
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b082      	sub	sp, #8
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009c4c:	1c5a      	adds	r2, r3, #1
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f804 	bl	8009c62 <USBH_HandleSof>
}
 8009c5a:	bf00      	nop
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b082      	sub	sp, #8
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b0b      	cmp	r3, #11
 8009c72:	d10a      	bne.n	8009c8a <USBH_HandleSof+0x28>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d005      	beq.n	8009c8a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	4798      	blx	r3
  }
}
 8009c8a:	bf00      	nop
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009ca2:	bf00      	nop
}
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b083      	sub	sp, #12
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009cbe:	bf00      	nop
}
 8009cc0:	370c      	adds	r7, #12
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b083      	sub	sp, #12
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f001 f8be 	bl	800ae9a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	791b      	ldrb	r3, [r3, #4]
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 ff0b 	bl	800ab40 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	795b      	ldrb	r3, [r3, #5]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 ff05 	bl	800ab40 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af02      	add	r7, sp, #8
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009d4c:	887b      	ldrh	r3, [r7, #2]
 8009d4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d52:	d901      	bls.n	8009d58 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009d54:	2303      	movs	r3, #3
 8009d56:	e01b      	b.n	8009d90 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009d5e:	887b      	ldrh	r3, [r7, #2]
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	4613      	mov	r3, r2
 8009d64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d68:	2100      	movs	r1, #0
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f872 	bl	8009e54 <USBH_GetDescriptor>
 8009d70:	4603      	mov	r3, r0
 8009d72:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d109      	bne.n	8009d8e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009d80:	887a      	ldrh	r2, [r7, #2]
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f929 	bl	8009fdc <USBH_ParseDevDesc>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af02      	add	r7, sp, #8
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	331c      	adds	r3, #28
 8009da8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009daa:	887b      	ldrh	r3, [r7, #2]
 8009dac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009db0:	d901      	bls.n	8009db6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009db2:	2303      	movs	r3, #3
 8009db4:	e016      	b.n	8009de4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009db6:	887b      	ldrh	r3, [r7, #2]
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f846 	bl	8009e54 <USBH_GetDescriptor>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d107      	bne.n	8009de2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009dd2:	887b      	ldrh	r3, [r7, #2]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	68b9      	ldr	r1, [r7, #8]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f9af 	bl	800a13c <USBH_ParseCfgDesc>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b088      	sub	sp, #32
 8009df0:	af02      	add	r7, sp, #8
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	607a      	str	r2, [r7, #4]
 8009df6:	461a      	mov	r2, r3
 8009df8:	460b      	mov	r3, r1
 8009dfa:	72fb      	strb	r3, [r7, #11]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009e00:	893b      	ldrh	r3, [r7, #8]
 8009e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e06:	d802      	bhi.n	8009e0e <USBH_Get_StringDesc+0x22>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e01c      	b.n	8009e4c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009e12:	7afb      	ldrb	r3, [r7, #11]
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009e1a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009e22:	893b      	ldrh	r3, [r7, #8]
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	460b      	mov	r3, r1
 8009e28:	2100      	movs	r1, #0
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 f812 	bl	8009e54 <USBH_GetDescriptor>
 8009e30:	4603      	mov	r3, r0
 8009e32:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009e34:	7dfb      	ldrb	r3, [r7, #23]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d107      	bne.n	8009e4a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009e40:	893a      	ldrh	r2, [r7, #8]
 8009e42:	6879      	ldr	r1, [r7, #4]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 fb8d 	bl	800a564 <USBH_ParseStringDesc>
  }

  return status;
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	607b      	str	r3, [r7, #4]
 8009e5e:	460b      	mov	r3, r1
 8009e60:	72fb      	strb	r3, [r7, #11]
 8009e62:	4613      	mov	r3, r2
 8009e64:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	789b      	ldrb	r3, [r3, #2]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d11c      	bne.n	8009ea8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009e6e:	7afb      	ldrb	r3, [r7, #11]
 8009e70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2206      	movs	r2, #6
 8009e7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	893a      	ldrh	r2, [r7, #8]
 8009e84:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009e86:	893b      	ldrh	r3, [r7, #8]
 8009e88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009e8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e90:	d104      	bne.n	8009e9c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f240 4209 	movw	r2, #1033	@ 0x409
 8009e98:	829a      	strh	r2, [r3, #20]
 8009e9a:	e002      	b.n	8009ea2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	8b3a      	ldrh	r2, [r7, #24]
 8009ea6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009ea8:	8b3b      	ldrh	r3, [r7, #24]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	6879      	ldr	r1, [r7, #4]
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f000 fba5 	bl	800a5fe <USBH_CtlReq>
 8009eb4:	4603      	mov	r3, r0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b082      	sub	sp, #8
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	789b      	ldrb	r3, [r3, #2]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d10f      	bne.n	8009ef2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2205      	movs	r2, #5
 8009edc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009ede:	78fb      	ldrb	r3, [r7, #3]
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fb81 	bl	800a5fe <USBH_CtlReq>
 8009efc:	4603      	mov	r3, r0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	789b      	ldrb	r3, [r3, #2]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d10e      	bne.n	8009f38 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2209      	movs	r2, #9
 8009f24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	887a      	ldrh	r2, [r7, #2]
 8009f2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f38:	2200      	movs	r2, #0
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fb5e 	bl	800a5fe <USBH_CtlReq>
 8009f42:	4603      	mov	r3, r0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	460b      	mov	r3, r1
 8009f56:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	789b      	ldrb	r3, [r3, #2]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d10f      	bne.n	8009f80 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2203      	movs	r2, #3
 8009f6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009f6c:	78fb      	ldrb	r3, [r7, #3]
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f80:	2200      	movs	r2, #0
 8009f82:	2100      	movs	r1, #0
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fb3a 	bl	800a5fe <USBH_CtlReq>
 8009f8a:	4603      	mov	r3, r0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	789b      	ldrb	r3, [r3, #2]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d10f      	bne.n	8009fc8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2202      	movs	r2, #2
 8009fac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009fc8:	2200      	movs	r2, #0
 8009fca:	2100      	movs	r1, #0
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 fb16 	bl	800a5fe <USBH_CtlReq>
 8009fd2:	4603      	mov	r3, r0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009ff0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e094      	b.n	800a12a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	781a      	ldrb	r2, [r3, #0]
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	785a      	ldrb	r2, [r3, #1]
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	3302      	adds	r3, #2
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	461a      	mov	r2, r3
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	3303      	adds	r3, #3
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	021b      	lsls	r3, r3, #8
 800a020:	b29b      	uxth	r3, r3
 800a022:	4313      	orrs	r3, r2
 800a024:	b29a      	uxth	r2, r3
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	791a      	ldrb	r2, [r3, #4]
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	795a      	ldrb	r2, [r3, #5]
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	799a      	ldrb	r2, [r3, #6]
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	79da      	ldrb	r2, [r3, #7]
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d11b      	bne.n	800a096 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	79db      	ldrb	r3, [r3, #7]
 800a062:	2b20      	cmp	r3, #32
 800a064:	dc0f      	bgt.n	800a086 <USBH_ParseDevDesc+0xaa>
 800a066:	2b08      	cmp	r3, #8
 800a068:	db0f      	blt.n	800a08a <USBH_ParseDevDesc+0xae>
 800a06a:	3b08      	subs	r3, #8
 800a06c:	4a32      	ldr	r2, [pc, #200]	@ (800a138 <USBH_ParseDevDesc+0x15c>)
 800a06e:	fa22 f303 	lsr.w	r3, r2, r3
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	bf14      	ite	ne
 800a07a:	2301      	movne	r3, #1
 800a07c:	2300      	moveq	r3, #0
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	d106      	bne.n	800a092 <USBH_ParseDevDesc+0xb6>
 800a084:	e001      	b.n	800a08a <USBH_ParseDevDesc+0xae>
 800a086:	2b40      	cmp	r3, #64	@ 0x40
 800a088:	d003      	beq.n	800a092 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	2208      	movs	r2, #8
 800a08e:	71da      	strb	r2, [r3, #7]
        break;
 800a090:	e000      	b.n	800a094 <USBH_ParseDevDesc+0xb8>
        break;
 800a092:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a094:	e00e      	b.n	800a0b4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d107      	bne.n	800a0b0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	79db      	ldrb	r3, [r3, #7]
 800a0a4:	2b08      	cmp	r3, #8
 800a0a6:	d005      	beq.n	800a0b4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	2208      	movs	r2, #8
 800a0ac:	71da      	strb	r2, [r3, #7]
 800a0ae:	e001      	b.n	800a0b4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a0b4:	88fb      	ldrh	r3, [r7, #6]
 800a0b6:	2b08      	cmp	r3, #8
 800a0b8:	d936      	bls.n	800a128 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	3309      	adds	r3, #9
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	021b      	lsls	r3, r3, #8
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	330a      	adds	r3, #10
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	330b      	adds	r3, #11
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	021b      	lsls	r3, r3, #8
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	330c      	adds	r3, #12
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	330d      	adds	r3, #13
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	021b      	lsls	r3, r3, #8
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	4313      	orrs	r3, r2
 800a102:	b29a      	uxth	r2, r3
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	7b9a      	ldrb	r2, [r3, #14]
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	7bda      	ldrb	r2, [r3, #15]
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	7c1a      	ldrb	r2, [r3, #16]
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	7c5a      	ldrb	r2, [r3, #17]
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a128:	7dfb      	ldrb	r3, [r7, #23]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	371c      	adds	r7, #28
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	01000101 	.word	0x01000101

0800a13c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b08c      	sub	sp, #48	@ 0x30
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	4613      	mov	r3, r2
 800a148:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a150:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a158:	2300      	movs	r3, #0
 800a15a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a15e:	2300      	movs	r3, #0
 800a160:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a16a:	2302      	movs	r3, #2
 800a16c:	e0da      	b.n	800a324 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	781a      	ldrb	r2, [r3, #0]
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	785a      	ldrb	r2, [r3, #1]
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	3302      	adds	r3, #2
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	461a      	mov	r2, r3
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	3303      	adds	r3, #3
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	021b      	lsls	r3, r3, #8
 800a192:	b29b      	uxth	r3, r3
 800a194:	4313      	orrs	r3, r2
 800a196:	b29b      	uxth	r3, r3
 800a198:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a19c:	bf28      	it	cs
 800a19e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	6a3b      	ldr	r3, [r7, #32]
 800a1a6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	791a      	ldrb	r2, [r3, #4]
 800a1ac:	6a3b      	ldr	r3, [r7, #32]
 800a1ae:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	795a      	ldrb	r2, [r3, #5]
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	799a      	ldrb	r2, [r3, #6]
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	79da      	ldrb	r2, [r3, #7]
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	7a1a      	ldrb	r2, [r3, #8]
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b09      	cmp	r3, #9
 800a1d6:	d002      	beq.n	800a1de <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	2209      	movs	r2, #9
 800a1dc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a1de:	88fb      	ldrh	r3, [r7, #6]
 800a1e0:	2b09      	cmp	r3, #9
 800a1e2:	f240 809d 	bls.w	800a320 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a1e6:	2309      	movs	r3, #9
 800a1e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a1ee:	e081      	b.n	800a2f4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a1f0:	f107 0316 	add.w	r3, r7, #22
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1f8:	f000 f9e7 	bl	800a5ca <USBH_GetNextDesc>
 800a1fc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a200:	785b      	ldrb	r3, [r3, #1]
 800a202:	2b04      	cmp	r3, #4
 800a204:	d176      	bne.n	800a2f4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	2b09      	cmp	r3, #9
 800a20c:	d002      	beq.n	800a214 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a210:	2209      	movs	r2, #9
 800a212:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a218:	221a      	movs	r2, #26
 800a21a:	fb02 f303 	mul.w	r3, r2, r3
 800a21e:	3308      	adds	r3, #8
 800a220:	6a3a      	ldr	r2, [r7, #32]
 800a222:	4413      	add	r3, r2
 800a224:	3302      	adds	r3, #2
 800a226:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a22a:	69f8      	ldr	r0, [r7, #28]
 800a22c:	f000 f87e 	bl	800a32c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a230:	2300      	movs	r3, #0
 800a232:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a236:	2300      	movs	r3, #0
 800a238:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a23a:	e043      	b.n	800a2c4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a23c:	f107 0316 	add.w	r3, r7, #22
 800a240:	4619      	mov	r1, r3
 800a242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a244:	f000 f9c1 	bl	800a5ca <USBH_GetNextDesc>
 800a248:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24c:	785b      	ldrb	r3, [r3, #1]
 800a24e:	2b05      	cmp	r3, #5
 800a250:	d138      	bne.n	800a2c4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	795b      	ldrb	r3, [r3, #5]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d113      	bne.n	800a282 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d003      	beq.n	800a26a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	799b      	ldrb	r3, [r3, #6]
 800a266:	2b03      	cmp	r3, #3
 800a268:	d10b      	bne.n	800a282 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	79db      	ldrb	r3, [r3, #7]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10b      	bne.n	800a28a <USBH_ParseCfgDesc+0x14e>
 800a272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	2b09      	cmp	r3, #9
 800a278:	d007      	beq.n	800a28a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27c:	2209      	movs	r2, #9
 800a27e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a280:	e003      	b.n	800a28a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a284:	2207      	movs	r2, #7
 800a286:	701a      	strb	r2, [r3, #0]
 800a288:	e000      	b.n	800a28c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a28a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a28c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a290:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a294:	3201      	adds	r2, #1
 800a296:	00d2      	lsls	r2, r2, #3
 800a298:	211a      	movs	r1, #26
 800a29a:	fb01 f303 	mul.w	r3, r1, r3
 800a29e:	4413      	add	r3, r2
 800a2a0:	3308      	adds	r3, #8
 800a2a2:	6a3a      	ldr	r2, [r7, #32]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a2aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a2ac:	69b9      	ldr	r1, [r7, #24]
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 f870 	bl	800a394 <USBH_ParseEPDesc>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a2ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2be:	3301      	adds	r3, #1
 800a2c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	791b      	ldrb	r3, [r3, #4]
 800a2c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d204      	bcs.n	800a2da <USBH_ParseCfgDesc+0x19e>
 800a2d0:	6a3b      	ldr	r3, [r7, #32]
 800a2d2:	885a      	ldrh	r2, [r3, #2]
 800a2d4:	8afb      	ldrh	r3, [r7, #22]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d8b0      	bhi.n	800a23c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	791b      	ldrb	r3, [r3, #4]
 800a2de:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d201      	bcs.n	800a2ea <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e01c      	b.n	800a324 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a2ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d805      	bhi.n	800a308 <USBH_ParseCfgDesc+0x1cc>
 800a2fc:	6a3b      	ldr	r3, [r7, #32]
 800a2fe:	885a      	ldrh	r2, [r3, #2]
 800a300:	8afb      	ldrh	r3, [r7, #22]
 800a302:	429a      	cmp	r2, r3
 800a304:	f63f af74 	bhi.w	800a1f0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	791b      	ldrb	r3, [r3, #4]
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	bf28      	it	cs
 800a310:	2302      	movcs	r3, #2
 800a312:	b2db      	uxtb	r3, r3
 800a314:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a318:	429a      	cmp	r2, r3
 800a31a:	d201      	bcs.n	800a320 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a31c:	2303      	movs	r3, #3
 800a31e:	e001      	b.n	800a324 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a320:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a324:	4618      	mov	r0, r3
 800a326:	3730      	adds	r7, #48	@ 0x30
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781a      	ldrb	r2, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	785a      	ldrb	r2, [r3, #1]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	789a      	ldrb	r2, [r3, #2]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	78da      	ldrb	r2, [r3, #3]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	3304      	adds	r3, #4
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	bf28      	it	cs
 800a360:	2302      	movcs	r3, #2
 800a362:	b2da      	uxtb	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	795a      	ldrb	r2, [r3, #5]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	799a      	ldrb	r2, [r3, #6]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	79da      	ldrb	r2, [r3, #7]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	7a1a      	ldrb	r2, [r3, #8]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	721a      	strb	r2, [r3, #8]
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a394:	b480      	push	{r7}
 800a396:	b087      	sub	sp, #28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	781a      	ldrb	r2, [r3, #0]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	785a      	ldrb	r2, [r3, #1]
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	789a      	ldrb	r2, [r3, #2]
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	78da      	ldrb	r2, [r3, #3]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	3305      	adds	r3, #5
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	021b      	lsls	r3, r3, #8
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	799a      	ldrb	r2, [r3, #6]
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	889b      	ldrh	r3, [r3, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d009      	beq.n	800a402 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a3f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3f6:	d804      	bhi.n	800a402 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a3fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a400:	d901      	bls.n	800a406 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a402:	2303      	movs	r3, #3
 800a404:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d136      	bne.n	800a47e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	78db      	ldrb	r3, [r3, #3]
 800a414:	f003 0303 	and.w	r3, r3, #3
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d108      	bne.n	800a42e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	889b      	ldrh	r3, [r3, #4]
 800a420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a424:	f240 8097 	bls.w	800a556 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a428:	2303      	movs	r3, #3
 800a42a:	75fb      	strb	r3, [r7, #23]
 800a42c:	e093      	b.n	800a556 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	78db      	ldrb	r3, [r3, #3]
 800a432:	f003 0303 	and.w	r3, r3, #3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d107      	bne.n	800a44a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	889b      	ldrh	r3, [r3, #4]
 800a43e:	2b40      	cmp	r3, #64	@ 0x40
 800a440:	f240 8089 	bls.w	800a556 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a444:	2303      	movs	r3, #3
 800a446:	75fb      	strb	r3, [r7, #23]
 800a448:	e085      	b.n	800a556 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	78db      	ldrb	r3, [r3, #3]
 800a44e:	f003 0303 	and.w	r3, r3, #3
 800a452:	2b01      	cmp	r3, #1
 800a454:	d005      	beq.n	800a462 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	78db      	ldrb	r3, [r3, #3]
 800a45a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a45e:	2b03      	cmp	r3, #3
 800a460:	d10a      	bne.n	800a478 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	799b      	ldrb	r3, [r3, #6]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <USBH_ParseEPDesc+0xde>
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	799b      	ldrb	r3, [r3, #6]
 800a46e:	2b10      	cmp	r3, #16
 800a470:	d970      	bls.n	800a554 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a472:	2303      	movs	r3, #3
 800a474:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a476:	e06d      	b.n	800a554 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a478:	2303      	movs	r3, #3
 800a47a:	75fb      	strb	r3, [r7, #23]
 800a47c:	e06b      	b.n	800a556 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a484:	2b01      	cmp	r3, #1
 800a486:	d13c      	bne.n	800a502 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	78db      	ldrb	r3, [r3, #3]
 800a48c:	f003 0303 	and.w	r3, r3, #3
 800a490:	2b02      	cmp	r3, #2
 800a492:	d005      	beq.n	800a4a0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	78db      	ldrb	r3, [r3, #3]
 800a498:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d106      	bne.n	800a4ae <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	889b      	ldrh	r3, [r3, #4]
 800a4a4:	2b40      	cmp	r3, #64	@ 0x40
 800a4a6:	d956      	bls.n	800a556 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a4ac:	e053      	b.n	800a556 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	78db      	ldrb	r3, [r3, #3]
 800a4b2:	f003 0303 	and.w	r3, r3, #3
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d10e      	bne.n	800a4d8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	799b      	ldrb	r3, [r3, #6]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d007      	beq.n	800a4d2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a4c6:	2b10      	cmp	r3, #16
 800a4c8:	d803      	bhi.n	800a4d2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a4ce:	2b40      	cmp	r3, #64	@ 0x40
 800a4d0:	d941      	bls.n	800a556 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	75fb      	strb	r3, [r7, #23]
 800a4d6:	e03e      	b.n	800a556 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	78db      	ldrb	r3, [r3, #3]
 800a4dc:	f003 0303 	and.w	r3, r3, #3
 800a4e0:	2b03      	cmp	r3, #3
 800a4e2:	d10b      	bne.n	800a4fc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	799b      	ldrb	r3, [r3, #6]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d004      	beq.n	800a4f6 <USBH_ParseEPDesc+0x162>
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	889b      	ldrh	r3, [r3, #4]
 800a4f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4f4:	d32f      	bcc.n	800a556 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	75fb      	strb	r3, [r7, #23]
 800a4fa:	e02c      	b.n	800a556 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	75fb      	strb	r3, [r7, #23]
 800a500:	e029      	b.n	800a556 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d120      	bne.n	800a54e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	78db      	ldrb	r3, [r3, #3]
 800a510:	f003 0303 	and.w	r3, r3, #3
 800a514:	2b00      	cmp	r3, #0
 800a516:	d106      	bne.n	800a526 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	889b      	ldrh	r3, [r3, #4]
 800a51c:	2b08      	cmp	r3, #8
 800a51e:	d01a      	beq.n	800a556 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a520:	2303      	movs	r3, #3
 800a522:	75fb      	strb	r3, [r7, #23]
 800a524:	e017      	b.n	800a556 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	78db      	ldrb	r3, [r3, #3]
 800a52a:	f003 0303 	and.w	r3, r3, #3
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d10a      	bne.n	800a548 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	799b      	ldrb	r3, [r3, #6]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <USBH_ParseEPDesc+0x1ae>
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	889b      	ldrh	r3, [r3, #4]
 800a53e:	2b08      	cmp	r3, #8
 800a540:	d909      	bls.n	800a556 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a542:	2303      	movs	r3, #3
 800a544:	75fb      	strb	r3, [r7, #23]
 800a546:	e006      	b.n	800a556 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a548:	2303      	movs	r3, #3
 800a54a:	75fb      	strb	r3, [r7, #23]
 800a54c:	e003      	b.n	800a556 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a54e:	2303      	movs	r3, #3
 800a550:	75fb      	strb	r3, [r7, #23]
 800a552:	e000      	b.n	800a556 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a554:	bf00      	nop
  }

  return status;
 800a556:	7dfb      	ldrb	r3, [r7, #23]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	371c      	adds	r7, #28
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a564:	b480      	push	{r7}
 800a566:	b087      	sub	sp, #28
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	4613      	mov	r3, r2
 800a570:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3301      	adds	r3, #1
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b03      	cmp	r3, #3
 800a57a:	d120      	bne.n	800a5be <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	1e9a      	subs	r2, r3, #2
 800a582:	88fb      	ldrh	r3, [r7, #6]
 800a584:	4293      	cmp	r3, r2
 800a586:	bf28      	it	cs
 800a588:	4613      	movcs	r3, r2
 800a58a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	3302      	adds	r3, #2
 800a590:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a592:	2300      	movs	r3, #0
 800a594:	82fb      	strh	r3, [r7, #22]
 800a596:	e00b      	b.n	800a5b0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a598:	8afb      	ldrh	r3, [r7, #22]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	4413      	add	r3, r2
 800a59e:	781a      	ldrb	r2, [r3, #0]
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a5aa:	8afb      	ldrh	r3, [r7, #22]
 800a5ac:	3302      	adds	r3, #2
 800a5ae:	82fb      	strh	r3, [r7, #22]
 800a5b0:	8afa      	ldrh	r2, [r7, #22]
 800a5b2:	8abb      	ldrh	r3, [r7, #20]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d3ef      	bcc.n	800a598 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	701a      	strb	r2, [r3, #0]
  }
}
 800a5be:	bf00      	nop
 800a5c0:	371c      	adds	r7, #28
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b085      	sub	sp, #20
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	7812      	ldrb	r2, [r2, #0]
 800a5dc:	4413      	add	r3, r2
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b086      	sub	sp, #24
 800a602:	af00      	add	r7, sp, #0
 800a604:	60f8      	str	r0, [r7, #12]
 800a606:	60b9      	str	r1, [r7, #8]
 800a608:	4613      	mov	r3, r2
 800a60a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a60c:	2301      	movs	r3, #1
 800a60e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	789b      	ldrb	r3, [r3, #2]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d002      	beq.n	800a61e <USBH_CtlReq+0x20>
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d00f      	beq.n	800a63c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a61c:	e027      	b.n	800a66e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	88fa      	ldrh	r2, [r7, #6]
 800a628:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2201      	movs	r2, #1
 800a62e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2202      	movs	r2, #2
 800a634:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a636:	2301      	movs	r3, #1
 800a638:	75fb      	strb	r3, [r7, #23]
      break;
 800a63a:	e018      	b.n	800a66e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f000 f81b 	bl	800a678 <USBH_HandleControl>
 800a642:	4603      	mov	r3, r0
 800a644:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a646:	7dfb      	ldrb	r3, [r7, #23]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d002      	beq.n	800a652 <USBH_CtlReq+0x54>
 800a64c:	7dfb      	ldrb	r3, [r7, #23]
 800a64e:	2b03      	cmp	r3, #3
 800a650:	d106      	bne.n	800a660 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2201      	movs	r2, #1
 800a656:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	761a      	strb	r2, [r3, #24]
      break;
 800a65e:	e005      	b.n	800a66c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a660:	7dfb      	ldrb	r3, [r7, #23]
 800a662:	2b02      	cmp	r3, #2
 800a664:	d102      	bne.n	800a66c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2201      	movs	r2, #1
 800a66a:	709a      	strb	r2, [r3, #2]
      break;
 800a66c:	bf00      	nop
  }
  return status;
 800a66e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3718      	adds	r7, #24
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af02      	add	r7, sp, #8
 800a67e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a680:	2301      	movs	r3, #1
 800a682:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a684:	2300      	movs	r3, #0
 800a686:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	7e1b      	ldrb	r3, [r3, #24]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	2b0a      	cmp	r3, #10
 800a690:	f200 8156 	bhi.w	800a940 <USBH_HandleControl+0x2c8>
 800a694:	a201      	add	r2, pc, #4	@ (adr r2, 800a69c <USBH_HandleControl+0x24>)
 800a696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69a:	bf00      	nop
 800a69c:	0800a6c9 	.word	0x0800a6c9
 800a6a0:	0800a6e3 	.word	0x0800a6e3
 800a6a4:	0800a74d 	.word	0x0800a74d
 800a6a8:	0800a773 	.word	0x0800a773
 800a6ac:	0800a7ab 	.word	0x0800a7ab
 800a6b0:	0800a7d5 	.word	0x0800a7d5
 800a6b4:	0800a827 	.word	0x0800a827
 800a6b8:	0800a849 	.word	0x0800a849
 800a6bc:	0800a885 	.word	0x0800a885
 800a6c0:	0800a8ab 	.word	0x0800a8ab
 800a6c4:	0800a8e9 	.word	0x0800a8e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f103 0110 	add.w	r1, r3, #16
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	795b      	ldrb	r3, [r3, #5]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f943 	bl	800a960 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2202      	movs	r2, #2
 800a6de:	761a      	strb	r2, [r3, #24]
      break;
 800a6e0:	e139      	b.n	800a956 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	795b      	ldrb	r3, [r3, #5]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fcc5 	bl	800b078 <USBH_LL_GetURBState>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a6f2:	7bbb      	ldrb	r3, [r7, #14]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d11e      	bne.n	800a736 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	7c1b      	ldrb	r3, [r3, #16]
 800a6fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a700:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	8adb      	ldrh	r3, [r3, #22]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00a      	beq.n	800a720 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a70a:	7b7b      	ldrb	r3, [r7, #13]
 800a70c:	2b80      	cmp	r3, #128	@ 0x80
 800a70e:	d103      	bne.n	800a718 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2203      	movs	r2, #3
 800a714:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a716:	e115      	b.n	800a944 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2205      	movs	r2, #5
 800a71c:	761a      	strb	r2, [r3, #24]
      break;
 800a71e:	e111      	b.n	800a944 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a720:	7b7b      	ldrb	r3, [r7, #13]
 800a722:	2b80      	cmp	r3, #128	@ 0x80
 800a724:	d103      	bne.n	800a72e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2209      	movs	r2, #9
 800a72a:	761a      	strb	r2, [r3, #24]
      break;
 800a72c:	e10a      	b.n	800a944 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2207      	movs	r2, #7
 800a732:	761a      	strb	r2, [r3, #24]
      break;
 800a734:	e106      	b.n	800a944 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a736:	7bbb      	ldrb	r3, [r7, #14]
 800a738:	2b04      	cmp	r3, #4
 800a73a:	d003      	beq.n	800a744 <USBH_HandleControl+0xcc>
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	2b02      	cmp	r3, #2
 800a740:	f040 8100 	bne.w	800a944 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	220b      	movs	r2, #11
 800a748:	761a      	strb	r2, [r3, #24]
      break;
 800a74a:	e0fb      	b.n	800a944 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a752:	b29a      	uxth	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6899      	ldr	r1, [r3, #8]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	899a      	ldrh	r2, [r3, #12]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	791b      	ldrb	r3, [r3, #4]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 f93a 	bl	800a9de <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2204      	movs	r2, #4
 800a76e:	761a      	strb	r2, [r3, #24]
      break;
 800a770:	e0f1      	b.n	800a956 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	791b      	ldrb	r3, [r3, #4]
 800a776:	4619      	mov	r1, r3
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fc7d 	bl	800b078 <USBH_LL_GetURBState>
 800a77e:	4603      	mov	r3, r0
 800a780:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d102      	bne.n	800a78e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2209      	movs	r2, #9
 800a78c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a78e:	7bbb      	ldrb	r3, [r7, #14]
 800a790:	2b05      	cmp	r3, #5
 800a792:	d102      	bne.n	800a79a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a794:	2303      	movs	r3, #3
 800a796:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a798:	e0d6      	b.n	800a948 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a79a:	7bbb      	ldrb	r3, [r7, #14]
 800a79c:	2b04      	cmp	r3, #4
 800a79e:	f040 80d3 	bne.w	800a948 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	220b      	movs	r2, #11
 800a7a6:	761a      	strb	r2, [r3, #24]
      break;
 800a7a8:	e0ce      	b.n	800a948 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6899      	ldr	r1, [r3, #8]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	899a      	ldrh	r2, [r3, #12]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	795b      	ldrb	r3, [r3, #5]
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	9000      	str	r0, [sp, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f8ea 	bl	800a994 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2206      	movs	r2, #6
 800a7d0:	761a      	strb	r2, [r3, #24]
      break;
 800a7d2:	e0c0      	b.n	800a956 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	795b      	ldrb	r3, [r3, #5]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fc4c 	bl	800b078 <USBH_LL_GetURBState>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a7e4:	7bbb      	ldrb	r3, [r7, #14]
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d103      	bne.n	800a7f2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2207      	movs	r2, #7
 800a7ee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a7f0:	e0ac      	b.n	800a94c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a7f2:	7bbb      	ldrb	r3, [r7, #14]
 800a7f4:	2b05      	cmp	r3, #5
 800a7f6:	d105      	bne.n	800a804 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	220c      	movs	r2, #12
 800a7fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a7fe:	2303      	movs	r3, #3
 800a800:	73fb      	strb	r3, [r7, #15]
      break;
 800a802:	e0a3      	b.n	800a94c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a804:	7bbb      	ldrb	r3, [r7, #14]
 800a806:	2b02      	cmp	r3, #2
 800a808:	d103      	bne.n	800a812 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2205      	movs	r2, #5
 800a80e:	761a      	strb	r2, [r3, #24]
      break;
 800a810:	e09c      	b.n	800a94c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a812:	7bbb      	ldrb	r3, [r7, #14]
 800a814:	2b04      	cmp	r3, #4
 800a816:	f040 8099 	bne.w	800a94c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	220b      	movs	r2, #11
 800a81e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a820:	2302      	movs	r3, #2
 800a822:	73fb      	strb	r3, [r7, #15]
      break;
 800a824:	e092      	b.n	800a94c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	791b      	ldrb	r3, [r3, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	2100      	movs	r1, #0
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f8d5 	bl	800a9de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2208      	movs	r2, #8
 800a844:	761a      	strb	r2, [r3, #24]

      break;
 800a846:	e086      	b.n	800a956 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	791b      	ldrb	r3, [r3, #4]
 800a84c:	4619      	mov	r1, r3
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fc12 	bl	800b078 <USBH_LL_GetURBState>
 800a854:	4603      	mov	r3, r0
 800a856:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d105      	bne.n	800a86a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	220d      	movs	r2, #13
 800a862:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a868:	e072      	b.n	800a950 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a86a:	7bbb      	ldrb	r3, [r7, #14]
 800a86c:	2b04      	cmp	r3, #4
 800a86e:	d103      	bne.n	800a878 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	220b      	movs	r2, #11
 800a874:	761a      	strb	r2, [r3, #24]
      break;
 800a876:	e06b      	b.n	800a950 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	2b05      	cmp	r3, #5
 800a87c:	d168      	bne.n	800a950 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a87e:	2303      	movs	r3, #3
 800a880:	73fb      	strb	r3, [r7, #15]
      break;
 800a882:	e065      	b.n	800a950 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	795b      	ldrb	r3, [r3, #5]
 800a888:	2201      	movs	r2, #1
 800a88a:	9200      	str	r2, [sp, #0]
 800a88c:	2200      	movs	r2, #0
 800a88e:	2100      	movs	r1, #0
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f87f 	bl	800a994 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	220a      	movs	r2, #10
 800a8a6:	761a      	strb	r2, [r3, #24]
      break;
 800a8a8:	e055      	b.n	800a956 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	795b      	ldrb	r3, [r3, #5]
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fbe1 	bl	800b078 <USBH_LL_GetURBState>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a8ba:	7bbb      	ldrb	r3, [r7, #14]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d105      	bne.n	800a8cc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	220d      	movs	r2, #13
 800a8c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a8ca:	e043      	b.n	800a954 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a8cc:	7bbb      	ldrb	r3, [r7, #14]
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d103      	bne.n	800a8da <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2209      	movs	r2, #9
 800a8d6:	761a      	strb	r2, [r3, #24]
      break;
 800a8d8:	e03c      	b.n	800a954 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	2b04      	cmp	r3, #4
 800a8de:	d139      	bne.n	800a954 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	220b      	movs	r2, #11
 800a8e4:	761a      	strb	r2, [r3, #24]
      break;
 800a8e6:	e035      	b.n	800a954 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	7e5b      	ldrb	r3, [r3, #25]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	b2da      	uxtb	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	765a      	strb	r2, [r3, #25]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	7e5b      	ldrb	r3, [r3, #25]
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d806      	bhi.n	800a90a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a908:	e025      	b.n	800a956 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a910:	2106      	movs	r1, #6
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	795b      	ldrb	r3, [r3, #5]
 800a920:	4619      	mov	r1, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f90c 	bl	800ab40 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	791b      	ldrb	r3, [r3, #4]
 800a92c:	4619      	mov	r1, r3
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f906 	bl	800ab40 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a93a:	2302      	movs	r3, #2
 800a93c:	73fb      	strb	r3, [r7, #15]
      break;
 800a93e:	e00a      	b.n	800a956 <USBH_HandleControl+0x2de>

    default:
      break;
 800a940:	bf00      	nop
 800a942:	e008      	b.n	800a956 <USBH_HandleControl+0x2de>
      break;
 800a944:	bf00      	nop
 800a946:	e006      	b.n	800a956 <USBH_HandleControl+0x2de>
      break;
 800a948:	bf00      	nop
 800a94a:	e004      	b.n	800a956 <USBH_HandleControl+0x2de>
      break;
 800a94c:	bf00      	nop
 800a94e:	e002      	b.n	800a956 <USBH_HandleControl+0x2de>
      break;
 800a950:	bf00      	nop
 800a952:	e000      	b.n	800a956 <USBH_HandleControl+0x2de>
      break;
 800a954:	bf00      	nop
  }

  return status;
 800a956:	7bfb      	ldrb	r3, [r7, #15]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b088      	sub	sp, #32
 800a964:	af04      	add	r7, sp, #16
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	4613      	mov	r3, r2
 800a96c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a96e:	79f9      	ldrb	r1, [r7, #7]
 800a970:	2300      	movs	r3, #0
 800a972:	9303      	str	r3, [sp, #12]
 800a974:	2308      	movs	r3, #8
 800a976:	9302      	str	r3, [sp, #8]
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	9301      	str	r3, [sp, #4]
 800a97c:	2300      	movs	r3, #0
 800a97e:	9300      	str	r3, [sp, #0]
 800a980:	2300      	movs	r3, #0
 800a982:	2200      	movs	r2, #0
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f000 fb46 	bl	800b016 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b088      	sub	sp, #32
 800a998:	af04      	add	r7, sp, #16
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	4611      	mov	r1, r2
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	80fb      	strh	r3, [r7, #6]
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9b8:	7979      	ldrb	r1, [r7, #5]
 800a9ba:	7e3b      	ldrb	r3, [r7, #24]
 800a9bc:	9303      	str	r3, [sp, #12]
 800a9be:	88fb      	ldrh	r3, [r7, #6]
 800a9c0:	9302      	str	r3, [sp, #8]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f000 fb21 	bl	800b016 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b088      	sub	sp, #32
 800a9e2:	af04      	add	r7, sp, #16
 800a9e4:	60f8      	str	r0, [r7, #12]
 800a9e6:	60b9      	str	r1, [r7, #8]
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	80fb      	strh	r3, [r7, #6]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9f4:	7979      	ldrb	r1, [r7, #5]
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	9303      	str	r3, [sp, #12]
 800a9fa:	88fb      	ldrh	r3, [r7, #6]
 800a9fc:	9302      	str	r3, [sp, #8]
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	2301      	movs	r3, #1
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	2300      	movs	r3, #0
 800aa08:	2201      	movs	r2, #1
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f000 fb03 	bl	800b016 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aa10:	2300      	movs	r3, #0

}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b088      	sub	sp, #32
 800aa1e:	af04      	add	r7, sp, #16
 800aa20:	60f8      	str	r0, [r7, #12]
 800aa22:	60b9      	str	r1, [r7, #8]
 800aa24:	4611      	mov	r1, r2
 800aa26:	461a      	mov	r2, r3
 800aa28:	460b      	mov	r3, r1
 800aa2a:	80fb      	strh	r3, [r7, #6]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa3e:	7979      	ldrb	r1, [r7, #5]
 800aa40:	7e3b      	ldrb	r3, [r7, #24]
 800aa42:	9303      	str	r3, [sp, #12]
 800aa44:	88fb      	ldrh	r3, [r7, #6]
 800aa46:	9302      	str	r3, [sp, #8]
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	9301      	str	r3, [sp, #4]
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	9300      	str	r3, [sp, #0]
 800aa50:	2302      	movs	r3, #2
 800aa52:	2200      	movs	r2, #0
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	f000 fade 	bl	800b016 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b088      	sub	sp, #32
 800aa68:	af04      	add	r7, sp, #16
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	4611      	mov	r1, r2
 800aa70:	461a      	mov	r2, r3
 800aa72:	460b      	mov	r3, r1
 800aa74:	80fb      	strh	r3, [r7, #6]
 800aa76:	4613      	mov	r3, r2
 800aa78:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa7a:	7979      	ldrb	r1, [r7, #5]
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	9303      	str	r3, [sp, #12]
 800aa80:	88fb      	ldrh	r3, [r7, #6]
 800aa82:	9302      	str	r3, [sp, #8]
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	9301      	str	r3, [sp, #4]
 800aa88:	2301      	movs	r3, #1
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	2201      	movs	r2, #1
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f000 fac0 	bl	800b016 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af04      	add	r7, sp, #16
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	4608      	mov	r0, r1
 800aaaa:	4611      	mov	r1, r2
 800aaac:	461a      	mov	r2, r3
 800aaae:	4603      	mov	r3, r0
 800aab0:	70fb      	strb	r3, [r7, #3]
 800aab2:	460b      	mov	r3, r1
 800aab4:	70bb      	strb	r3, [r7, #2]
 800aab6:	4613      	mov	r3, r2
 800aab8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aaba:	7878      	ldrb	r0, [r7, #1]
 800aabc:	78ba      	ldrb	r2, [r7, #2]
 800aabe:	78f9      	ldrb	r1, [r7, #3]
 800aac0:	8b3b      	ldrh	r3, [r7, #24]
 800aac2:	9302      	str	r3, [sp, #8]
 800aac4:	7d3b      	ldrb	r3, [r7, #20]
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	7c3b      	ldrb	r3, [r7, #16]
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	4603      	mov	r3, r0
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fa53 	bl	800af7a <USBH_LL_OpenPipe>

  return USBH_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b082      	sub	sp, #8
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	460b      	mov	r3, r1
 800aae8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800aaea:	78fb      	ldrb	r3, [r7, #3]
 800aaec:	4619      	mov	r1, r3
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fa72 	bl	800afd8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b084      	sub	sp, #16
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	460b      	mov	r3, r1
 800ab08:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f836 	bl	800ab7c <USBH_GetFreePipe>
 800ab10:	4603      	mov	r3, r0
 800ab12:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ab14:	89fb      	ldrh	r3, [r7, #14]
 800ab16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d00a      	beq.n	800ab34 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ab1e:	78fa      	ldrb	r2, [r7, #3]
 800ab20:	89fb      	ldrh	r3, [r7, #14]
 800ab22:	f003 030f 	and.w	r3, r3, #15
 800ab26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ab2a:	6879      	ldr	r1, [r7, #4]
 800ab2c:	33e0      	adds	r3, #224	@ 0xe0
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	440b      	add	r3, r1
 800ab32:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ab34:	89fb      	ldrh	r3, [r7, #14]
 800ab36:	b2db      	uxtb	r3, r3
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ab4c:	78fb      	ldrb	r3, [r7, #3]
 800ab4e:	2b0f      	cmp	r3, #15
 800ab50:	d80d      	bhi.n	800ab6e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ab52:	78fb      	ldrb	r3, [r7, #3]
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	33e0      	adds	r3, #224	@ 0xe0
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	78fb      	ldrb	r3, [r7, #3]
 800ab60:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	33e0      	adds	r3, #224	@ 0xe0
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	440b      	add	r3, r1
 800ab6c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ab84:	2300      	movs	r3, #0
 800ab86:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ab88:	2300      	movs	r3, #0
 800ab8a:	73fb      	strb	r3, [r7, #15]
 800ab8c:	e00f      	b.n	800abae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ab8e:	7bfb      	ldrb	r3, [r7, #15]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	33e0      	adds	r3, #224	@ 0xe0
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4413      	add	r3, r2
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d102      	bne.n	800aba8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800aba2:	7bfb      	ldrb	r3, [r7, #15]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	e007      	b.n	800abb8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	3301      	adds	r3, #1
 800abac:	73fb      	strb	r3, [r7, #15]
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	2b0f      	cmp	r3, #15
 800abb2:	d9ec      	bls.n	800ab8e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800abb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3714      	adds	r7, #20
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800abc8:	2201      	movs	r2, #1
 800abca:	490e      	ldr	r1, [pc, #56]	@ (800ac04 <MX_USB_HOST_Init+0x40>)
 800abcc:	480e      	ldr	r0, [pc, #56]	@ (800ac08 <MX_USB_HOST_Init+0x44>)
 800abce:	f7fe fb15 	bl	80091fc <USBH_Init>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800abd8:	f7f6 ff88 	bl	8001aec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800abdc:	490b      	ldr	r1, [pc, #44]	@ (800ac0c <MX_USB_HOST_Init+0x48>)
 800abde:	480a      	ldr	r0, [pc, #40]	@ (800ac08 <MX_USB_HOST_Init+0x44>)
 800abe0:	f7fe fbb9 	bl	8009356 <USBH_RegisterClass>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800abea:	f7f6 ff7f 	bl	8001aec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800abee:	4806      	ldr	r0, [pc, #24]	@ (800ac08 <MX_USB_HOST_Init+0x44>)
 800abf0:	f7fe fc3d 	bl	800946e <USBH_Start>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d001      	beq.n	800abfe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800abfa:	f7f6 ff77 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800abfe:	bf00      	nop
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	0800ac25 	.word	0x0800ac25
 800ac08:	2000027c 	.word	0x2000027c
 800ac0c:	2000001c 	.word	0x2000001c

0800ac10 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ac14:	4802      	ldr	r0, [pc, #8]	@ (800ac20 <MX_USB_HOST_Process+0x10>)
 800ac16:	f7fe fc3b 	bl	8009490 <USBH_Process>
}
 800ac1a:	bf00      	nop
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	2000027c 	.word	0x2000027c

0800ac24 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ac30:	78fb      	ldrb	r3, [r7, #3]
 800ac32:	3b01      	subs	r3, #1
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	d819      	bhi.n	800ac6c <USBH_UserProcess+0x48>
 800ac38:	a201      	add	r2, pc, #4	@ (adr r2, 800ac40 <USBH_UserProcess+0x1c>)
 800ac3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3e:	bf00      	nop
 800ac40:	0800ac6d 	.word	0x0800ac6d
 800ac44:	0800ac5d 	.word	0x0800ac5d
 800ac48:	0800ac6d 	.word	0x0800ac6d
 800ac4c:	0800ac65 	.word	0x0800ac65
 800ac50:	0800ac55 	.word	0x0800ac55
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ac54:	4b09      	ldr	r3, [pc, #36]	@ (800ac7c <USBH_UserProcess+0x58>)
 800ac56:	2203      	movs	r2, #3
 800ac58:	701a      	strb	r2, [r3, #0]
  break;
 800ac5a:	e008      	b.n	800ac6e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ac5c:	4b07      	ldr	r3, [pc, #28]	@ (800ac7c <USBH_UserProcess+0x58>)
 800ac5e:	2202      	movs	r2, #2
 800ac60:	701a      	strb	r2, [r3, #0]
  break;
 800ac62:	e004      	b.n	800ac6e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ac64:	4b05      	ldr	r3, [pc, #20]	@ (800ac7c <USBH_UserProcess+0x58>)
 800ac66:	2201      	movs	r2, #1
 800ac68:	701a      	strb	r2, [r3, #0]
  break;
 800ac6a:	e000      	b.n	800ac6e <USBH_UserProcess+0x4a>

  default:
  break;
 800ac6c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ac6e:	bf00      	nop
 800ac70:	370c      	adds	r7, #12
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	20000654 	.word	0x20000654

0800ac80 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b08a      	sub	sp, #40	@ 0x28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac88:	f107 0314 	add.w	r3, r7, #20
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	601a      	str	r2, [r3, #0]
 800ac90:	605a      	str	r2, [r3, #4]
 800ac92:	609a      	str	r2, [r3, #8]
 800ac94:	60da      	str	r2, [r3, #12]
 800ac96:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aca0:	d147      	bne.n	800ad32 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aca2:	2300      	movs	r3, #0
 800aca4:	613b      	str	r3, [r7, #16]
 800aca6:	4b25      	ldr	r3, [pc, #148]	@ (800ad3c <HAL_HCD_MspInit+0xbc>)
 800aca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acaa:	4a24      	ldr	r2, [pc, #144]	@ (800ad3c <HAL_HCD_MspInit+0xbc>)
 800acac:	f043 0301 	orr.w	r3, r3, #1
 800acb0:	6313      	str	r3, [r2, #48]	@ 0x30
 800acb2:	4b22      	ldr	r3, [pc, #136]	@ (800ad3c <HAL_HCD_MspInit+0xbc>)
 800acb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acb6:	f003 0301 	and.w	r3, r3, #1
 800acba:	613b      	str	r3, [r7, #16]
 800acbc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800acbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800acc4:	2300      	movs	r3, #0
 800acc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acc8:	2300      	movs	r3, #0
 800acca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800accc:	f107 0314 	add.w	r3, r7, #20
 800acd0:	4619      	mov	r1, r3
 800acd2:	481b      	ldr	r0, [pc, #108]	@ (800ad40 <HAL_HCD_MspInit+0xc0>)
 800acd4:	f7f7 fe30 	bl	8002938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800acd8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800acdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acde:	2302      	movs	r3, #2
 800ace0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ace2:	2300      	movs	r3, #0
 800ace4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ace6:	2300      	movs	r3, #0
 800ace8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800acea:	230a      	movs	r3, #10
 800acec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acee:	f107 0314 	add.w	r3, r7, #20
 800acf2:	4619      	mov	r1, r3
 800acf4:	4812      	ldr	r0, [pc, #72]	@ (800ad40 <HAL_HCD_MspInit+0xc0>)
 800acf6:	f7f7 fe1f 	bl	8002938 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800acfa:	4b10      	ldr	r3, [pc, #64]	@ (800ad3c <HAL_HCD_MspInit+0xbc>)
 800acfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acfe:	4a0f      	ldr	r2, [pc, #60]	@ (800ad3c <HAL_HCD_MspInit+0xbc>)
 800ad00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad04:	6353      	str	r3, [r2, #52]	@ 0x34
 800ad06:	2300      	movs	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
 800ad0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad3c <HAL_HCD_MspInit+0xbc>)
 800ad0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad0e:	4a0b      	ldr	r2, [pc, #44]	@ (800ad3c <HAL_HCD_MspInit+0xbc>)
 800ad10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ad14:	6453      	str	r3, [r2, #68]	@ 0x44
 800ad16:	4b09      	ldr	r3, [pc, #36]	@ (800ad3c <HAL_HCD_MspInit+0xbc>)
 800ad18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad1e:	60fb      	str	r3, [r7, #12]
 800ad20:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ad22:	2200      	movs	r2, #0
 800ad24:	2100      	movs	r1, #0
 800ad26:	2043      	movs	r0, #67	@ 0x43
 800ad28:	f7f7 fdcf 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad2c:	2043      	movs	r0, #67	@ 0x43
 800ad2e:	f7f7 fde8 	bl	8002902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad32:	bf00      	nop
 800ad34:	3728      	adds	r7, #40	@ 0x28
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	40023800 	.word	0x40023800
 800ad40:	40020000 	.word	0x40020000

0800ad44 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fe ff73 	bl	8009c3e <USBH_LL_IncTimer>
}
 800ad58:	bf00      	nop
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fe ffab 	bl	8009cca <USBH_LL_Connect>
}
 800ad74:	bf00      	nop
 800ad76:	3708      	adds	r7, #8
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fe ffb4 	bl	8009cf8 <USBH_LL_Disconnect>
}
 800ad90:	bf00      	nop
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	460b      	mov	r3, r1
 800ada2:	70fb      	strb	r3, [r7, #3]
 800ada4:	4613      	mov	r3, r2
 800ada6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe ff65 	bl	8009c92 <USBH_LL_PortEnabled>
}
 800adc8:	bf00      	nop
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fe ff65 	bl	8009cae <USBH_LL_PortDisabled>
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d12a      	bne.n	800ae54 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800adfe:	4a18      	ldr	r2, [pc, #96]	@ (800ae60 <USBH_LL_Init+0x74>)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a15      	ldr	r2, [pc, #84]	@ (800ae60 <USBH_LL_Init+0x74>)
 800ae0a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae0e:	4b14      	ldr	r3, [pc, #80]	@ (800ae60 <USBH_LL_Init+0x74>)
 800ae10:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ae14:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ae16:	4b12      	ldr	r3, [pc, #72]	@ (800ae60 <USBH_LL_Init+0x74>)
 800ae18:	2208      	movs	r2, #8
 800ae1a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ae1c:	4b10      	ldr	r3, [pc, #64]	@ (800ae60 <USBH_LL_Init+0x74>)
 800ae1e:	2201      	movs	r2, #1
 800ae20:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae22:	4b0f      	ldr	r3, [pc, #60]	@ (800ae60 <USBH_LL_Init+0x74>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ae28:	4b0d      	ldr	r3, [pc, #52]	@ (800ae60 <USBH_LL_Init+0x74>)
 800ae2a:	2202      	movs	r2, #2
 800ae2c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ae2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae60 <USBH_LL_Init+0x74>)
 800ae30:	2200      	movs	r2, #0
 800ae32:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ae34:	480a      	ldr	r0, [pc, #40]	@ (800ae60 <USBH_LL_Init+0x74>)
 800ae36:	f7f7 ff65 	bl	8002d04 <HAL_HCD_Init>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d001      	beq.n	800ae44 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ae40:	f7f6 fe54 	bl	8001aec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ae44:	4806      	ldr	r0, [pc, #24]	@ (800ae60 <USBH_LL_Init+0x74>)
 800ae46:	f7f8 fbc5 	bl	80035d4 <HAL_HCD_GetCurrentFrame>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7fe fee6 	bl	8009c20 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	20000658 	.word	0x20000658

0800ae64 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae70:	2300      	movs	r3, #0
 800ae72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7f8 fb32 	bl	80034e4 <HAL_HCD_Start>
 800ae80:	4603      	mov	r3, r0
 800ae82:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae84:	7bfb      	ldrb	r3, [r7, #15]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 f95e 	bl	800b148 <USBH_Get_USB_Status>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b084      	sub	sp, #16
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7f8 fb3a 	bl	800352a <HAL_HCD_Stop>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f000 f943 	bl	800b148 <USBH_Get_USB_Status>
 800aec2:	4603      	mov	r3, r0
 800aec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aec6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800aed8:	2301      	movs	r3, #1
 800aeda:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7f8 fb84 	bl	80035f0 <HAL_HCD_GetCurrentSpeed>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d00c      	beq.n	800af08 <USBH_LL_GetSpeed+0x38>
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d80d      	bhi.n	800af0e <USBH_LL_GetSpeed+0x3e>
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d002      	beq.n	800aefc <USBH_LL_GetSpeed+0x2c>
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d003      	beq.n	800af02 <USBH_LL_GetSpeed+0x32>
 800aefa:	e008      	b.n	800af0e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800aefc:	2300      	movs	r3, #0
 800aefe:	73fb      	strb	r3, [r7, #15]
    break;
 800af00:	e008      	b.n	800af14 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800af02:	2301      	movs	r3, #1
 800af04:	73fb      	strb	r3, [r7, #15]
    break;
 800af06:	e005      	b.n	800af14 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800af08:	2302      	movs	r3, #2
 800af0a:	73fb      	strb	r3, [r7, #15]
    break;
 800af0c:	e002      	b.n	800af14 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800af0e:	2301      	movs	r3, #1
 800af10:	73fb      	strb	r3, [r7, #15]
    break;
 800af12:	bf00      	nop
  }
  return  speed;
 800af14:	7bfb      	ldrb	r3, [r7, #15]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b084      	sub	sp, #16
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af26:	2300      	movs	r3, #0
 800af28:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af34:	4618      	mov	r0, r3
 800af36:	f7f8 fb15 	bl	8003564 <HAL_HCD_ResetPort>
 800af3a:	4603      	mov	r3, r0
 800af3c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
 800af40:	4618      	mov	r0, r3
 800af42:	f000 f901 	bl	800b148 <USBH_Get_USB_Status>
 800af46:	4603      	mov	r3, r0
 800af48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	460b      	mov	r3, r1
 800af5e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af66:	78fa      	ldrb	r2, [r7, #3]
 800af68:	4611      	mov	r1, r2
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7f8 fb1d 	bl	80035aa <HAL_HCD_HC_GetXferCount>
 800af70:	4603      	mov	r3, r0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800af7a:	b590      	push	{r4, r7, lr}
 800af7c:	b089      	sub	sp, #36	@ 0x24
 800af7e:	af04      	add	r7, sp, #16
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	4608      	mov	r0, r1
 800af84:	4611      	mov	r1, r2
 800af86:	461a      	mov	r2, r3
 800af88:	4603      	mov	r3, r0
 800af8a:	70fb      	strb	r3, [r7, #3]
 800af8c:	460b      	mov	r3, r1
 800af8e:	70bb      	strb	r3, [r7, #2]
 800af90:	4613      	mov	r3, r2
 800af92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af94:	2300      	movs	r3, #0
 800af96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af98:	2300      	movs	r3, #0
 800af9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800afa2:	787c      	ldrb	r4, [r7, #1]
 800afa4:	78ba      	ldrb	r2, [r7, #2]
 800afa6:	78f9      	ldrb	r1, [r7, #3]
 800afa8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800afaa:	9302      	str	r3, [sp, #8]
 800afac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	4623      	mov	r3, r4
 800afba:	f7f7 ff0a 	bl	8002dd2 <HAL_HCD_HC_Init>
 800afbe:	4603      	mov	r3, r0
 800afc0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800afc2:	7bfb      	ldrb	r3, [r7, #15]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 f8bf 	bl	800b148 <USBH_Get_USB_Status>
 800afca:	4603      	mov	r3, r0
 800afcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afce:	7bbb      	ldrb	r3, [r7, #14]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd90      	pop	{r4, r7, pc}

0800afd8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	460b      	mov	r3, r1
 800afe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aff2:	78fa      	ldrb	r2, [r7, #3]
 800aff4:	4611      	mov	r1, r2
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7f7 ffa3 	bl	8002f42 <HAL_HCD_HC_Halt>
 800affc:	4603      	mov	r3, r0
 800affe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b000:	7bfb      	ldrb	r3, [r7, #15]
 800b002:	4618      	mov	r0, r3
 800b004:	f000 f8a0 	bl	800b148 <USBH_Get_USB_Status>
 800b008:	4603      	mov	r3, r0
 800b00a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b016:	b590      	push	{r4, r7, lr}
 800b018:	b089      	sub	sp, #36	@ 0x24
 800b01a:	af04      	add	r7, sp, #16
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	4608      	mov	r0, r1
 800b020:	4611      	mov	r1, r2
 800b022:	461a      	mov	r2, r3
 800b024:	4603      	mov	r3, r0
 800b026:	70fb      	strb	r3, [r7, #3]
 800b028:	460b      	mov	r3, r1
 800b02a:	70bb      	strb	r3, [r7, #2]
 800b02c:	4613      	mov	r3, r2
 800b02e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b030:	2300      	movs	r3, #0
 800b032:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b034:	2300      	movs	r3, #0
 800b036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b03e:	787c      	ldrb	r4, [r7, #1]
 800b040:	78ba      	ldrb	r2, [r7, #2]
 800b042:	78f9      	ldrb	r1, [r7, #3]
 800b044:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b048:	9303      	str	r3, [sp, #12]
 800b04a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b04c:	9302      	str	r3, [sp, #8]
 800b04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b050:	9301      	str	r3, [sp, #4]
 800b052:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	4623      	mov	r3, r4
 800b05a:	f7f7 ff95 	bl	8002f88 <HAL_HCD_HC_SubmitRequest>
 800b05e:	4603      	mov	r3, r0
 800b060:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b062:	7bfb      	ldrb	r3, [r7, #15]
 800b064:	4618      	mov	r0, r3
 800b066:	f000 f86f 	bl	800b148 <USBH_Get_USB_Status>
 800b06a:	4603      	mov	r3, r0
 800b06c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b06e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3714      	adds	r7, #20
 800b074:	46bd      	mov	sp, r7
 800b076:	bd90      	pop	{r4, r7, pc}

0800b078 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b08a:	78fa      	ldrb	r2, [r7, #3]
 800b08c:	4611      	mov	r1, r2
 800b08e:	4618      	mov	r0, r3
 800b090:	f7f8 fa76 	bl	8003580 <HAL_HCD_HC_GetURBState>
 800b094:	4603      	mov	r3, r0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3708      	adds	r7, #8
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b082      	sub	sp, #8
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d103      	bne.n	800b0bc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b0b4:	78fb      	ldrb	r3, [r7, #3]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f000 f872 	bl	800b1a0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b0bc:	20c8      	movs	r0, #200	@ 0xc8
 800b0be:	f7f6 ffef 	bl	80020a0 <HAL_Delay>
  return USBH_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3708      	adds	r7, #8
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	70fb      	strb	r3, [r7, #3]
 800b0d8:	4613      	mov	r3, r2
 800b0da:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b0e2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b0e4:	78fa      	ldrb	r2, [r7, #3]
 800b0e6:	68f9      	ldr	r1, [r7, #12]
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	011b      	lsls	r3, r3, #4
 800b0ec:	1a9b      	subs	r3, r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	440b      	add	r3, r1
 800b0f2:	3317      	adds	r3, #23
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00a      	beq.n	800b110 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b0fa:	78fa      	ldrb	r2, [r7, #3]
 800b0fc:	68f9      	ldr	r1, [r7, #12]
 800b0fe:	4613      	mov	r3, r2
 800b100:	011b      	lsls	r3, r3, #4
 800b102:	1a9b      	subs	r3, r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	440b      	add	r3, r1
 800b108:	333c      	adds	r3, #60	@ 0x3c
 800b10a:	78ba      	ldrb	r2, [r7, #2]
 800b10c:	701a      	strb	r2, [r3, #0]
 800b10e:	e009      	b.n	800b124 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b110:	78fa      	ldrb	r2, [r7, #3]
 800b112:	68f9      	ldr	r1, [r7, #12]
 800b114:	4613      	mov	r3, r2
 800b116:	011b      	lsls	r3, r3, #4
 800b118:	1a9b      	subs	r3, r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	440b      	add	r3, r1
 800b11e:	333d      	adds	r3, #61	@ 0x3d
 800b120:	78ba      	ldrb	r2, [r7, #2]
 800b122:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b082      	sub	sp, #8
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7f6 ffb0 	bl	80020a0 <HAL_Delay>
}
 800b140:	bf00      	nop
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	4603      	mov	r3, r0
 800b150:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b156:	79fb      	ldrb	r3, [r7, #7]
 800b158:	2b03      	cmp	r3, #3
 800b15a:	d817      	bhi.n	800b18c <USBH_Get_USB_Status+0x44>
 800b15c:	a201      	add	r2, pc, #4	@ (adr r2, 800b164 <USBH_Get_USB_Status+0x1c>)
 800b15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b162:	bf00      	nop
 800b164:	0800b175 	.word	0x0800b175
 800b168:	0800b17b 	.word	0x0800b17b
 800b16c:	0800b181 	.word	0x0800b181
 800b170:	0800b187 	.word	0x0800b187
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	73fb      	strb	r3, [r7, #15]
    break;
 800b178:	e00b      	b.n	800b192 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b17a:	2302      	movs	r3, #2
 800b17c:	73fb      	strb	r3, [r7, #15]
    break;
 800b17e:	e008      	b.n	800b192 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b180:	2301      	movs	r3, #1
 800b182:	73fb      	strb	r3, [r7, #15]
    break;
 800b184:	e005      	b.n	800b192 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b186:	2302      	movs	r3, #2
 800b188:	73fb      	strb	r3, [r7, #15]
    break;
 800b18a:	e002      	b.n	800b192 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b18c:	2302      	movs	r3, #2
 800b18e:	73fb      	strb	r3, [r7, #15]
    break;
 800b190:	bf00      	nop
  }
  return usb_status;
 800b192:	7bfb      	ldrb	r3, [r7, #15]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b1aa:	79fb      	ldrb	r3, [r7, #7]
 800b1ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b1ae:	79fb      	ldrb	r3, [r7, #7]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d102      	bne.n	800b1ba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	73fb      	strb	r3, [r7, #15]
 800b1b8:	e001      	b.n	800b1be <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b1be:	7bfb      	ldrb	r3, [r7, #15]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	2101      	movs	r1, #1
 800b1c4:	4803      	ldr	r0, [pc, #12]	@ (800b1d4 <MX_DriverVbusFS+0x34>)
 800b1c6:	f7f7 fd6b 	bl	8002ca0 <HAL_GPIO_WritePin>
}
 800b1ca:	bf00      	nop
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	40020800 	.word	0x40020800

0800b1d8 <malloc>:
 800b1d8:	4b02      	ldr	r3, [pc, #8]	@ (800b1e4 <malloc+0xc>)
 800b1da:	4601      	mov	r1, r0
 800b1dc:	6818      	ldr	r0, [r3, #0]
 800b1de:	f000 b82d 	b.w	800b23c <_malloc_r>
 800b1e2:	bf00      	nop
 800b1e4:	2000003c 	.word	0x2000003c

0800b1e8 <free>:
 800b1e8:	4b02      	ldr	r3, [pc, #8]	@ (800b1f4 <free+0xc>)
 800b1ea:	4601      	mov	r1, r0
 800b1ec:	6818      	ldr	r0, [r3, #0]
 800b1ee:	f000 b8f5 	b.w	800b3dc <_free_r>
 800b1f2:	bf00      	nop
 800b1f4:	2000003c 	.word	0x2000003c

0800b1f8 <sbrk_aligned>:
 800b1f8:	b570      	push	{r4, r5, r6, lr}
 800b1fa:	4e0f      	ldr	r6, [pc, #60]	@ (800b238 <sbrk_aligned+0x40>)
 800b1fc:	460c      	mov	r4, r1
 800b1fe:	6831      	ldr	r1, [r6, #0]
 800b200:	4605      	mov	r5, r0
 800b202:	b911      	cbnz	r1, 800b20a <sbrk_aligned+0x12>
 800b204:	f000 f8ae 	bl	800b364 <_sbrk_r>
 800b208:	6030      	str	r0, [r6, #0]
 800b20a:	4621      	mov	r1, r4
 800b20c:	4628      	mov	r0, r5
 800b20e:	f000 f8a9 	bl	800b364 <_sbrk_r>
 800b212:	1c43      	adds	r3, r0, #1
 800b214:	d103      	bne.n	800b21e <sbrk_aligned+0x26>
 800b216:	f04f 34ff 	mov.w	r4, #4294967295
 800b21a:	4620      	mov	r0, r4
 800b21c:	bd70      	pop	{r4, r5, r6, pc}
 800b21e:	1cc4      	adds	r4, r0, #3
 800b220:	f024 0403 	bic.w	r4, r4, #3
 800b224:	42a0      	cmp	r0, r4
 800b226:	d0f8      	beq.n	800b21a <sbrk_aligned+0x22>
 800b228:	1a21      	subs	r1, r4, r0
 800b22a:	4628      	mov	r0, r5
 800b22c:	f000 f89a 	bl	800b364 <_sbrk_r>
 800b230:	3001      	adds	r0, #1
 800b232:	d1f2      	bne.n	800b21a <sbrk_aligned+0x22>
 800b234:	e7ef      	b.n	800b216 <sbrk_aligned+0x1e>
 800b236:	bf00      	nop
 800b238:	20000a38 	.word	0x20000a38

0800b23c <_malloc_r>:
 800b23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b240:	1ccd      	adds	r5, r1, #3
 800b242:	f025 0503 	bic.w	r5, r5, #3
 800b246:	3508      	adds	r5, #8
 800b248:	2d0c      	cmp	r5, #12
 800b24a:	bf38      	it	cc
 800b24c:	250c      	movcc	r5, #12
 800b24e:	2d00      	cmp	r5, #0
 800b250:	4606      	mov	r6, r0
 800b252:	db01      	blt.n	800b258 <_malloc_r+0x1c>
 800b254:	42a9      	cmp	r1, r5
 800b256:	d904      	bls.n	800b262 <_malloc_r+0x26>
 800b258:	230c      	movs	r3, #12
 800b25a:	6033      	str	r3, [r6, #0]
 800b25c:	2000      	movs	r0, #0
 800b25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b262:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b338 <_malloc_r+0xfc>
 800b266:	f000 f869 	bl	800b33c <__malloc_lock>
 800b26a:	f8d8 3000 	ldr.w	r3, [r8]
 800b26e:	461c      	mov	r4, r3
 800b270:	bb44      	cbnz	r4, 800b2c4 <_malloc_r+0x88>
 800b272:	4629      	mov	r1, r5
 800b274:	4630      	mov	r0, r6
 800b276:	f7ff ffbf 	bl	800b1f8 <sbrk_aligned>
 800b27a:	1c43      	adds	r3, r0, #1
 800b27c:	4604      	mov	r4, r0
 800b27e:	d158      	bne.n	800b332 <_malloc_r+0xf6>
 800b280:	f8d8 4000 	ldr.w	r4, [r8]
 800b284:	4627      	mov	r7, r4
 800b286:	2f00      	cmp	r7, #0
 800b288:	d143      	bne.n	800b312 <_malloc_r+0xd6>
 800b28a:	2c00      	cmp	r4, #0
 800b28c:	d04b      	beq.n	800b326 <_malloc_r+0xea>
 800b28e:	6823      	ldr	r3, [r4, #0]
 800b290:	4639      	mov	r1, r7
 800b292:	4630      	mov	r0, r6
 800b294:	eb04 0903 	add.w	r9, r4, r3
 800b298:	f000 f864 	bl	800b364 <_sbrk_r>
 800b29c:	4581      	cmp	r9, r0
 800b29e:	d142      	bne.n	800b326 <_malloc_r+0xea>
 800b2a0:	6821      	ldr	r1, [r4, #0]
 800b2a2:	1a6d      	subs	r5, r5, r1
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	f7ff ffa6 	bl	800b1f8 <sbrk_aligned>
 800b2ac:	3001      	adds	r0, #1
 800b2ae:	d03a      	beq.n	800b326 <_malloc_r+0xea>
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	442b      	add	r3, r5
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	bb62      	cbnz	r2, 800b318 <_malloc_r+0xdc>
 800b2be:	f8c8 7000 	str.w	r7, [r8]
 800b2c2:	e00f      	b.n	800b2e4 <_malloc_r+0xa8>
 800b2c4:	6822      	ldr	r2, [r4, #0]
 800b2c6:	1b52      	subs	r2, r2, r5
 800b2c8:	d420      	bmi.n	800b30c <_malloc_r+0xd0>
 800b2ca:	2a0b      	cmp	r2, #11
 800b2cc:	d917      	bls.n	800b2fe <_malloc_r+0xc2>
 800b2ce:	1961      	adds	r1, r4, r5
 800b2d0:	42a3      	cmp	r3, r4
 800b2d2:	6025      	str	r5, [r4, #0]
 800b2d4:	bf18      	it	ne
 800b2d6:	6059      	strne	r1, [r3, #4]
 800b2d8:	6863      	ldr	r3, [r4, #4]
 800b2da:	bf08      	it	eq
 800b2dc:	f8c8 1000 	streq.w	r1, [r8]
 800b2e0:	5162      	str	r2, [r4, r5]
 800b2e2:	604b      	str	r3, [r1, #4]
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	f000 f82f 	bl	800b348 <__malloc_unlock>
 800b2ea:	f104 000b 	add.w	r0, r4, #11
 800b2ee:	1d23      	adds	r3, r4, #4
 800b2f0:	f020 0007 	bic.w	r0, r0, #7
 800b2f4:	1ac2      	subs	r2, r0, r3
 800b2f6:	bf1c      	itt	ne
 800b2f8:	1a1b      	subne	r3, r3, r0
 800b2fa:	50a3      	strne	r3, [r4, r2]
 800b2fc:	e7af      	b.n	800b25e <_malloc_r+0x22>
 800b2fe:	6862      	ldr	r2, [r4, #4]
 800b300:	42a3      	cmp	r3, r4
 800b302:	bf0c      	ite	eq
 800b304:	f8c8 2000 	streq.w	r2, [r8]
 800b308:	605a      	strne	r2, [r3, #4]
 800b30a:	e7eb      	b.n	800b2e4 <_malloc_r+0xa8>
 800b30c:	4623      	mov	r3, r4
 800b30e:	6864      	ldr	r4, [r4, #4]
 800b310:	e7ae      	b.n	800b270 <_malloc_r+0x34>
 800b312:	463c      	mov	r4, r7
 800b314:	687f      	ldr	r7, [r7, #4]
 800b316:	e7b6      	b.n	800b286 <_malloc_r+0x4a>
 800b318:	461a      	mov	r2, r3
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	42a3      	cmp	r3, r4
 800b31e:	d1fb      	bne.n	800b318 <_malloc_r+0xdc>
 800b320:	2300      	movs	r3, #0
 800b322:	6053      	str	r3, [r2, #4]
 800b324:	e7de      	b.n	800b2e4 <_malloc_r+0xa8>
 800b326:	230c      	movs	r3, #12
 800b328:	6033      	str	r3, [r6, #0]
 800b32a:	4630      	mov	r0, r6
 800b32c:	f000 f80c 	bl	800b348 <__malloc_unlock>
 800b330:	e794      	b.n	800b25c <_malloc_r+0x20>
 800b332:	6005      	str	r5, [r0, #0]
 800b334:	e7d6      	b.n	800b2e4 <_malloc_r+0xa8>
 800b336:	bf00      	nop
 800b338:	20000a3c 	.word	0x20000a3c

0800b33c <__malloc_lock>:
 800b33c:	4801      	ldr	r0, [pc, #4]	@ (800b344 <__malloc_lock+0x8>)
 800b33e:	f000 b84b 	b.w	800b3d8 <__retarget_lock_acquire_recursive>
 800b342:	bf00      	nop
 800b344:	20000b7c 	.word	0x20000b7c

0800b348 <__malloc_unlock>:
 800b348:	4801      	ldr	r0, [pc, #4]	@ (800b350 <__malloc_unlock+0x8>)
 800b34a:	f000 b846 	b.w	800b3da <__retarget_lock_release_recursive>
 800b34e:	bf00      	nop
 800b350:	20000b7c 	.word	0x20000b7c

0800b354 <memset>:
 800b354:	4402      	add	r2, r0
 800b356:	4603      	mov	r3, r0
 800b358:	4293      	cmp	r3, r2
 800b35a:	d100      	bne.n	800b35e <memset+0xa>
 800b35c:	4770      	bx	lr
 800b35e:	f803 1b01 	strb.w	r1, [r3], #1
 800b362:	e7f9      	b.n	800b358 <memset+0x4>

0800b364 <_sbrk_r>:
 800b364:	b538      	push	{r3, r4, r5, lr}
 800b366:	4d06      	ldr	r5, [pc, #24]	@ (800b380 <_sbrk_r+0x1c>)
 800b368:	2300      	movs	r3, #0
 800b36a:	4604      	mov	r4, r0
 800b36c:	4608      	mov	r0, r1
 800b36e:	602b      	str	r3, [r5, #0]
 800b370:	f7f6 fdb2 	bl	8001ed8 <_sbrk>
 800b374:	1c43      	adds	r3, r0, #1
 800b376:	d102      	bne.n	800b37e <_sbrk_r+0x1a>
 800b378:	682b      	ldr	r3, [r5, #0]
 800b37a:	b103      	cbz	r3, 800b37e <_sbrk_r+0x1a>
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	bd38      	pop	{r3, r4, r5, pc}
 800b380:	20000b78 	.word	0x20000b78

0800b384 <__errno>:
 800b384:	4b01      	ldr	r3, [pc, #4]	@ (800b38c <__errno+0x8>)
 800b386:	6818      	ldr	r0, [r3, #0]
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	2000003c 	.word	0x2000003c

0800b390 <__libc_init_array>:
 800b390:	b570      	push	{r4, r5, r6, lr}
 800b392:	4d0d      	ldr	r5, [pc, #52]	@ (800b3c8 <__libc_init_array+0x38>)
 800b394:	4c0d      	ldr	r4, [pc, #52]	@ (800b3cc <__libc_init_array+0x3c>)
 800b396:	1b64      	subs	r4, r4, r5
 800b398:	10a4      	asrs	r4, r4, #2
 800b39a:	2600      	movs	r6, #0
 800b39c:	42a6      	cmp	r6, r4
 800b39e:	d109      	bne.n	800b3b4 <__libc_init_array+0x24>
 800b3a0:	4d0b      	ldr	r5, [pc, #44]	@ (800b3d0 <__libc_init_array+0x40>)
 800b3a2:	4c0c      	ldr	r4, [pc, #48]	@ (800b3d4 <__libc_init_array+0x44>)
 800b3a4:	f000 f864 	bl	800b470 <_init>
 800b3a8:	1b64      	subs	r4, r4, r5
 800b3aa:	10a4      	asrs	r4, r4, #2
 800b3ac:	2600      	movs	r6, #0
 800b3ae:	42a6      	cmp	r6, r4
 800b3b0:	d105      	bne.n	800b3be <__libc_init_array+0x2e>
 800b3b2:	bd70      	pop	{r4, r5, r6, pc}
 800b3b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3b8:	4798      	blx	r3
 800b3ba:	3601      	adds	r6, #1
 800b3bc:	e7ee      	b.n	800b39c <__libc_init_array+0xc>
 800b3be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3c2:	4798      	blx	r3
 800b3c4:	3601      	adds	r6, #1
 800b3c6:	e7f2      	b.n	800b3ae <__libc_init_array+0x1e>
 800b3c8:	0800b4b0 	.word	0x0800b4b0
 800b3cc:	0800b4b0 	.word	0x0800b4b0
 800b3d0:	0800b4b0 	.word	0x0800b4b0
 800b3d4:	0800b4b4 	.word	0x0800b4b4

0800b3d8 <__retarget_lock_acquire_recursive>:
 800b3d8:	4770      	bx	lr

0800b3da <__retarget_lock_release_recursive>:
 800b3da:	4770      	bx	lr

0800b3dc <_free_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	4605      	mov	r5, r0
 800b3e0:	2900      	cmp	r1, #0
 800b3e2:	d041      	beq.n	800b468 <_free_r+0x8c>
 800b3e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3e8:	1f0c      	subs	r4, r1, #4
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	bfb8      	it	lt
 800b3ee:	18e4      	addlt	r4, r4, r3
 800b3f0:	f7ff ffa4 	bl	800b33c <__malloc_lock>
 800b3f4:	4a1d      	ldr	r2, [pc, #116]	@ (800b46c <_free_r+0x90>)
 800b3f6:	6813      	ldr	r3, [r2, #0]
 800b3f8:	b933      	cbnz	r3, 800b408 <_free_r+0x2c>
 800b3fa:	6063      	str	r3, [r4, #4]
 800b3fc:	6014      	str	r4, [r2, #0]
 800b3fe:	4628      	mov	r0, r5
 800b400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b404:	f7ff bfa0 	b.w	800b348 <__malloc_unlock>
 800b408:	42a3      	cmp	r3, r4
 800b40a:	d908      	bls.n	800b41e <_free_r+0x42>
 800b40c:	6820      	ldr	r0, [r4, #0]
 800b40e:	1821      	adds	r1, r4, r0
 800b410:	428b      	cmp	r3, r1
 800b412:	bf01      	itttt	eq
 800b414:	6819      	ldreq	r1, [r3, #0]
 800b416:	685b      	ldreq	r3, [r3, #4]
 800b418:	1809      	addeq	r1, r1, r0
 800b41a:	6021      	streq	r1, [r4, #0]
 800b41c:	e7ed      	b.n	800b3fa <_free_r+0x1e>
 800b41e:	461a      	mov	r2, r3
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	b10b      	cbz	r3, 800b428 <_free_r+0x4c>
 800b424:	42a3      	cmp	r3, r4
 800b426:	d9fa      	bls.n	800b41e <_free_r+0x42>
 800b428:	6811      	ldr	r1, [r2, #0]
 800b42a:	1850      	adds	r0, r2, r1
 800b42c:	42a0      	cmp	r0, r4
 800b42e:	d10b      	bne.n	800b448 <_free_r+0x6c>
 800b430:	6820      	ldr	r0, [r4, #0]
 800b432:	4401      	add	r1, r0
 800b434:	1850      	adds	r0, r2, r1
 800b436:	4283      	cmp	r3, r0
 800b438:	6011      	str	r1, [r2, #0]
 800b43a:	d1e0      	bne.n	800b3fe <_free_r+0x22>
 800b43c:	6818      	ldr	r0, [r3, #0]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	6053      	str	r3, [r2, #4]
 800b442:	4408      	add	r0, r1
 800b444:	6010      	str	r0, [r2, #0]
 800b446:	e7da      	b.n	800b3fe <_free_r+0x22>
 800b448:	d902      	bls.n	800b450 <_free_r+0x74>
 800b44a:	230c      	movs	r3, #12
 800b44c:	602b      	str	r3, [r5, #0]
 800b44e:	e7d6      	b.n	800b3fe <_free_r+0x22>
 800b450:	6820      	ldr	r0, [r4, #0]
 800b452:	1821      	adds	r1, r4, r0
 800b454:	428b      	cmp	r3, r1
 800b456:	bf04      	itt	eq
 800b458:	6819      	ldreq	r1, [r3, #0]
 800b45a:	685b      	ldreq	r3, [r3, #4]
 800b45c:	6063      	str	r3, [r4, #4]
 800b45e:	bf04      	itt	eq
 800b460:	1809      	addeq	r1, r1, r0
 800b462:	6021      	streq	r1, [r4, #0]
 800b464:	6054      	str	r4, [r2, #4]
 800b466:	e7ca      	b.n	800b3fe <_free_r+0x22>
 800b468:	bd38      	pop	{r3, r4, r5, pc}
 800b46a:	bf00      	nop
 800b46c:	20000a3c 	.word	0x20000a3c

0800b470 <_init>:
 800b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b472:	bf00      	nop
 800b474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b476:	bc08      	pop	{r3}
 800b478:	469e      	mov	lr, r3
 800b47a:	4770      	bx	lr

0800b47c <_fini>:
 800b47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b47e:	bf00      	nop
 800b480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b482:	bc08      	pop	{r3}
 800b484:	469e      	mov	lr, r3
 800b486:	4770      	bx	lr
